---
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.129.2.14/23"],"mac_address":"0a:58:0a:81:02:0e","gateway_ips":["10.129.2.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.129.2.1"},{"dest":"172.30.0.0/16","nextHop":"10.129.2.1"},{"dest":"100.64.0.0/16","nextHop":"10.129.2.1"}],"ip_address":"10.129.2.14/23","gateway_ip":"10.129.2.1"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.129.2.14"
            ],
            "mac": "0a:58:0a:81:02:0e",
            "default": true,
            "dns": {}
        }]
      openshift.io/required-scc: restricted-v2
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2024-06-11T11:07:01Z"
    generateName: azure-path-fix-
    labels:
      batch.kubernetes.io/controller-uid: 8e7b8b71-fa4e-43d0-af7f-0dd4c571db39
      batch.kubernetes.io/job-name: azure-path-fix
      controller-uid: 8e7b8b71-fa4e-43d0-af7f-0dd4c571db39
      job-name: azure-path-fix
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.ovn.org/pod-networks: {}
      manager: ci-op-9xx71rvq-1e28e-w667k-worker-centralus3-hgn49
      operation: Update
      subresource: status
      time: "2024-06-11T11:07:01Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openshift.io/required-scc: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:batch.kubernetes.io/controller-uid: {}
            f:batch.kubernetes.io/job-name: {}
            f:controller-uid: {}
            f:job-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"8e7b8b71-fa4e-43d0-af7f-0dd4c571db39"}: {}
        f:spec:
          f:containers:
            k:{"name":"azure-path-fix"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"AZURE_ACCOUNTKEY"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"AZURE_CLIENT_ID"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AZURE_CLIENT_SECRET"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"AZURE_CONTAINER_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AZURE_ENVIRONMENT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AZURE_ENVIRONMENT_FILECONTENTS"}:
                  .: {}
                  f:name: {}
                k:{"name":"AZURE_ENVIRONMENT_FILEPATH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AZURE_FEDERATED_TOKEN_FILE"}:
                  .: {}
                  f:name: {}
                k:{"name":"AZURE_STORAGE_ACCOUNT_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AZURE_TENANT_ID"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/ca-trust/extracted"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/usr/share/pki/ca-trust-source"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/secrets/openshift/serviceaccount"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"bound-sa-token"}:
              .: {}
              f:name: {}
              f:projected:
                .: {}
                f:defaultMode: {}
                f:sources: {}
            k:{"name":"ca-trust-extracted"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"trusted-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
                f:optional: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-11T11:07:01Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus-daemon
      operation: Update
      subresource: status
      time: "2024-06-11T11:07:01Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.129.2.14"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-11T11:07:10Z"
    name: azure-path-fix-bgvnb
    namespace: openshift-image-registry
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: azure-path-fix
      uid: 8e7b8b71-fa4e-43d0-af7f-0dd4c571db39
    resourceVersion: "27074"
    uid: 5e90dd57-3d96-46fd-b7a7-73a1e6a5c938
  spec:
    containers:
    - args:
      - -c
      - mkdir -p /etc/pki/ca-trust/extracted/edk2 /etc/pki/ca-trust/extracted/java
        /etc/pki/ca-trust/extracted/openssl /etc/pki/ca-trust/extracted/pem && update-ca-trust
        extract && /usr/bin/move-blobs
      command:
      - /bin/sh
      env:
      - name: AZURE_ENVIRONMENT_FILEPATH
        value: /tmp/azurestackcloud.json
      - name: AZURE_STORAGE_ACCOUNT_NAME
        value: imageregistryciop9xj47x2
      - name: AZURE_CONTAINER_NAME
        value: ci-op-9xx71rvq-1e28e-w667k-image-registry-ksyntejlblcyvspseefl
      - name: AZURE_CLIENT_ID
        value: dfdd56ef-0a6b-49a4-bcee-4aad2eca18b0
      - name: AZURE_TENANT_ID
        value: 6047c7e9-b2ad-488d-a54e-dc3f6be6a7ee
      - name: AZURE_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            key: azure_client_secret
            name: installer-cloud-credentials
            optional: true
      - name: AZURE_FEDERATED_TOKEN_FILE
      - name: AZURE_ACCOUNTKEY
        valueFrom:
          secretKeyRef:
            key: REGISTRY_STORAGE_AZURE_ACCOUNTKEY
            name: image-registry-private-configuration
            optional: true
      - name: AZURE_ENVIRONMENT_FILECONTENTS
      - name: AZURE_ENVIRONMENT
        value: AzurePublicCloud
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:de17441284be3fbe91e2df7e2d46a547a658a327201f9b51b58c70fe54f8378e
      imagePullPolicy: IfNotPresent
      name: azure-path-fix
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000300000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /usr/share/pki/ca-trust-source
        name: trusted-ca
      - mountPath: /etc/pki/ca-trust/extracted
        name: ca-trust-extracted
      - mountPath: /var/run/secrets/openshift/serviceaccount
        name: bound-sa-token
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2sngg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ci-op-9xx71rvq-1e28e-w667k-worker-centralus3-hgn49
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000300000
      seLinuxOptions:
        level: s0:c17,c14
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: registry
    serviceAccountName: registry
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: ca-bundle.crt
          path: anchors/ca-bundle.crt
        name: trusted-ca
        optional: true
      name: trusted-ca
    - emptyDir: {}
      name: ca-trust-extracted
    - name: bound-sa-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: openshift
            expirationSeconds: 3600
            path: token
    - name: kube-api-access-2sngg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:09Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:01Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:08Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:08Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:01Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://963d68621adf501e7df4d033953dc408f4c01503a68c9e6835a96190333281fc
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:de17441284be3fbe91e2df7e2d46a547a658a327201f9b51b58c70fe54f8378e
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:de17441284be3fbe91e2df7e2d46a547a658a327201f9b51b58c70fe54f8378e
      lastState: {}
      name: azure-path-fix
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: cri-o://963d68621adf501e7df4d033953dc408f4c01503a68c9e6835a96190333281fc
          exitCode: 0
          finishedAt: "2024-06-11T11:07:07Z"
          reason: Completed
          startedAt: "2024-06-11T11:07:07Z"
    hostIP: 10.0.128.5
    hostIPs:
    - ip: 10.0.128.5
    phase: Succeeded
    podIP: 10.129.2.14
    podIPs:
    - ip: 10.129.2.14
    qosClass: Burstable
    startTime: "2024-06-11T11:07:01Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.129.0.13/23"],"mac_address":"0a:58:0a:81:00:0d","gateway_ips":["10.129.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.129.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.129.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.129.0.1"}],"ip_address":"10.129.0.13/23","gateway_ip":"10.129.0.1"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.129.0.13"
            ],
            "mac": "0a:58:0a:81:00:0d",
            "default": true,
            "dns": {}
        }]
      openshift.io/required-scc: restricted-v2
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2024-06-11T10:44:06Z"
    generateName: cluster-image-registry-operator-86c67755bb-
    labels:
      name: cluster-image-registry-operator
      pod-template-hash: 86c67755bb
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openshift.io/required-scc: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"efebefe7-9f3c-43f8-84a4-70daba02081f"}: {}
        f:spec:
          f:containers:
            k:{"name":"cluster-image-registry-operator"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"AZURE_ENVIRONMENT_FILEPATH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IMAGE_PRUNER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OPERATOR_IMAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"OPERATOR_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"RELEASE_VERSION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"WATCH_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":60000,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/configmaps/trusted-ca/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/secrets/openshift/serviceaccount"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:shareProcessNamespace: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"bound-sa-token"}:
              .: {}
              f:name: {}
              f:projected:
                .: {}
                f:defaultMode: {}
                f:sources: {}
            k:{"name":"image-registry-operator-tls"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"trusted-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
                f:optional: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-11T10:44:06Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      subresource: status
      time: "2024-06-11T10:44:06Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.ovn.org/pod-networks: {}
      manager: ci-op-9xx71rvq-1e28e-w667k-master-1
      operation: Update
      subresource: status
      time: "2024-06-11T10:48:00Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus-daemon
      operation: Update
      subresource: status
      time: "2024-06-11T10:49:05Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.129.0.13"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-11T10:49:24Z"
    name: cluster-image-registry-operator-86c67755bb-2b7lz
    namespace: openshift-image-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cluster-image-registry-operator-86c67755bb
      uid: efebefe7-9f3c-43f8-84a4-70daba02081f
    resourceVersion: "10627"
    uid: d03f1051-59d9-49c0-b68c-45d4db0061aa
  spec:
    containers:
    - args:
      - --files=/var/run/configmaps/trusted-ca/tls-ca-bundle.pem
      - --files=/etc/secrets/tls.crt
      - --files=/etc/secrets/tls.key
      env:
      - name: RELEASE_VERSION
        value: 4.16.0-0.nightly-2024-06-10-211334
      - name: WATCH_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: OPERATOR_NAME
        value: cluster-image-registry-operator
      - name: OPERATOR_IMAGE
        value: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:de17441284be3fbe91e2df7e2d46a547a658a327201f9b51b58c70fe54f8378e
      - name: IMAGE
        value: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      - name: IMAGE_PRUNER
        value: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:685c1ecb542461771adb7ed00ff73f21046cfacb3f65e656b4168cb6cc0e1dcd
      - name: AZURE_ENVIRONMENT_FILEPATH
        value: /tmp/azurestackcloud.json
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:de17441284be3fbe91e2df7e2d46a547a658a327201f9b51b58c70fe54f8378e
      imagePullPolicy: IfNotPresent
      name: cluster-image-registry-operator
      ports:
      - containerPort: 60000
        name: metrics
        protocol: TCP
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000300000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/run/configmaps/trusted-ca/
        name: trusted-ca
      - mountPath: /etc/secrets
        name: image-registry-operator-tls
      - mountPath: /var/run/secrets/openshift/serviceaccount
        name: bound-sa-token
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2hxlv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ci-op-9xx71rvq-1e28e-w667k-master-1
    nodeSelector:
      node-role.kubernetes.io/master: ""
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000300000
      seLinuxOptions:
        level: s0:c17,c14
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cluster-image-registry-operator
    serviceAccountName: cluster-image-registry-operator
    shareProcessNamespace: false
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 120
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 120
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - name: image-registry-operator-tls
      secret:
        defaultMode: 420
        secretName: image-registry-operator-tls
    - configMap:
        defaultMode: 420
        items:
        - key: ca-bundle.crt
          path: tls-ca-bundle.pem
        name: trusted-ca
        optional: true
      name: trusted-ca
    - name: bound-sa-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: openshift
            expirationSeconds: 3600
            path: token
    - name: kube-api-access-2hxlv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T10:49:24Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T10:48:00Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T10:49:24Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T10:49:24Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T10:48:00Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://9ab571aa5651943465032cafa7362f10e39a5d5866e14151d00e4dcdce43652d
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:de17441284be3fbe91e2df7e2d46a547a658a327201f9b51b58c70fe54f8378e
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:de17441284be3fbe91e2df7e2d46a547a658a327201f9b51b58c70fe54f8378e
      lastState: {}
      name: cluster-image-registry-operator
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-11T10:49:23Z"
    hostIP: 10.0.0.6
    hostIPs:
    - ip: 10.0.0.6
    phase: Running
    podIP: 10.129.0.13
    podIPs:
    - ip: 10.129.0.13
    qosClass: Burstable
    startTime: "2024-06-11T10:48:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      imageregistry.operator.openshift.io/dependencies-checksum: sha256:38d0bbc56f670125873b892a12bf91f423db19ce48e719fe9eb46213939e041b
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.131.0.18/23"],"mac_address":"0a:58:0a:83:00:12","gateway_ips":["10.131.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.131.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.131.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.131.0.1"}],"ip_address":"10.131.0.18/23","gateway_ip":"10.131.0.1"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.131.0.18"
            ],
            "mac": "0a:58:0a:83:00:12",
            "default": true,
            "dns": {}
        }]
      openshift.io/required-scc: restricted-v2
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2024-06-11T11:22:15Z"
    generateName: image-registry-ccb445df9-
    labels:
      docker-registry: default
      pod-template-hash: ccb445df9
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.ovn.org/pod-networks: {}
      manager: ci-op-9xx71rvq-1e28e-w667k-worker-centralus1-k2hfp
      operation: Update
      subresource: status
      time: "2024-06-11T11:22:15Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:imageregistry.operator.openshift.io/dependencies-checksum: {}
            f:openshift.io/required-scc: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:docker-registry: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"167ae3d5-290d-41ff-952a-a166f9ad54ae"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:podAntiAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"registry"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"REGISTRY_HEALTH_STORAGEDRIVER_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HEALTH_STORAGEDRIVER_INTERVAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HEALTH_STORAGEDRIVER_THRESHOLD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HTTP_ADDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HTTP_NET"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HTTP_SECRET"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HTTP_TLS_CERTIFICATE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HTTP_TLS_KEY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_OPENSHIFT_METRICS_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_OPENSHIFT_QUOTA_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_OPENSHIFT_SERVER_ADDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE_AZURE_ACCOUNTKEY"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"REGISTRY_STORAGE_AZURE_ACCOUNTNAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE_AZURE_CONTAINER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE_AZURE_REALM"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE_DELETE_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":5000,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/ca-trust/extracted"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/pki/ca-trust/source/anchors"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/usr/share/pki/ca-trust-source"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kubelet/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/secrets/openshift/serviceaccount"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
            f:fsGroupChangePolicy: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:topologySpreadConstraints:
            .: {}
            k:{"topologyKey":"kubernetes.io/hostname","whenUnsatisfiable":"DoNotSchedule"}:
              .: {}
              f:labelSelector: {}
              f:maxSkew: {}
              f:topologyKey: {}
              f:whenUnsatisfiable: {}
            k:{"topologyKey":"node-role.kubernetes.io/worker","whenUnsatisfiable":"DoNotSchedule"}:
              .: {}
              f:labelSelector: {}
              f:maxSkew: {}
              f:topologyKey: {}
              f:whenUnsatisfiable: {}
            k:{"topologyKey":"topology.kubernetes.io/zone","whenUnsatisfiable":"DoNotSchedule"}:
              .: {}
              f:labelSelector: {}
              f:maxSkew: {}
              f:topologyKey: {}
              f:whenUnsatisfiable: {}
          f:volumes:
            .: {}
            k:{"name":"bound-sa-token"}:
              .: {}
              f:name: {}
              f:projected:
                .: {}
                f:defaultMode: {}
                f:sources: {}
            k:{"name":"ca-trust-extracted"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"installation-pull-secrets"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"registry-certificates"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"registry-tls"}:
              .: {}
              f:name: {}
              f:projected:
                .: {}
                f:defaultMode: {}
                f:sources: {}
            k:{"name":"trusted-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
                f:optional: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-11T11:22:15Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus-daemon
      operation: Update
      subresource: status
      time: "2024-06-11T11:22:15Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.131.0.18"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-11T11:22:35Z"
    name: image-registry-ccb445df9-kkwgm
    namespace: openshift-image-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: image-registry-ccb445df9
      uid: 167ae3d5-290d-41ff-952a-a166f9ad54ae
    resourceVersion: "35444"
    uid: f24eecc7-179d-4950-bb63-7a078d6641c0
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              docker-registry: default
          namespaces:
          - openshift-image-registry
          topologyKey: kubernetes.io/hostname
    containers:
    - command:
      - /bin/sh
      - -c
      - mkdir -p /etc/pki/ca-trust/extracted/edk2 /etc/pki/ca-trust/extracted/java
        /etc/pki/ca-trust/extracted/openssl /etc/pki/ca-trust/extracted/pem && update-ca-trust
        extract && exec /usr/bin/dockerregistry
      env:
      - name: REGISTRY_STORAGE_AZURE_ACCOUNTKEY
        valueFrom:
          secretKeyRef:
            key: REGISTRY_STORAGE_AZURE_ACCOUNTKEY
            name: image-registry-private-configuration
      - name: REGISTRY_STORAGE
        value: azure
      - name: REGISTRY_STORAGE_AZURE_CONTAINER
        value: ci-op-9xx71rvq-1e28e-w667k-image-registry-ksyntejlblcyvspseefl
      - name: REGISTRY_STORAGE_AZURE_ACCOUNTNAME
        value: imageregistryciop9xj47x2
      - name: REGISTRY_STORAGE_AZURE_REALM
        value: core.windows.net
      - name: REGISTRY_HTTP_ADDR
        value: :5000
      - name: REGISTRY_HTTP_NET
        value: tcp
      - name: REGISTRY_HTTP_SECRET
        value: 83147546c7aba6876a710aaa7a5ccc8616e9b967b2d8ea05b1fa08f67af45147047bc1b9a1ec3e58ed22ace20c85da953abe35249959d9b62c5d3c3ad93d9c7f
      - name: REGISTRY_LOG_LEVEL
        value: info
      - name: REGISTRY_OPENSHIFT_QUOTA_ENABLED
        value: "true"
      - name: REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR
        value: inmemory
      - name: REGISTRY_STORAGE_DELETE_ENABLED
        value: "true"
      - name: REGISTRY_HEALTH_STORAGEDRIVER_ENABLED
        value: "true"
      - name: REGISTRY_HEALTH_STORAGEDRIVER_INTERVAL
        value: 10s
      - name: REGISTRY_HEALTH_STORAGEDRIVER_THRESHOLD
        value: "1"
      - name: REGISTRY_OPENSHIFT_METRICS_ENABLED
        value: "true"
      - name: REGISTRY_OPENSHIFT_SERVER_ADDR
        value: image-registry.openshift-image-registry.svc:5000
      - name: REGISTRY_HTTP_TLS_CERTIFICATE
        value: /etc/secrets/tls.crt
      - name: REGISTRY_HTTP_TLS_KEY
        value: /etc/secrets/tls.key
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - sleep
            - "25"
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 5000
          scheme: HTTPS
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: registry
      ports:
      - containerPort: 5000
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 5000
          scheme: HTTPS
        initialDelaySeconds: 15
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000300000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/secrets
        name: registry-tls
      - mountPath: /etc/pki/ca-trust/extracted
        name: ca-trust-extracted
      - mountPath: /etc/pki/ca-trust/source/anchors
        name: registry-certificates
      - mountPath: /usr/share/pki/ca-trust-source
        name: trusted-ca
      - mountPath: /var/lib/kubelet/
        name: installation-pull-secrets
      - mountPath: /var/run/secrets/openshift/serviceaccount
        name: bound-sa-token
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zxgqn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: registry-dockercfg-t8b8m
    nodeName: ci-op-9xx71rvq-1e28e-w667k-worker-centralus1-k2hfp
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000300000
      fsGroupChangePolicy: OnRootMismatch
      seLinuxOptions:
        level: s0:c17,c14
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: registry
    serviceAccountName: registry
    terminationGracePeriodSeconds: 55
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    topologySpreadConstraints:
    - labelSelector:
        matchLabels:
          docker-registry: default
      maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: DoNotSchedule
    - labelSelector:
        matchLabels:
          docker-registry: default
      maxSkew: 1
      topologyKey: node-role.kubernetes.io/worker
      whenUnsatisfiable: DoNotSchedule
    - labelSelector:
        matchLabels:
          docker-registry: default
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
    volumes:
    - name: registry-tls
      projected:
        defaultMode: 420
        sources:
        - secret:
            name: image-registry-tls
    - emptyDir: {}
      name: ca-trust-extracted
    - configMap:
        defaultMode: 420
        name: image-registry-certificates
      name: registry-certificates
    - configMap:
        defaultMode: 420
        items:
        - key: ca-bundle.crt
          path: anchors/ca-bundle.crt
        name: trusted-ca
        optional: true
      name: trusted-ca
    - name: installation-pull-secrets
      secret:
        defaultMode: 420
        items:
        - key: .dockerconfigjson
          path: config.json
        optional: true
        secretName: installation-pull-secrets
    - name: bound-sa-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: openshift
            expirationSeconds: 3600
            path: token
    - name: kube-api-access-zxgqn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:22:16Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:22:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:22:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:22:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:22:15Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://7b1961e80568ad6212c606948230f2c3883dfb076a6347536c3fa0fdda74d104
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      lastState: {}
      name: registry
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-11T11:22:16Z"
    hostIP: 10.0.128.4
    hostIPs:
    - ip: 10.0.128.4
    phase: Running
    podIP: 10.131.0.18
    podIPs:
    - ip: 10.131.0.18
    qosClass: Burstable
    startTime: "2024-06-11T11:22:15Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      imageregistry.operator.openshift.io/dependencies-checksum: sha256:38d0bbc56f670125873b892a12bf91f423db19ce48e719fe9eb46213939e041b
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.129.2.18/23"],"mac_address":"0a:58:0a:81:02:12","gateway_ips":["10.129.2.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.129.2.1"},{"dest":"172.30.0.0/16","nextHop":"10.129.2.1"},{"dest":"100.64.0.0/16","nextHop":"10.129.2.1"}],"ip_address":"10.129.2.18/23","gateway_ip":"10.129.2.1"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.129.2.18"
            ],
            "mac": "0a:58:0a:81:02:12",
            "default": true,
            "dns": {}
        }]
      openshift.io/required-scc: restricted-v2
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2024-06-11T11:22:15Z"
    generateName: image-registry-ccb445df9-
    labels:
      docker-registry: default
      pod-template-hash: ccb445df9
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:imageregistry.operator.openshift.io/dependencies-checksum: {}
            f:openshift.io/required-scc: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:docker-registry: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"167ae3d5-290d-41ff-952a-a166f9ad54ae"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:podAntiAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"registry"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"REGISTRY_HEALTH_STORAGEDRIVER_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HEALTH_STORAGEDRIVER_INTERVAL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HEALTH_STORAGEDRIVER_THRESHOLD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HTTP_ADDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HTTP_NET"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HTTP_SECRET"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HTTP_TLS_CERTIFICATE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_HTTP_TLS_KEY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_OPENSHIFT_METRICS_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_OPENSHIFT_QUOTA_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_OPENSHIFT_SERVER_ADDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE_AZURE_ACCOUNTKEY"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"REGISTRY_STORAGE_AZURE_ACCOUNTNAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE_AZURE_CONTAINER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE_AZURE_REALM"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REGISTRY_STORAGE_DELETE_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":5000,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/pki/ca-trust/extracted"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/pki/ca-trust/source/anchors"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/etc/secrets"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/usr/share/pki/ca-trust-source"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kubelet/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/secrets/openshift/serviceaccount"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
            f:fsGroupChangePolicy: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:topologySpreadConstraints:
            .: {}
            k:{"topologyKey":"kubernetes.io/hostname","whenUnsatisfiable":"DoNotSchedule"}:
              .: {}
              f:labelSelector: {}
              f:maxSkew: {}
              f:topologyKey: {}
              f:whenUnsatisfiable: {}
            k:{"topologyKey":"node-role.kubernetes.io/worker","whenUnsatisfiable":"DoNotSchedule"}:
              .: {}
              f:labelSelector: {}
              f:maxSkew: {}
              f:topologyKey: {}
              f:whenUnsatisfiable: {}
            k:{"topologyKey":"topology.kubernetes.io/zone","whenUnsatisfiable":"DoNotSchedule"}:
              .: {}
              f:labelSelector: {}
              f:maxSkew: {}
              f:topologyKey: {}
              f:whenUnsatisfiable: {}
          f:volumes:
            .: {}
            k:{"name":"bound-sa-token"}:
              .: {}
              f:name: {}
              f:projected:
                .: {}
                f:defaultMode: {}
                f:sources: {}
            k:{"name":"ca-trust-extracted"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"installation-pull-secrets"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:optional: {}
                f:secretName: {}
            k:{"name":"registry-certificates"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"registry-tls"}:
              .: {}
              f:name: {}
              f:projected:
                .: {}
                f:defaultMode: {}
                f:sources: {}
            k:{"name":"trusted-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
                f:optional: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-11T11:22:15Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      subresource: status
      time: "2024-06-11T11:22:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.ovn.org/pod-networks: {}
      manager: ci-op-9xx71rvq-1e28e-w667k-worker-centralus3-hgn49
      operation: Update
      subresource: status
      time: "2024-06-11T11:22:46Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus-daemon
      operation: Update
      subresource: status
      time: "2024-06-11T11:22:46Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.129.2.18"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-11T11:23:06Z"
    name: image-registry-ccb445df9-r7bcf
    namespace: openshift-image-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: image-registry-ccb445df9
      uid: 167ae3d5-290d-41ff-952a-a166f9ad54ae
    resourceVersion: "35777"
    uid: db21b730-2adf-48dd-863b-712849a5cc25
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              docker-registry: default
          namespaces:
          - openshift-image-registry
          topologyKey: kubernetes.io/hostname
    containers:
    - command:
      - /bin/sh
      - -c
      - mkdir -p /etc/pki/ca-trust/extracted/edk2 /etc/pki/ca-trust/extracted/java
        /etc/pki/ca-trust/extracted/openssl /etc/pki/ca-trust/extracted/pem && update-ca-trust
        extract && exec /usr/bin/dockerregistry
      env:
      - name: REGISTRY_STORAGE_AZURE_ACCOUNTKEY
        valueFrom:
          secretKeyRef:
            key: REGISTRY_STORAGE_AZURE_ACCOUNTKEY
            name: image-registry-private-configuration
      - name: REGISTRY_STORAGE
        value: azure
      - name: REGISTRY_STORAGE_AZURE_CONTAINER
        value: ci-op-9xx71rvq-1e28e-w667k-image-registry-ksyntejlblcyvspseefl
      - name: REGISTRY_STORAGE_AZURE_ACCOUNTNAME
        value: imageregistryciop9xj47x2
      - name: REGISTRY_STORAGE_AZURE_REALM
        value: core.windows.net
      - name: REGISTRY_HTTP_ADDR
        value: :5000
      - name: REGISTRY_HTTP_NET
        value: tcp
      - name: REGISTRY_HTTP_SECRET
        value: 83147546c7aba6876a710aaa7a5ccc8616e9b967b2d8ea05b1fa08f67af45147047bc1b9a1ec3e58ed22ace20c85da953abe35249959d9b62c5d3c3ad93d9c7f
      - name: REGISTRY_LOG_LEVEL
        value: info
      - name: REGISTRY_OPENSHIFT_QUOTA_ENABLED
        value: "true"
      - name: REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR
        value: inmemory
      - name: REGISTRY_STORAGE_DELETE_ENABLED
        value: "true"
      - name: REGISTRY_HEALTH_STORAGEDRIVER_ENABLED
        value: "true"
      - name: REGISTRY_HEALTH_STORAGEDRIVER_INTERVAL
        value: 10s
      - name: REGISTRY_HEALTH_STORAGEDRIVER_THRESHOLD
        value: "1"
      - name: REGISTRY_OPENSHIFT_METRICS_ENABLED
        value: "true"
      - name: REGISTRY_OPENSHIFT_SERVER_ADDR
        value: image-registry.openshift-image-registry.svc:5000
      - name: REGISTRY_HTTP_TLS_CERTIFICATE
        value: /etc/secrets/tls.crt
      - name: REGISTRY_HTTP_TLS_KEY
        value: /etc/secrets/tls.key
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - sleep
            - "25"
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 5000
          scheme: HTTPS
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: registry
      ports:
      - containerPort: 5000
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 5000
          scheme: HTTPS
        initialDelaySeconds: 15
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000300000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/secrets
        name: registry-tls
      - mountPath: /etc/pki/ca-trust/extracted
        name: ca-trust-extracted
      - mountPath: /etc/pki/ca-trust/source/anchors
        name: registry-certificates
      - mountPath: /usr/share/pki/ca-trust-source
        name: trusted-ca
      - mountPath: /var/lib/kubelet/
        name: installation-pull-secrets
      - mountPath: /var/run/secrets/openshift/serviceaccount
        name: bound-sa-token
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lvb5s
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: registry-dockercfg-t8b8m
    nodeName: ci-op-9xx71rvq-1e28e-w667k-worker-centralus3-hgn49
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000300000
      fsGroupChangePolicy: OnRootMismatch
      seLinuxOptions:
        level: s0:c17,c14
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: registry
    serviceAccountName: registry
    terminationGracePeriodSeconds: 55
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    topologySpreadConstraints:
    - labelSelector:
        matchLabels:
          docker-registry: default
      maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: DoNotSchedule
    - labelSelector:
        matchLabels:
          docker-registry: default
      maxSkew: 1
      topologyKey: node-role.kubernetes.io/worker
      whenUnsatisfiable: DoNotSchedule
    - labelSelector:
        matchLabels:
          docker-registry: default
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: DoNotSchedule
    volumes:
    - name: registry-tls
      projected:
        defaultMode: 420
        sources:
        - secret:
            name: image-registry-tls
    - emptyDir: {}
      name: ca-trust-extracted
    - configMap:
        defaultMode: 420
        name: image-registry-certificates
      name: registry-certificates
    - configMap:
        defaultMode: 420
        items:
        - key: ca-bundle.crt
          path: anchors/ca-bundle.crt
        name: trusted-ca
        optional: true
      name: trusted-ca
    - name: installation-pull-secrets
      secret:
        defaultMode: 420
        items:
        - key: .dockerconfigjson
          path: config.json
        optional: true
        secretName: installation-pull-secrets
    - name: bound-sa-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: openshift
            expirationSeconds: 3600
            path: token
    - name: kube-api-access-lvb5s
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:22:47Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:22:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:23:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:23:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:22:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://34bea14efd3330ce669f2453ca289397b70276d6bf37c54bcbaf9185ac24dd93
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      lastState: {}
      name: registry
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-11T11:22:46Z"
    hostIP: 10.0.128.5
    hostIPs:
    - ip: 10.0.128.5
    phase: Running
    podIP: 10.129.2.18
    podIPs:
    - ip: 10.129.2.18
    qosClass: Burstable
    startTime: "2024-06-11T11:22:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      openshift.io/required-scc: privileged
      openshift.io/scc: privileged
    creationTimestamp: "2024-06-11T11:07:00Z"
    generateName: node-ca-
    labels:
      controller-revision-hash: 8586b8c956
      name: node-ca
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openshift.io/required-scc: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"aa6c60c4-8ab2-4fec-bed6-39320ca82a6e"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"node-ca"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/docker/certs.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp/serviceca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"serviceca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-11T11:07:00Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.128.4"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-11T11:07:05Z"
    name: node-ca-6lgf8
    namespace: openshift-image-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: node-ca
      uid: aa6c60c4-8ab2-4fec-bed6-39320ca82a6e
    resourceVersion: "26275"
    uid: 0c5f42c5-8db7-44c0-b15e-f54b524b40cc
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ci-op-9xx71rvq-1e28e-w667k-worker-centralus1-k2hfp
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        trap 'jobs -p | xargs -r kill; echo shutting down node-ca; exit 0' TERM
        while [ true ];
        do
          for f in $(ls /tmp/serviceca); do
              echo $f
              ca_file_path="/tmp/serviceca/${f}"
              f=$(echo $f | sed  -r 's/(.*)\.\./\1:/')
              reg_dir_path="/etc/docker/certs.d/${f}"
              if [ -e "${reg_dir_path}" ]; then
                  cp -u $ca_file_path $reg_dir_path/ca.crt
              else
                  mkdir $reg_dir_path
                  cp $ca_file_path $reg_dir_path/ca.crt
              fi
          done
          for d in $(ls /etc/docker/certs.d); do
              echo $d
              dp=$(echo $d | sed  -r 's/(.*):/\1\.\./')
              reg_conf_path="/tmp/serviceca/${dp}"
              if [ ! -e "${reg_conf_path}" ]; then
                  rm -rf /etc/docker/certs.d/$d
              fi
          done
          sleep 60 & wait ${!}
        done
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imagePullPolicy: IfNotPresent
      name: node-ca
      resources:
        requests:
          cpu: 10m
          memory: 10Mi
      securityContext:
        privileged: true
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp/serviceca
        name: serviceca
      - mountPath: /etc/docker/certs.d
        name: host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dcwzh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ci-op-9xx71rvq-1e28e-w667k-worker-centralus1-k2hfp
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: node-ca
    serviceAccountName: node-ca
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/docker/certs.d
        type: ""
      name: host
    - configMap:
        defaultMode: 420
        name: image-registry-certificates
      name: serviceca
    - name: kube-api-access-dcwzh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://b430f035b8f3265f37765a1176fd3bc9130da59005926396ba14a3327b89fa18
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      lastState: {}
      name: node-ca
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-11T11:07:05Z"
    hostIP: 10.0.128.4
    hostIPs:
    - ip: 10.0.128.4
    phase: Running
    podIP: 10.0.128.4
    podIPs:
    - ip: 10.0.128.4
    qosClass: Burstable
    startTime: "2024-06-11T11:07:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      openshift.io/required-scc: privileged
      openshift.io/scc: privileged
    creationTimestamp: "2024-06-11T11:07:00Z"
    generateName: node-ca-
    labels:
      controller-revision-hash: 8586b8c956
      name: node-ca
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openshift.io/required-scc: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"aa6c60c4-8ab2-4fec-bed6-39320ca82a6e"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"node-ca"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/docker/certs.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp/serviceca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"serviceca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-11T11:07:00Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.128.5"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-11T11:07:05Z"
    name: node-ca-9fvnn
    namespace: openshift-image-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: node-ca
      uid: aa6c60c4-8ab2-4fec-bed6-39320ca82a6e
    resourceVersion: "26308"
    uid: a6df812c-44d8-4477-8157-15c86d9bb92f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ci-op-9xx71rvq-1e28e-w667k-worker-centralus3-hgn49
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        trap 'jobs -p | xargs -r kill; echo shutting down node-ca; exit 0' TERM
        while [ true ];
        do
          for f in $(ls /tmp/serviceca); do
              echo $f
              ca_file_path="/tmp/serviceca/${f}"
              f=$(echo $f | sed  -r 's/(.*)\.\./\1:/')
              reg_dir_path="/etc/docker/certs.d/${f}"
              if [ -e "${reg_dir_path}" ]; then
                  cp -u $ca_file_path $reg_dir_path/ca.crt
              else
                  mkdir $reg_dir_path
                  cp $ca_file_path $reg_dir_path/ca.crt
              fi
          done
          for d in $(ls /etc/docker/certs.d); do
              echo $d
              dp=$(echo $d | sed  -r 's/(.*):/\1\.\./')
              reg_conf_path="/tmp/serviceca/${dp}"
              if [ ! -e "${reg_conf_path}" ]; then
                  rm -rf /etc/docker/certs.d/$d
              fi
          done
          sleep 60 & wait ${!}
        done
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imagePullPolicy: IfNotPresent
      name: node-ca
      resources:
        requests:
          cpu: 10m
          memory: 10Mi
      securityContext:
        privileged: true
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp/serviceca
        name: serviceca
      - mountPath: /etc/docker/certs.d
        name: host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tsblc
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ci-op-9xx71rvq-1e28e-w667k-worker-centralus3-hgn49
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: node-ca
    serviceAccountName: node-ca
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/docker/certs.d
        type: ""
      name: host
    - configMap:
        defaultMode: 420
        name: image-registry-certificates
      name: serviceca
    - name: kube-api-access-tsblc
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://d6fef0c8e176e117a8f6c973baef80708dc3c4a9908b12347ac1d0034ec1234d
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      lastState: {}
      name: node-ca
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-11T11:07:05Z"
    hostIP: 10.0.128.5
    hostIPs:
    - ip: 10.0.128.5
    phase: Running
    podIP: 10.0.128.5
    podIPs:
    - ip: 10.0.128.5
    qosClass: Burstable
    startTime: "2024-06-11T11:07:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      openshift.io/required-scc: privileged
      openshift.io/scc: privileged
    creationTimestamp: "2024-06-11T11:07:00Z"
    generateName: node-ca-
    labels:
      controller-revision-hash: 8586b8c956
      name: node-ca
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openshift.io/required-scc: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"aa6c60c4-8ab2-4fec-bed6-39320ca82a6e"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"node-ca"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/docker/certs.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp/serviceca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"serviceca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-11T11:07:00Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.0.8"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-11T11:07:06Z"
    name: node-ca-k8tr5
    namespace: openshift-image-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: node-ca
      uid: aa6c60c4-8ab2-4fec-bed6-39320ca82a6e
    resourceVersion: "26420"
    uid: f0a045dd-1e6a-420d-9458-dbd0b81a9027
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ci-op-9xx71rvq-1e28e-w667k-master-0
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        trap 'jobs -p | xargs -r kill; echo shutting down node-ca; exit 0' TERM
        while [ true ];
        do
          for f in $(ls /tmp/serviceca); do
              echo $f
              ca_file_path="/tmp/serviceca/${f}"
              f=$(echo $f | sed  -r 's/(.*)\.\./\1:/')
              reg_dir_path="/etc/docker/certs.d/${f}"
              if [ -e "${reg_dir_path}" ]; then
                  cp -u $ca_file_path $reg_dir_path/ca.crt
              else
                  mkdir $reg_dir_path
                  cp $ca_file_path $reg_dir_path/ca.crt
              fi
          done
          for d in $(ls /etc/docker/certs.d); do
              echo $d
              dp=$(echo $d | sed  -r 's/(.*):/\1\.\./')
              reg_conf_path="/tmp/serviceca/${dp}"
              if [ ! -e "${reg_conf_path}" ]; then
                  rm -rf /etc/docker/certs.d/$d
              fi
          done
          sleep 60 & wait ${!}
        done
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imagePullPolicy: IfNotPresent
      name: node-ca
      resources:
        requests:
          cpu: 10m
          memory: 10Mi
      securityContext:
        privileged: true
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp/serviceca
        name: serviceca
      - mountPath: /etc/docker/certs.d
        name: host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tkcj8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ci-op-9xx71rvq-1e28e-w667k-master-0
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: node-ca
    serviceAccountName: node-ca
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/docker/certs.d
        type: ""
      name: host
    - configMap:
        defaultMode: 420
        name: image-registry-certificates
      name: serviceca
    - name: kube-api-access-tkcj8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:06Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://bb4920e1375d3c819ccbfc991c5b10edbc16fd1e1f256b90e624c86cdcab359d
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      lastState: {}
      name: node-ca
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-11T11:07:05Z"
    hostIP: 10.0.0.8
    hostIPs:
    - ip: 10.0.0.8
    phase: Running
    podIP: 10.0.0.8
    podIPs:
    - ip: 10.0.0.8
    qosClass: Burstable
    startTime: "2024-06-11T11:07:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      openshift.io/required-scc: privileged
      openshift.io/scc: privileged
    creationTimestamp: "2024-06-11T11:07:00Z"
    generateName: node-ca-
    labels:
      controller-revision-hash: 8586b8c956
      name: node-ca
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openshift.io/required-scc: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"aa6c60c4-8ab2-4fec-bed6-39320ca82a6e"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"node-ca"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/docker/certs.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp/serviceca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"serviceca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-11T11:07:00Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.0.6"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-11T11:07:06Z"
    name: node-ca-ldzgh
    namespace: openshift-image-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: node-ca
      uid: aa6c60c4-8ab2-4fec-bed6-39320ca82a6e
    resourceVersion: "26352"
    uid: 87ea3da4-81cb-447c-bb82-469b1750725a
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ci-op-9xx71rvq-1e28e-w667k-master-1
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        trap 'jobs -p | xargs -r kill; echo shutting down node-ca; exit 0' TERM
        while [ true ];
        do
          for f in $(ls /tmp/serviceca); do
              echo $f
              ca_file_path="/tmp/serviceca/${f}"
              f=$(echo $f | sed  -r 's/(.*)\.\./\1:/')
              reg_dir_path="/etc/docker/certs.d/${f}"
              if [ -e "${reg_dir_path}" ]; then
                  cp -u $ca_file_path $reg_dir_path/ca.crt
              else
                  mkdir $reg_dir_path
                  cp $ca_file_path $reg_dir_path/ca.crt
              fi
          done
          for d in $(ls /etc/docker/certs.d); do
              echo $d
              dp=$(echo $d | sed  -r 's/(.*):/\1\.\./')
              reg_conf_path="/tmp/serviceca/${dp}"
              if [ ! -e "${reg_conf_path}" ]; then
                  rm -rf /etc/docker/certs.d/$d
              fi
          done
          sleep 60 & wait ${!}
        done
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imagePullPolicy: IfNotPresent
      name: node-ca
      resources:
        requests:
          cpu: 10m
          memory: 10Mi
      securityContext:
        privileged: true
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp/serviceca
        name: serviceca
      - mountPath: /etc/docker/certs.d
        name: host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4297g
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ci-op-9xx71rvq-1e28e-w667k-master-1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: node-ca
    serviceAccountName: node-ca
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/docker/certs.d
        type: ""
      name: host
    - configMap:
        defaultMode: 420
        name: image-registry-certificates
      name: serviceca
    - name: kube-api-access-4297g
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:06Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://28f626da8fde2cf2c7dcd55d5c9e71aa5f2b5cb65122bc9f4ae3666101f0c14e
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      lastState: {}
      name: node-ca
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-11T11:07:05Z"
    hostIP: 10.0.0.6
    hostIPs:
    - ip: 10.0.0.6
    phase: Running
    podIP: 10.0.0.6
    podIPs:
    - ip: 10.0.0.6
    qosClass: Burstable
    startTime: "2024-06-11T11:07:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      openshift.io/required-scc: privileged
      openshift.io/scc: privileged
    creationTimestamp: "2024-06-11T11:07:00Z"
    generateName: node-ca-
    labels:
      controller-revision-hash: 8586b8c956
      name: node-ca
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openshift.io/required-scc: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"aa6c60c4-8ab2-4fec-bed6-39320ca82a6e"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"node-ca"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/docker/certs.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp/serviceca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"serviceca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-11T11:07:00Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.128.6"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-11T11:07:05Z"
    name: node-ca-qnf6s
    namespace: openshift-image-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: node-ca
      uid: aa6c60c4-8ab2-4fec-bed6-39320ca82a6e
    resourceVersion: "26261"
    uid: d714f389-449e-467d-b230-49a870c21b78
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ci-op-9xx71rvq-1e28e-w667k-worker-centralus2-xnvk9
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        trap 'jobs -p | xargs -r kill; echo shutting down node-ca; exit 0' TERM
        while [ true ];
        do
          for f in $(ls /tmp/serviceca); do
              echo $f
              ca_file_path="/tmp/serviceca/${f}"
              f=$(echo $f | sed  -r 's/(.*)\.\./\1:/')
              reg_dir_path="/etc/docker/certs.d/${f}"
              if [ -e "${reg_dir_path}" ]; then
                  cp -u $ca_file_path $reg_dir_path/ca.crt
              else
                  mkdir $reg_dir_path
                  cp $ca_file_path $reg_dir_path/ca.crt
              fi
          done
          for d in $(ls /etc/docker/certs.d); do
              echo $d
              dp=$(echo $d | sed  -r 's/(.*):/\1\.\./')
              reg_conf_path="/tmp/serviceca/${dp}"
              if [ ! -e "${reg_conf_path}" ]; then
                  rm -rf /etc/docker/certs.d/$d
              fi
          done
          sleep 60 & wait ${!}
        done
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imagePullPolicy: IfNotPresent
      name: node-ca
      resources:
        requests:
          cpu: 10m
          memory: 10Mi
      securityContext:
        privileged: true
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp/serviceca
        name: serviceca
      - mountPath: /etc/docker/certs.d
        name: host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-x5cj9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ci-op-9xx71rvq-1e28e-w667k-worker-centralus2-xnvk9
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: node-ca
    serviceAccountName: node-ca
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/docker/certs.d
        type: ""
      name: host
    - configMap:
        defaultMode: 420
        name: image-registry-certificates
      name: serviceca
    - name: kube-api-access-x5cj9
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://21704cee72f87037b7cc5f9c971d71f5ea18b8fba34cc677068a7d3eb66fa56c
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      lastState: {}
      name: node-ca
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-11T11:07:04Z"
    hostIP: 10.0.128.6
    hostIPs:
    - ip: 10.0.128.6
    phase: Running
    podIP: 10.0.128.6
    podIPs:
    - ip: 10.0.128.6
    qosClass: Burstable
    startTime: "2024-06-11T11:07:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      openshift.io/required-scc: privileged
      openshift.io/scc: privileged
    creationTimestamp: "2024-06-11T11:07:00Z"
    generateName: node-ca-
    labels:
      controller-revision-hash: 8586b8c956
      name: node-ca
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:openshift.io/required-scc: {}
            f:target.workload.openshift.io/management: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"aa6c60c4-8ab2-4fec-bed6-39320ca82a6e"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"node-ca"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/docker/certs.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp/serviceca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"serviceca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-11T11:07:00Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodReadyToStartContainers"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:hostIPs: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.0.7"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-11T11:07:05Z"
    name: node-ca-rqp2v
    namespace: openshift-image-registry
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: node-ca
      uid: aa6c60c4-8ab2-4fec-bed6-39320ca82a6e
    resourceVersion: "26297"
    uid: 4ad8e17b-39db-4296-8c0f-b161bf536215
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ci-op-9xx71rvq-1e28e-w667k-master-2
    containers:
    - command:
      - /bin/sh
      - -c
      - |
        trap 'jobs -p | xargs -r kill; echo shutting down node-ca; exit 0' TERM
        while [ true ];
        do
          for f in $(ls /tmp/serviceca); do
              echo $f
              ca_file_path="/tmp/serviceca/${f}"
              f=$(echo $f | sed  -r 's/(.*)\.\./\1:/')
              reg_dir_path="/etc/docker/certs.d/${f}"
              if [ -e "${reg_dir_path}" ]; then
                  cp -u $ca_file_path $reg_dir_path/ca.crt
              else
                  mkdir $reg_dir_path
                  cp $ca_file_path $reg_dir_path/ca.crt
              fi
          done
          for d in $(ls /etc/docker/certs.d); do
              echo $d
              dp=$(echo $d | sed  -r 's/(.*):/\1\.\./')
              reg_conf_path="/tmp/serviceca/${dp}"
              if [ ! -e "${reg_conf_path}" ]; then
                  rm -rf /etc/docker/certs.d/$d
              fi
          done
          sleep 60 & wait ${!}
        done
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imagePullPolicy: IfNotPresent
      name: node-ca
      resources:
        requests:
          cpu: 10m
          memory: 10Mi
      securityContext:
        privileged: true
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp/serviceca
        name: serviceca
      - mountPath: /etc/docker/certs.d
        name: host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dwr65
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ci-op-9xx71rvq-1e28e-w667k-master-2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: node-ca
    serviceAccountName: node-ca
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - hostPath:
        path: /etc/docker/certs.d
        type: ""
      name: host
    - configMap:
        defaultMode: 420
        name: image-registry-certificates
      name: serviceca
    - name: kube-api-access-dwr65
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-11T11:07:00Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://78dac83fdedcbe537d673fd6feb06aa0d012d894843bbc5ac917b9efd2f075e3
      image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
      lastState: {}
      name: node-ca
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-11T11:07:05Z"
    hostIP: 10.0.0.7
    hostIPs:
    - ip: 10.0.0.7
    phase: Running
    podIP: 10.0.0.7
    podIPs:
    - ip: 10.0.0.7
    qosClass: Burstable
    startTime: "2024-06-11T11:07:00Z"
kind: PodList
metadata:
  resourceVersion: "39937"
