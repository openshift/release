---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    imageregistry.operator.openshift.io/dependencies-checksum: sha256:38d0bbc56f670125873b892a12bf91f423db19ce48e719fe9eb46213939e041b
    k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.129.2.18/23"],"mac_address":"0a:58:0a:81:02:12","gateway_ips":["10.129.2.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.129.2.1"},{"dest":"172.30.0.0/16","nextHop":"10.129.2.1"},{"dest":"100.64.0.0/16","nextHop":"10.129.2.1"}],"ip_address":"10.129.2.18/23","gateway_ip":"10.129.2.1"}}'
    k8s.v1.cni.cncf.io/network-status: |-
      [{
          "name": "ovn-kubernetes",
          "interface": "eth0",
          "ips": [
              "10.129.2.18"
          ],
          "mac": "0a:58:0a:81:02:12",
          "default": true,
          "dns": {}
      }]
    openshift.io/required-scc: restricted-v2
    openshift.io/scc: restricted-v2
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
  creationTimestamp: "2024-06-11T11:22:15Z"
  generateName: image-registry-ccb445df9-
  labels:
    docker-registry: default
    pod-template-hash: ccb445df9
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:imageregistry.operator.openshift.io/dependencies-checksum: {}
          f:openshift.io/required-scc: {}
          f:target.workload.openshift.io/management: {}
        f:generateName: {}
        f:labels:
          .: {}
          f:docker-registry: {}
          f:pod-template-hash: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"167ae3d5-290d-41ff-952a-a166f9ad54ae"}: {}
      f:spec:
        f:affinity:
          .: {}
          f:podAntiAffinity:
            .: {}
            f:requiredDuringSchedulingIgnoredDuringExecution: {}
        f:containers:
          k:{"name":"registry"}:
            .: {}
            f:command: {}
            f:env:
              .: {}
              k:{"name":"REGISTRY_HEALTH_STORAGEDRIVER_ENABLED"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_HEALTH_STORAGEDRIVER_INTERVAL"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_HEALTH_STORAGEDRIVER_THRESHOLD"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_HTTP_ADDR"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_HTTP_NET"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_HTTP_SECRET"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_HTTP_TLS_CERTIFICATE"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_HTTP_TLS_KEY"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_LOG_LEVEL"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_OPENSHIFT_METRICS_ENABLED"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_OPENSHIFT_QUOTA_ENABLED"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_OPENSHIFT_SERVER_ADDR"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_STORAGE"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_STORAGE_AZURE_ACCOUNTKEY"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:secretKeyRef: {}
              k:{"name":"REGISTRY_STORAGE_AZURE_ACCOUNTNAME"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_STORAGE_AZURE_CONTAINER"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_STORAGE_AZURE_REALM"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"REGISTRY_STORAGE_DELETE_ENABLED"}:
                .: {}
                f:name: {}
                f:value: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:lifecycle:
              .: {}
              f:preStop:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
            f:livenessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:initialDelaySeconds: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":5000,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:protocol: {}
            f:readinessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:initialDelaySeconds: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/etc/pki/ca-trust/extracted"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/pki/ca-trust/source/anchors"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/secrets"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/usr/share/pki/ca-trust-source"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/var/lib/kubelet/"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/var/run/secrets/openshift/serviceaccount"}:
                .: {}
                f:mountPath: {}
                f:name: {}
                f:readOnly: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:nodeSelector: {}
        f:priorityClassName: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext:
          .: {}
          f:fsGroup: {}
          f:fsGroupChangePolicy: {}
        f:serviceAccount: {}
        f:serviceAccountName: {}
        f:terminationGracePeriodSeconds: {}
        f:topologySpreadConstraints:
          .: {}
          k:{"topologyKey":"kubernetes.io/hostname","whenUnsatisfiable":"DoNotSchedule"}:
            .: {}
            f:labelSelector: {}
            f:maxSkew: {}
            f:topologyKey: {}
            f:whenUnsatisfiable: {}
          k:{"topologyKey":"node-role.kubernetes.io/worker","whenUnsatisfiable":"DoNotSchedule"}:
            .: {}
            f:labelSelector: {}
            f:maxSkew: {}
            f:topologyKey: {}
            f:whenUnsatisfiable: {}
          k:{"topologyKey":"topology.kubernetes.io/zone","whenUnsatisfiable":"DoNotSchedule"}:
            .: {}
            f:labelSelector: {}
            f:maxSkew: {}
            f:topologyKey: {}
            f:whenUnsatisfiable: {}
        f:volumes:
          .: {}
          k:{"name":"bound-sa-token"}:
            .: {}
            f:name: {}
            f:projected:
              .: {}
              f:defaultMode: {}
              f:sources: {}
          k:{"name":"ca-trust-extracted"}:
            .: {}
            f:emptyDir: {}
            f:name: {}
          k:{"name":"installation-pull-secrets"}:
            .: {}
            f:name: {}
            f:secret:
              .: {}
              f:defaultMode: {}
              f:items: {}
              f:optional: {}
              f:secretName: {}
          k:{"name":"registry-certificates"}:
            .: {}
            f:configMap:
              .: {}
              f:defaultMode: {}
              f:name: {}
            f:name: {}
          k:{"name":"registry-tls"}:
            .: {}
            f:name: {}
            f:projected:
              .: {}
              f:defaultMode: {}
              f:sources: {}
          k:{"name":"trusted-ca"}:
            .: {}
            f:configMap:
              .: {}
              f:defaultMode: {}
              f:items: {}
              f:name: {}
              f:optional: {}
            f:name: {}
    manager: kube-controller-manager
    operation: Update
    time: "2024-06-11T11:22:15Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          .: {}
          k:{"type":"PodScheduled"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
    manager: kube-scheduler
    operation: Update
    subresource: status
    time: "2024-06-11T11:22:37Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:k8s.ovn.org/pod-networks: {}
    manager: ci-op-9xx71rvq-1e28e-w667k-worker-centralus3-hgn49
    operation: Update
    subresource: status
    time: "2024-06-11T11:22:46Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:k8s.v1.cni.cncf.io/network-status: {}
    manager: multus-daemon
    operation: Update
    subresource: status
    time: "2024-06-11T11:22:46Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"PodReadyToStartContainers"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:hostIPs: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.129.2.18"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    subresource: status
    time: "2024-06-11T11:23:06Z"
  name: image-registry-ccb445df9-r7bcf
  namespace: openshift-image-registry
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: image-registry-ccb445df9
    uid: 167ae3d5-290d-41ff-952a-a166f9ad54ae
  resourceVersion: "35777"
  uid: db21b730-2adf-48dd-863b-712849a5cc25
spec:
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchLabels:
            docker-registry: default
        namespaces:
        - openshift-image-registry
        topologyKey: kubernetes.io/hostname
  containers:
  - command:
    - /bin/sh
    - -c
    - mkdir -p /etc/pki/ca-trust/extracted/edk2 /etc/pki/ca-trust/extracted/java /etc/pki/ca-trust/extracted/openssl
      /etc/pki/ca-trust/extracted/pem && update-ca-trust extract && exec /usr/bin/dockerregistry
    env:
    - name: REGISTRY_STORAGE_AZURE_ACCOUNTKEY
      valueFrom:
        secretKeyRef:
          key: REGISTRY_STORAGE_AZURE_ACCOUNTKEY
          name: image-registry-private-configuration
    - name: REGISTRY_STORAGE
      value: azure
    - name: REGISTRY_STORAGE_AZURE_CONTAINER
      value: ci-op-9xx71rvq-1e28e-w667k-image-registry-ksyntejlblcyvspseefl
    - name: REGISTRY_STORAGE_AZURE_ACCOUNTNAME
      value: imageregistryciop9xj47x2
    - name: REGISTRY_STORAGE_AZURE_REALM
      value: core.windows.net
    - name: REGISTRY_HTTP_ADDR
      value: :5000
    - name: REGISTRY_HTTP_NET
      value: tcp
    - name: REGISTRY_HTTP_SECRET
      value: 83147546c7aba6876a710aaa7a5ccc8616e9b967b2d8ea05b1fa08f67af45147047bc1b9a1ec3e58ed22ace20c85da953abe35249959d9b62c5d3c3ad93d9c7f
    - name: REGISTRY_LOG_LEVEL
      value: info
    - name: REGISTRY_OPENSHIFT_QUOTA_ENABLED
      value: "true"
    - name: REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR
      value: inmemory
    - name: REGISTRY_STORAGE_DELETE_ENABLED
      value: "true"
    - name: REGISTRY_HEALTH_STORAGEDRIVER_ENABLED
      value: "true"
    - name: REGISTRY_HEALTH_STORAGEDRIVER_INTERVAL
      value: 10s
    - name: REGISTRY_HEALTH_STORAGEDRIVER_THRESHOLD
      value: "1"
    - name: REGISTRY_OPENSHIFT_METRICS_ENABLED
      value: "true"
    - name: REGISTRY_OPENSHIFT_SERVER_ADDR
      value: image-registry.openshift-image-registry.svc:5000
    - name: REGISTRY_HTTP_TLS_CERTIFICATE
      value: /etc/secrets/tls.crt
    - name: REGISTRY_HTTP_TLS_KEY
      value: /etc/secrets/tls.key
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
    imagePullPolicy: IfNotPresent
    lifecycle:
      preStop:
        exec:
          command:
          - sleep
          - "25"
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 5000
        scheme: HTTPS
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: registry
    ports:
    - containerPort: 5000
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 5000
        scheme: HTTPS
      initialDelaySeconds: 15
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000300000
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/secrets
      name: registry-tls
    - mountPath: /etc/pki/ca-trust/extracted
      name: ca-trust-extracted
    - mountPath: /etc/pki/ca-trust/source/anchors
      name: registry-certificates
    - mountPath: /usr/share/pki/ca-trust-source
      name: trusted-ca
    - mountPath: /var/lib/kubelet/
      name: installation-pull-secrets
    - mountPath: /var/run/secrets/openshift/serviceaccount
      name: bound-sa-token
      readOnly: true
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-lvb5s
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  imagePullSecrets:
  - name: registry-dockercfg-t8b8m
  nodeName: ci-op-9xx71rvq-1e28e-w667k-worker-centralus3-hgn49
  nodeSelector:
    kubernetes.io/os: linux
  preemptionPolicy: PreemptLowerPriority
  priority: 2000000000
  priorityClassName: system-cluster-critical
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext:
    fsGroup: 1000300000
    fsGroupChangePolicy: OnRootMismatch
    seLinuxOptions:
      level: s0:c17,c14
    seccompProfile:
      type: RuntimeDefault
  serviceAccount: registry
  serviceAccountName: registry
  terminationGracePeriodSeconds: 55
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  - effect: NoSchedule
    key: node.kubernetes.io/memory-pressure
    operator: Exists
  topologySpreadConstraints:
  - labelSelector:
      matchLabels:
        docker-registry: default
    maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule
  - labelSelector:
      matchLabels:
        docker-registry: default
    maxSkew: 1
    topologyKey: node-role.kubernetes.io/worker
    whenUnsatisfiable: DoNotSchedule
  - labelSelector:
      matchLabels:
        docker-registry: default
    maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
  volumes:
  - name: registry-tls
    projected:
      defaultMode: 420
      sources:
      - secret:
          name: image-registry-tls
  - emptyDir: {}
    name: ca-trust-extracted
  - configMap:
      defaultMode: 420
      name: image-registry-certificates
    name: registry-certificates
  - configMap:
      defaultMode: 420
      items:
      - key: ca-bundle.crt
        path: anchors/ca-bundle.crt
      name: trusted-ca
      optional: true
    name: trusted-ca
  - name: installation-pull-secrets
    secret:
      defaultMode: 420
      items:
      - key: .dockerconfigjson
        path: config.json
      optional: true
      secretName: installation-pull-secrets
  - name: bound-sa-token
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          audience: openshift
          expirationSeconds: 3600
          path: token
  - name: kube-api-access-lvb5s
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
      - configMap:
          items:
          - key: service-ca.crt
            path: service-ca.crt
          name: openshift-service-ca.crt
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2024-06-11T11:22:47Z"
    status: "True"
    type: PodReadyToStartContainers
  - lastProbeTime: null
    lastTransitionTime: "2024-06-11T11:22:46Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2024-06-11T11:23:06Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2024-06-11T11:23:06Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2024-06-11T11:22:46Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: cri-o://34bea14efd3330ce669f2453ca289397b70276d6bf37c54bcbaf9185ac24dd93
    image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
    imageID: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:739be161a33def82332ba37b9a997041006b673f8379218be7b0ac2d58512d30
    lastState: {}
    name: registry
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2024-06-11T11:22:46Z"
  hostIP: 10.0.128.5
  hostIPs:
  - ip: 10.0.128.5
  phase: Running
  podIP: 10.129.2.18
  podIPs:
  - ip: 10.129.2.18
  qosClass: Burstable
  startTime: "2024-06-11T11:22:46Z"
