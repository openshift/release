#!/bin/sh

set -euo pipefail

# Creates a new release branch for FROM, then creates a new commit into master and
# tags it as TO, then pushes both to upstream.
#
# Usage: TO= FROM= ./branch [tag|reset|push]
#
# Argument:
# * <empty>: displays latest commit on the branch
# * tag:     creates the tags and branches locally
# * reset:   deletes the branches or tags to start over
# * push:    actually push the branches and tags

base=$( dirname "${BASH_SOURCE[0]}")
source "${base}/lib/constants.sh"

config="${base}/../cluster/ci/config/prow/config.yaml"

BRANCH=${BRANCH:-master}
REF=${REF:-${BRANCH}}

file="$( mktemp -t prowjobs )"

# TODO: force all repos to normalize to a standard branch strategy (monitoring team)
for repo in `python "${base}/lib/repos_with_job_labels.py" "${config}" "" "${BRANCH}" "artifacts" | sort`; do
  if [[ -n "${2-}" && "${2-}" != "${repo}" ]]; then
    continue
  fi

  ref="$( git ls-remote -t https://github.com/${repo}.git ${REF} | cut -f 1 -d $'\t' )"
  if [[ -z "${ref}" ]]; then
    ref="$( git ls-remote -h https://github.com/${repo}.git ${REF} | cut -f 1 -d $'\t' )"
    if [[ -z "${ref}" ]]; then
      echo "warning: No tag or branch ${REF} found, using ${REF} as-is" 2>&1
      ref="${REF}"
    fi
  fi

  echo "${BRANCH} @ ${ref} | ${repo}"
  if [[ -z "${1-}" ]]; then
    continue
  fi
  if ! jobs="$( python "${base}/lib/jobs_with_labels.py" "${config}" "${repo}" "${BRANCH}" "artifacts" )"; then
    echo "info: ${repo} has no jobs tagged for artifacts on branch ${BRANCH}" 2>&1
    continue
  fi

  for job in "${jobs}"; do
    if [[ "${1-}" == "create" ]]; then
      echo "---" >> ${file}
      mkpj -config-path "${config}" -job ${job} -base-ref ${REF} -base-sha ${ref} >> ${file}
    else
      echo "mkpj -config-path '${config}' -job ${job} -base-ref ${REF} -base-sha ${ref}"
    fi
  done
done

if [[ "${1-}" == "create" ]]; then
  echo "Definition in ${file}"
fi