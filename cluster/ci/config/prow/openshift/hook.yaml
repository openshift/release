# oc process -f hook.yaml -p HMAC_TOKEN=$(cat hmac-token | base64) -p OAUTH_TOKEN=$(cat oauth-token | base64) | oc create -f -
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: hook-prow
  annotations:
    "openshift.io/display-name": hook-prow
  description: |
    hook manifests for prow
parameters:
- description: The namespace to get the image from.
  name: IMAGE_NAMESPACE
  value: ci
- description: The namespace to instantiate hook under.
  name: NAMESPACE
  value: ci
- description: The name of the component.
  name: NAME
  value: hook
- name: HMAC_TOKEN
  displayName: HMAC token
  description: hmac token used for decoding webhook content
  value: ""
  required: true
- name: OAUTH_TOKEN
  displayName: Oauth token
  description: Oauth token used for munging pull requests
  value: ""
  required: true
objects:
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    path: /hook
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: "${NAME}"
      namespace: "${NAMESPACE}"
- apiVersion: v1
  kind: Service
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    selector:
      app: prow
      component: "${NAME}"
    ports:
    - port: 8888
    type: NodePort
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
    labels:
      app: prow
      component: "${NAME}"
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    template:
      metadata:
        labels:
          app: prow
          component: "${NAME}"
      spec:
        serviceAccountName: "${NAME}"
        containers:
        - name: "${NAME}"
          image: "${NAME}"
          args:
          - --dry-run=false
          ports:
            - name: http
              containerPort: 8888
          volumeMounts:
          - name: hmac
            mountPath: /etc/webhook
            readOnly: true
          - name: oauth
            mountPath: /etc/github
            readOnly: true
          - name: config
            mountPath: /etc/config
            readOnly: true
          - name: plugins
            mountPath: /etc/plugins
            readOnly: true
        volumes:
        - name: hmac
          secret:
            secretName: hmac-token
        - name: oauth
          secret:
            secretName: oauth-token
        - name: config
          configMap:
            name: config
        - name: plugins
          configMap:
            name: plugins
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - "${NAME}"
        from:
          kind: ImageStreamTag
          name: "${NAME}:latest"
          namespace: "${IMAGE_NAMESPACE}"
      type: ImageChange
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
- apiVersion: v1
  data:
    hmac: "${HMAC_TOKEN}"
  kind: Secret
  metadata:
    name: hmac-token
    namespace: "${NAMESPACE}"
  type: Opaque
- apiVersion: v1
  data:
    oauth: "${OAUTH_TOKEN}"
    github-bot: b3BlbnNoaWZ0LWNpLXJvYm90Cg==
  kind: Secret
  metadata:
    name: oauth-token
    namespace: "${NAMESPACE}"
  type: Opaque
- kind: ClusterRole
  apiVersion: v1 # rbac.authorization.k8s.io/v1beta1
  metadata:
    name: "${NAME}"
  rules:
    - apiGroups:
        - "prow.k8s.io"
      resources:
        - prowjobs
      verbs:
        - create
- kind: ClusterRoleBinding
  apiVersion: v1 # rbac.authorization.k8s.io/v1beta1
  metadata:
    name: "${NAME}"
  roleRef:
    apiGroup: "" # rbac.authorization.k8s.io
    kind: ClusterRole
    name: "${NAME}"
  subjects:
  - kind: ServiceAccount
    name: "${NAME}"
    namespace: "${NAMESPACE}"