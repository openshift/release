# Needs the jenkins-token secret for authenticating with the jenkins-proxy.
apiVersion: template.openshift.io/v1
kind: Template
parameters:
- description: The namespace to get the image from.
  name: IMAGE_NAMESPACE
  value: ci
- description: The namespace to instantiate deck under.
  name: NAMESPACE
  value: ci
- description: The name of the component.
  name: NAME
  value: deck
objects:
- apiVersion: v1
  kind: Route
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: deck
      namespace: "${NAMESPACE}"
- apiVersion: v1
  kind: Service
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
  spec:
    selector:
      app: prow
      component: "${NAME}"
    ports:
    - port: 80
      targetPort: 8080
    type: NodePort
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: "${NAME}"
    namespace: "${NAMESPACE}"
    labels:
      app: prow
      component: "${NAME}"
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    template:
      metadata:
        labels:
          app: prow
          component: "${NAME}"
      spec:
        serviceAccountName: "${NAME}"
        containers:
        - name: "${NAME}"
          image: "${NAME}"
          args:
          - --jenkins-url=http://jenkins-proxy
          - --jenkins-token-file=/etc/jenkins/jenkins
          - --jenkins-user=openshift-ci-robot
          ports:
            - name: http
              containerPort: 8080
          volumeMounts:
          - mountPath: /etc/jenkins
            name: jenkins
            readOnly: true
          - name: config
            mountPath: /etc/config
            readOnly: true
        volumes:
        - name: jenkins
          secret:
            defaultMode: 420
            secretName: jenkins-token
        - name: config
          configMap:
            name: config
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - "${NAME}"
        from:
          kind: ImageStreamTag
          name: "${NAME}:latest"
          namespace: "${IMAGE_NAMESPACE}"
      type: ImageChange
