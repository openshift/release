apiVersion: v1
kind: Template
labels:
  template: build-images
parameters:
- description: Name of the build to associate with the source image and artifacts
  displayName: Build Name
  name: BUILD_NAME
  required: true
- description: The name of the push secret for the builder service account
  displayName: Push Secret
  name: IMAGE_SECRET_NAME
  required: true
- description: The number of the Jenkins job that launched this build
  displayName: Build Number
  name: BUILD_NUMBER
  value: "1"
- name: PULL_NUMBER
  value: "-none"
- name: RUN_ID
  value: "run-id"
  required: true
- name: JOB_ID
  value: "none"
objects:
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "origin-base-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-base"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "base"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/base"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        dockerfilePath: Dockerfile.centos7
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:repo-base"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "cluster-capacity-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-cluster-capacity"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "cluster-capacity"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/cluster-capacity"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin-base"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "service-catalog-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-service-catalog"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "service-catalog"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/service-catalog"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin-base"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "origin-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "origin"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/origin"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        dockerfilePath: Dockerfile.centos7
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin-base"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "haproxy-router-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-haproxy-router"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "haproxy"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/router/haproxy"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "keepalived-ipfailover-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-keepalived-ipfailover"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "keepalived"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/ipfailover/keepalived"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "docker-registry-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-docker-registry"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "dockerregistry"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/dockerregistry"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin-base"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "egress-router-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-egress-router"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "router"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/egress/router"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin-base"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "egress-http-proxy-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-egress-http-proxy"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "http-proxy"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/egress/http-proxy"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin-base"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "federation-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-federation"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "federation"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:rpms"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/federation"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin-base"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "gitserver-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-gitserver"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "gitserver"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:rpms"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/examples/gitserver"
        - destinationDir: "gitserver/bin"
          sourcePath: "/go/src/github.com/openshift/origin/_output/local/bin/linux/amd64/gitserver"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "deployer-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-deployer"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "deployer"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/deployer"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "recycler-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-recycler"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "recycler"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/recycler"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "docker-builder-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-docker-builder"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "docker-builder"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/builder/docker/docker-builder"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "sti-builder-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-sti-builder"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "sti-builder"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/builder/docker/sti-builder"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "f5-router-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:origin-f5-router"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "f5"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/router/f5"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "node-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:node"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "node"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/node"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "openvswitch-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:openvswitch"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "openvswitch"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:binaries"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/images/openvswitch"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:node"
      type: Docker
- apiVersion: v1
  kind: Build
  metadata:
    labels:
      build: "${BUILD_NAME}"
      runid: "${RUN_ID}"
      job-id: "${JOB_ID}"
    generateName: "hello-openshift-${BUILD_NUMBER}-${BUILD_NAME}-"
  spec:
    output:
      pushSecret:
        name: "${IMAGE_SECRET_NAME}"
      to:
        kind: ImageStreamTag
        name: "${BUILD_NAME}:hello-openshift"
    runPolicy: Serial
    serviceAccount: builder
    source:
      contextDir: "hello-openshift"
      images:
      - from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:rpms"
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        paths:
        - destinationDir: "."
          sourcePath: "/go/src/github.com/openshift/origin/examples/hello-openshift"
        - destinationDir: "hello-openshift/bin"
          sourcePath: "/go/src/github.com/openshift/origin/_output/local/bin/linux/amd64/hello-openshift"
      type: Image
    strategy:
      dockerStrategy:
        pullSecret:
          name: "${IMAGE_SECRET_NAME}"
        from:
          kind: ImageStreamTag
          name: "${BUILD_NAME}:origin"
      type: Docker
