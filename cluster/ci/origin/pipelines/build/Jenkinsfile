#!/usr/bin/env groovy

@Library('github.com/openshift/release-library@master')

def templateBase = "cluster/ci/origin/config"

pipeline {
  agent { label "release-ci.jenkins-slave" }

  parameters {
    string(defaultValue: "${env.ORIGIN_TARGET_BRANCH}", name: "ORIGIN_TARGET_BRANCH", description: "The branch in the origin repository to test against.")
    string(defaultValue: "${env.PULL_REFS}", name: "PULL_REFS", description: "Used by prow. If this is not a pull request, it should at least contain the branch:hash of the HEAD being tested.")
    string(defaultValue: "${env.BUILD_ID}", name: "buildId", description: "The ID that prow sets on a Jenkins job in order to correlate it with a ProwJob")
  }

  stages {
    stage ("Configure Variables") {
      steps {
        script {
          this._buildName = buildName(this)
          this._pushSecret = dockerCfgSecret(this, "builder")
        }
        echo "Build name is ${this._buildName}"
      }
    }
    stage ("Create ImageStream") {
      when {
        not { expression { return imageStreamExists(this, "${this._buildName}") } }
      }
      steps {
        echo "Creating image stream ${this._buildName}"
        applyTemplate(this, "${templateBase}/output-imagestream.yaml", 
          "BUILD_NAME=${this._buildName}")
      }
    }
    stage("Clone") {
      when {
        not { expression { return imageStreamTagExists(this, "${this._buildName}", "src") } }
      }
      steps {
        runAndWaitForBuild(this, "${this._buildName}-clone-source", {
          applyTemplate(this, "${templateBase}/clone-source.yaml",
            "RELEASE_SRC_REF=${env.RELEASE_SRC_REF ?: 'master'}",
            "RELEASE_SRC_URL=${env.RELEASE_SRC_URL ?: 'https://github.com/openshift/release.git'}", 
            "PUSH_SECRET_NAME=${this._pushSecret}",
            "BUILD_NAME=${this._buildName}",
            "PULL_REFS=${params.PULL_REFS}")
        })
      }
    }
    stage("Compile") {
      when {
        not { expression { return imageStreamTagExists(this, "${this._buildName}", "binaries") } }
      }
      steps {
        runAndWaitForBuild(this, "${this._buildName}-compile", {
          applyTemplate(this, "${templateBase}/compile.yaml",
            "RELEASE_SRC_REF=${env.RELEASE_SRC_REF ?: 'master'}",
            "RELEASE_SRC_URL=${env.RELEASE_SRC_URL ?: 'https://github.com/openshift/release.git'}", 
            "PUSH_SECRET_NAME=${this._pushSecret}",
            "BUILD_NAME=${this._buildName}")
        })
      }
    }
  }
}
