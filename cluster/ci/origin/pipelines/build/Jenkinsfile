#!/usr/bin/env groovy

def library_url = "${env.RELEASE_LIBRARY_URL ?: (params.RELEASE_LIBRARY_URL ?: 'github.com/openshift/release-library') }"
def library_ref = "${env.RELEASE_LIBRARY_REF ?: (params.RELEASE_LIBRARY_REF ?: 'master') }"

library "${library_url}@${library_ref}"

def templateBase = "cluster/ci/origin/config"

pipeline {
  agent any

  parameters {
    string(defaultValue: "${env.BUILD_ID}", name: "buildId", description: "The ID that prow sets on a Jenkins job in order to correlate it with a ProwJob")
    string(name: "REPO_OWNER", defaultValue:"${env.REPO_OWNER ?: 'openshift'}")
    string(name: "REPO_NAME", defaultValue:"${env.REPO_NAME ?: 'origin'}")
    string(name: "PULL_BASE_REF", defaultValue:"${env.PULL_BASE_REF ?: ''}")
    string(name: "PULL_BASE_SHA", defaultValue:"${env.PULL_BASE_SHA ?: ''}")
    string(name: "PULL_REFS", defaultValue:"${env.PULL_REFS ?: 'master'}")
    string(name: "PULL_NUMBER", defaultValue:"${env.PULL_NUMBER ?: ''}")
    string(name: "PULL_PULL_SHA", defaultValue:"${env.PULL_PULL_SHA ?: ''}")
    string(name: "RELEASE_LIBRARY_URL", defaultValue: "${library_url}")
    string(name: "RELEASE_LIBRARY_REF", defaultValue: "${library_ref}")
    string(name: "RELEASE_SRC_URL", defaultValue: "${env.RELEASE_SRC_URL ?: 'https://github.com/openshift/release.git'}")
    string(name: "RELEASE_SRC_REF", defaultValue: "${env.RELEASE_SRC_REF ?: 'master'}")
    string(name: "PROVISIONER_TOKEN", defaultValue: "")
    booleanParam(name: "CLEAN_BUILD", defaultValue: false)
  }

  stages {
    stage ("Configure Variables") {
      steps {
        script {
          this._buildName = buildName(this)
          this._pushSecret = dockerCfgSecret(this, "builder")
          this._jobId = "build-${this._buildName}-${env.BUILD_NUMBER}"
          this._runId = "image-build-${this._buildName}-${this.BUILD_NUMBER}"
        }
        echo "Build name is ${this._buildName}"
      }
    }
    stage ("Create ImageStream") {
      steps {
        ensureImageStream(this, "${this._buildName}")
      }
    }
    stage("Compile") {
      when {
        not { expression { return params.CLEAN_BUILD || imageStreamTagExists(this, "${this._buildName}", "binaries") } }
      }
      steps {
        script {
          runAndWaitForBuild(this, "", {
            return createTemplate(this, "${templateBase}/compile.yaml",
              "PUSH_SECRET_NAME=${this._pushSecret}",
              "PULL_NUMBER=${params.PULL_NUMBER}",
              "PULL_REFS=${params.PULL_REFS}",
              "BUILD_NUMBER=${env.BUILD_NUMBER}",
              "BUILD_NAME=${this._buildName}",
              "REPO_OWNER=${params.REPO_OWNER}",
              "REPO_NAME=${params.REPO_NAME}",
              "JOB_ID=${this._jobId}")
          })
        }
      }
    }
    stage("Build RPMs") {
      when {
        not { expression { return imageStreamTagExists(this, "${this._buildName}", "rpms") } }
      }
      steps {
        script {
          if (params.CLEAN_BUILD) {
            runAndWaitForBuild(this, "", {
              return createTemplate(this, "${templateBase}/build-clean-rpms.yaml",
                "IMAGE_SECRET_NAME=${this._pushSecret}",
                "BASE_IMAGE_REF=build-base:latest",
                "PULL_NUMBER=${params.PULL_NUMBER}",
                "PULL_REFS=${params.PULL_REFS}",
                "BUILD_NUMBER=${env.BUILD_NUMBER}",
                "BUILD_NAME=${this._buildName}",
                "REPO_OWNER=${params.REPO_OWNER}",
                "REPO_NAME=${params.REPO_NAME}",
                "JOB_ID=${this._jobId}")
            })
          } else {
            runAndWaitForBuild(this, "", {
              return createTemplate(this, "${templateBase}/build-rpms.yaml",
                "IMAGE_SECRET_NAME=${this._pushSecret}",
                "BASE_IMAGE_REF=${this._buildName}:binaries",
                "PULL_NUMBER=${params.PULL_NUMBER}",
                "BUILD_NUMBER=${env.BUILD_NUMBER}",
                "BUILD_NAME=${this._buildName}",
                "JOB_ID=${this._jobId}")
            })
          }
        }
      }
    }
    stage("Serve RPMs") {
      when {
        not { expression { return serviceExists(this, "rpm-repo-${this._buildName}") } }
      }
      steps {
        script {
          def imageStreamRepo
          openshift.withCluster() {
            imageStreamRepo = openshift.selector("is/${this._buildName}").object().status.dockerImageRepository
          }
          applyTemplate(this, "${templateBase}/serve-rpms.yaml",
            "RPM_IMAGE_REF=${imageStreamRepo}:rpms",
            "BUILD_NAME=${this._buildName}")
          waitForDeployment(this, "rpm-repo-${this._buildName}")
        }
      }
    }
    stage("Build Repository Base") {
      when {
        not { expression { return imageStreamTagExists(this, "${this._buildName}", "repo-base") } }
      }
      steps {
        script {
          def routeHost
          openshift.withCluster() {
            routeHost = openshift.selector("route/rpm-repo-${this._buildName}").object().spec.host
          }
          runAndWaitForBuild(this, "", {
            return createTemplate(this, "${templateBase}/repo-base.yaml",
              "RELEASE_SRC_REF=${params.RELEASE_SRC_REF}",
              "RELEASE_SRC_URL=${params.RELEASE_SRC_URL}",
              "PUSH_SECRET_NAME=${this._pushSecret}",
              "PULL_NUMBER=${params.PULL_NUMBER}",
              "BUILD_NUMBER=${env.BUILD_NUMBER}",
              "BUILD_NAME=${this._buildName}",
              "RPM_REPO_URL=http://${routeHost}",
              "JOB_ID=${this._jobId}")
          })
        }
      }
    }
    stage("Build Images") {
      steps {
        createTemplate(this, "${templateBase}/build-images.yaml",
          "IMAGE_SECRET_NAME=${this._pushSecret}",
          "PULL_NUMBER=${params.PULL_NUMBER}",
          "RUN_ID=${this._runId}",
          "BUILD_NUMBER=${env.BUILD_NUMBER}",
          "BUILD_NAME=${this._buildName}",
          "JOB_ID=${this._jobId}")
        waitForBuilds(this, ["runid": "${this._runId}"], true)
      }
    }
    stage("Create Image Namespace") {
      when {
        not { expression { return projectExists(this, "images-${this._buildName}", "${params.PROVISIONER_TOKEN}") } }
      }
      steps {
        script {
          def currentProject = "${env.PROJECT_NAME}"
          def setPermissions = {
            openshift.withProject("images-${this._buildName}") {
              openshift.raw("policy", "add-role-to-group", "admin", "system:serviceaccounts:${currentProject}")
              openshift.raw("policy", "add-role-to-user", "view", "system:anonymous")
              openshift.raw("policy", "add-role-to-user", "system:image-puller", "system:anonymous")
            }
          }
          openshift.withCluster() {
            if ("${params.PROVISIONER_TOKEN}".length() > 0) {
              openshift.doAs("${params.PROVISIONER_TOKEN}") {
                openshift.newProject("images-${this._buildName}")
                setPermissions()
              }
            } else {
              openshift.newProject("images-${this._buildName}")
              setPermissions()
            }
          }
        }
      }
    }
    stage("Tag Images") {
      steps {
        script {
          def currentProject = "${env.PROJECT_NAME}"
          openshift.withCluster() {
            def tags = openshift.selector("is", "${this._buildName}").object().status.tags
            for (i = 0; i < tags.size(); i++) {
              def tag = tags[i].tag
              openshift.withProject("images-${this._buildName}") {
                openshift.tag("${currentProject}/${this._buildName}:${tag}", "${tag}:ci")
              }
            }
            // Tag registry separately -- use latest from docker.io for now, but will 
            // need to use last good known image in the future.
            openshift.withProject("images-${this._buildName}") {
              openshift.tag("--source=docker", "openshift/origin-docker-registry:latest", "origin-docker-registry:ci")
            }
            openshift.withProject("images-${this._buildName}") {
              def originImageStream = openshift.selector("is", "origin").object()
              if (originImageStream.status.publicDockerImageRepository) {
                this._imageBase = originImageStream.status.publicDockerImageRepository
              } else {
                this._imageBase = originImageStream.status.dockerImageRepository
              }
            }
          }
        }
      }
    }
    stage("Create Build Result ConfigMap") {
      steps {
        script {
          openshift.withCluster() {
            def configmap = openshift.selector("configmap", "${this._buildName}")
            if (configmap.exists()) {
              configmap.delete()
            }
            routeHost = openshift.selector("route/rpm-repo-${this._buildName}").object().spec.host
            openshift.raw("create", "configmap", "${this._buildName}",
              "--from-literal", "image-base=${this._imageBase}",
              "--from-literal", "rpm-repo=http://${routeHost}",
              "--from-literal", "namespace=images-${this._buildName}")
            openshift.raw("label", "configmap", "${this._buildName}", "created-by-ci=true")
          }
        }
      }
    }
  }
  post {
    always {
      cleanupArtifacts(this, ["job-id": "${this._jobId}"])
      deleteWorkspace(this)
    }
  }
}
