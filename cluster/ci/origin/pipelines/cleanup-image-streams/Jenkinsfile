#!/usr/bin/env groovy
pipeline {
  agent any
  stages {
    stage("Cleanup ImageStreams") {
      steps {
        script {
          openshift.withCluster() {
            def cleanupList = []
            def cutOffSecsStr = sh(script: "date --date '2 days ago' +%s", returnStdout: true)
            def cutOffSecs = cutOffSecsStr as Integer
            def imageStreams = openshift.selector("is")
            imageStreams.withEach() {
              def imageStream = it.object()
              // Only process image streams that are part of a build
              if (imageStream.metadata.labels != null && imageStream.metadata.labels["created-by-ci"] == "true") {
                def creationTimestamp = imageStream.metadata.creationTimestamp
                def imageStreamCreationSecsStr = sh(script: "date --date=${creationTimestamp} +%s", returnStdout: true)
                def imageStreamCreationSecs = imageStreamCreationSecsStr as Integer
                if (imageStreamCreationSecs < cutOffSecs) {
                  echo "ImageStream ${imageStream.metadata.name} will be cleaned up"
                  cleanupList.add(it.name())
                }
              }
            }
            for (isName in cleanupList) {
              echo "Deleting ${isName}"
              openshift.selector(isName).delete()
            }
          }
        }
      }
    }
  }
}
