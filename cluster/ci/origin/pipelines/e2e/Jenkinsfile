#!/usr/bin/env groovy

library "github.com/openshift/release-library@master"

pipeline {
  agent any

  parameters {
    string(name: "BUILD_ID")
    string(name: "REPO_OWNER")
    string(name: "REPO_NAME")
    string(name: "PULL_REFS")
    string(name: "PULL_BASE_REF")
    string(name: "PULL_BASE_SHA")
    string(name: "PULL_NUMBER")
    string(name: "PULL_PULL_SHA")
    string(name: "PROVISIONER_TOKEN")
  }

  stages {
    stage ("Configure Variables") {
      steps {
        script {
          def jobName = "e2e"
          this._buildName = buildName(this)
          this._jobId = "${jobName}-${this._buildName}-${env.BUILD_NUMBER}"
        }
      }
    }
    stage ("Ensure logging components exist") {
      steps {
        ensureLoggingComponents(this)
      }
    }
    stage("Build origin") {
      steps {
        script {
          def jobName = "${env.PROJECT_NAME ?: 'origin-ci'}-build-origin"
          def buildParams = [
            [$class: "StringParameterValue", name: "BUILD_ID", value: params.BUILD_ID],
            [$class: "StringParameterValue", name: "REPO_OWNER", value: params.REPO_OWNER],
            [$class: "StringParameterValue", name: "REPO_NAME", value: params.REPO_NAME],
            [$class: "StringParameterValue", name: "PULL_BASE_REF", value: params.PULL_BASE_REF],
            [$class: "StringParameterValue", name: "PULL_BASE_SHA", value: params.PULL_BASE_SHA],
            [$class: "StringParameterValue", name: "PULL_REFS", value: params.PULL_REFS],
            [$class: "StringParameterValue", name: "PULL_NUMBER", value: params.PULL_NUMBER],
            [$class: "StringParameterValue", name: "PULL_PULL_SHA", value: params.PULL_PULL_SHA],
            [$class: "StringParameterValue", name: "PROVISIONER_TOKEN", value: params.PROVISIONER_TOKEN]
          ]
          build job: jobName, parameters: buildParams, wait: true
        }
      }
    }
    stage("Deploy Cluster") {
      steps {
        script {
          def jobName = "${env.PROJECT_NAME ?: 'origin-ci'}-deploy-origin"
          def buildParams = [
            [$class: "StringParameterValue", name: "BUILD_ID", value: params.BUILD_ID],
            [$class: "StringParameterValue", name: "REPO_OWNER", value: params.REPO_OWNER],
            [$class: "StringParameterValue", name: "REPO_NAME", value: params.REPO_NAME],
            [$class: "StringParameterValue", name: "PULL_BASE_REF", value: params.PULL_BASE_REF],
            [$class: "StringParameterValue", name: "PULL_BASE_SHA", value: params.PULL_BASE_SHA],
            [$class: "StringParameterValue", name: "PULL_REFS", value: params.PULL_REFS],
            [$class: "StringParameterValue", name: "PULL_NUMBER", value: params.PULL_NUMBER],
            [$class: "StringParameterValue", name: "PULL_PULL_SHA", value: params.PULL_PULL_SHA],
          ]
          build job: jobName, parameters: buildParams, wait: true
        }
      }
    }
    stage("Run e2e test") {
      steps {
        script {
          podTemplate(
            cloud: "openshift",
            label: "origin-e2e",
            containers: [
              containerTemplate(
                name: "origin-e2e", 
                image: "${this._buildName}:binaries", 
                ttyEnabled: true, 
                command: "cat",
                envVars: [
                  envVar(key: "KUBECONFIG", value: "/tmp/admin.kubeconfig"),
                  envVar(key: "SKIP_CLEANUP", value: "true"),
                  envVar(key: "TEST_ONLY", value: "true"),
                  envVar(key: "JUNIT_REPORT", value: "true"),
                  envVar(key: "OPENSHIFT_SKIP_BUILD", value: "true")
                ]
              )
            ],
            annotations: [
              podAnnotation(key: "alpha.image.policy.openshift.io/resolve-names", value: "*")
            ],
            volumes: [
              secretVolume (
                secretName: "${this._buildName}",
                mountPath: '/var/secrets/kubeconfig'
              )
            ]
          ) {
            node("origin-e2e") {
              container("origin-e2e") {
                sh "cp /var/secrets/kubeconfig/admin.kubeconfig /tmp/admin.kubeconfig"
                sh "cd /go/src/github.com/openshift/origin && make test-extended SUITE=conformance | tee /go/src/github.com/openshift/origin/_output/scripts/build_log.txt"
                sh "mkdir -p artifacts && cp -R /go/src/github.com/openshift/origin/_output/scripts/* artifacts"
                dir("artifacts") {
                  stash name: "artifacts"
                }
              }
            }
	  }
	}
      }
    }
    stage("Save artifacts") {
      steps {
        sh "mkdir -p artifacts"
        dir("artifacts") {
          unstash name: "artifacts"
        }
      }
    }
  }
  post {
    always {
      script {
        def workingDir = pwd()
        def artifactDir = "${workingDir}/artifacts"
        try {
          uploadArtifacts(this, artifactDir)
        } catch (e) {
          echo "error uploading artifacts: ${e}"
        }
        deleteWorkspace(this)
      }
    }
  }
}

