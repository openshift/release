#!/usr/bin/env groovy

def library_url = "${env.RELEASE_LIBRARY_URL}"
def library_ref = "${env.RELEASE_LIBRARY_REF}"

library "${library_url}@${library_ref}"

def templateBase = "cluster/ci/origin/config"

pipeline {
  agent { label "release-ci.jenkins-slave" }

  parameters {
    string(defaultValue: "${env.ORIGIN_TARGET_BRANCH}", name: "ORIGIN_TARGET_BRANCH", description: "The branch in the origin repository to test against.")
    string(defaultValue: "${env.PULL_REFS}", name: "PULL_REFS", description: "Used by prow. If this is not a pull request, it should at least contain the branch:hash of the HEAD being tested.")
    string(defaultValue: "${env.BUILD_ID}", name: "buildId", description: "The ID that prow sets on a Jenkins job in order to correlate it with a ProwJob")
    string(defaultValue: "${env.ORIGIN_URL}", name: "ORIGIN_URL", description: "The URL of the Origin repository to use")
  }

  stages {
    stage ("Configure Variables") {
      steps {
        script {
          this._buildName = buildName(this)
        }
        echo "Build name is ${this._buildName}"
      }
    }
    stage("Wait for binaries") {
      steps {
        waitForTag(this, this._buildName, "binaries", 7200)
      }
    }
    stage("Unit Test") {
      steps {
        ensureLoggingComponents(this)
        script {
          def binaryImageRef = imageStreamTagRef(this, this._buildName, "binaries")
          def pullSecretRef = dockerCfgSecret(this, "default")
          def unitRunId = "${this._buildName}-ut-${currentBuild.number}"

          createTemplate(this, "${templateBase}/unit-tests.yaml", 
            "BUILD_NAME=${_buildName}",
            "RUN_ID=${unitRunId}",
            "BINARY_IMAGE_REF=${binaryImageRef}",
            "PULL_SECRET_NAME=${pullSecretRef}",
            "JOB_NAME=${env.JOB_NAME}",
            "BUILD_NUMBER=${env.BUILD_NUMBER}",
            "REPO_OWNER=${env.REPO_OWNER ?: 'openshift'}",
            "REPO_NAME=${env.REPO_NAME ?: 'origin'}"
          )

          waitForPods(this, ["run": "${unitRunId}"], 7200)
        }
      }
    }
  }
}
