#!/usr/bin/env groovy

def library_url = "${env.RELEASE_LIBRARY_URL ?: (params.RELEASE_LIBRARY_URL ?: 'github.com/openshift/release-library') }"
def library_ref = "${env.RELEASE_LIBRARY_REF ?: (params.RELEASE_LIBRARY_REF ?: 'master') }"

library "${library_url}@${library_ref}"


pipeline {
  agent any

  parameters {
    string(defaultValue: "${env.BUILD_ID}", name: "buildId", description: "The ID that prow sets on a Jenkins job in order to correlate it with a ProwJob")
    string(name: "REPO_OWNER", defaultValue:"${env.REPO_OWNER ?: 'openshift'}")
    string(name: "REPO_NAME", defaultValue:"${env.REPO_NAME ?: 'origin'}")
    string(name: "PULL_BASE_REF", defaultValue:"${env.PULL_BASE_REF ?: ''}")
    string(name: "PULL_BASE_SHA", defaultValue:"${env.PULL_BASE_SHA ?: ''}")
    string(name: "PULL_REFS", defaultValue:"${env.PULL_REFS ?: 'master'}")
    string(name: "PULL_NUMBER", defaultValue:"${env.PULL_NUMBER ?: ''}")
    string(name: "PULL_PULL_SHA", defaultValue:"${env.PULL_PULL_SHA ?: ''}")
    string(name: "RELEASE_LIBRARY_URL", defaultValue: "${library_url}")
    string(name: "RELEASE_LIBRARY_REF", defaultValue: "${library_ref}")
    string(name: "RELEASE_SRC_URL", defaultValue: "${env.RELEASE_SRC_URL ?: 'https://github.com/openshift/release.git'}")
    string(name: "RELEASE_SRC_REF", defaultValue: "${env.RELEASE_SRC_REF ?: 'master'}")
  }

  stages {
    stage("Configure Variables") {
      steps {
        script {
          this._buildName = buildName(this)
        }
      }
    }
    stage("Extract Config Vars") {
      steps {
        script {
          openshift.withCluster() {
            def cm = openshift.selector("cm/${this._buildName}").object()
            this._imageBase = cm.data["image-base"]
            this._rpmRepo = cm.data["rpm-repo"]
          }
        }
      }
    }
    stage("Stash data directory") {
      steps {
        script {
          dir ("cluster/test-deploy/data") {
            stash "data-files"
          }
        }
      }
    }
    stage("Run Deployment") {
      steps {
        script {
          podTemplate(
            cloud: "openshift",
            label: "origin-gce",
            containers: [
              containerTemplate(name: "origin-gce", image: "openshift/origin-gce:latest", ttyEnabled: true, command: "cat")
            ],
            volumes: [
              secretVolume (
                secretName: 'gce-provisioner',
                mountPath: '/var/secrets/gce-provisioner'
              ),
              secretVolume (
                secretName: 'gce-ssh',
                mountPath: '/var/secrets/gce-ssh'
              )
            ]
          ) {
            node("origin-gce") {
              container("origin-gce") {
                sh "mkdir data-files"
                dir("data-files") {
                  unstash "data-files"
                  sh "cp * /usr/share/ansible/openshift-ansible-gce/playbooks/files"
                }
                sh "cp -L /var/secrets/gce-provisioner/*.json /var/secrets/gce-ssh/ssh* /usr/share/ansible/openshift-ansible-gce/playbooks/files"
                def instancePrefix = "${this._buildName}".take(25)
                def script = $/cd $${WORK} && HOME=/home/cloud-user \
$${WORK}/entrypoint.sh env INSTANCE_PREFIX=${instancePrefix} ansible-playbook -vvv \
-e 'oreg_url=${this._imageBase}-$${component}:ci' \
-e "openshift_test_repo=${this._rpmRepo}" playbooks/launch.yaml/$
                sh script
                sh "mkdir kubeconfig"
                dir("kubeconfig") {
                  sh "cp /tmp/admin.kubeconfig ."
                  stash "kubeconfig"
                }
              }
            }
	  }
	}
      }
    }
    stage("Save Kubeconfig") {
      steps {
        script {
          sh "mkdir kubeconfig"
          dir("kubeconfig") {
            unstash "kubeconfig"
            openshift.withCluster() {
              openshift.raw("create", "secret", "generic", "${this._buildName}", "--from-file", "admin.kubeconfig=./admin.kubeconfig")
              def cm = openshift.selector("cm/${this._buildName}").object()
              cm.data["kubeconfig"] = "${this._buildName}"
              openshift.apply(cm)
            }
          }
        }
      }
    }
  }
}
