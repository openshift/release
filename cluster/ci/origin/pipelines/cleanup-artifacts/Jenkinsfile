#!/usr/bin/env groovy
pipeline {
  agent any
  stages {
    stage("Cleanup Artifacts") {
      steps {
        script {
          openshift.withCluster() {
            def cleanupList = []
            def cutOffSecsStr = sh(script: "date --date '2 days ago' +%s", returnStdout: true)
            def cutOffSecs = cutOffSecsStr as Integer
  
            def addToCleanupList = { name, obj ->
              def creationTimestamp = obj.metadata.creationTimestamp
              def objCreationSecsStr = sh(script: "date --date=${creationTimestamp} +%s", returnStdout: true)
              def objCreationSecs = objCreationSecsStr as Integer
              if (objCreationSecs < cutOffSecs) {
                echo "Object ${obj.kind}/${obj.metadata.name} will be cleaned up"
                cleanupList.add(name)
              }
            }
            def configMaps = openshift.selector("cm", ["created-by-ci": "true"])
            configMaps.withEach() {
              addToCleanupList(it.name(), it.object())
            }
            def imageStreams = openshift.selector("is", ["created-by-ci": "true"])
            imageStreams.withEach() {
              addToCleanupList(it.name(), it.object())
            }
            for (name in cleanupList) {
              echo "Cleaning up ${name}"
              def jobName = "${env.PROJECT_NAME ?: 'origin-ci'}-cleanup"
              build job: jobName, parameters: ["NAME":"name"], wait: true
            }
          }
        }
      }
    }
  }
}
