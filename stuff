{"component":"ci-operator-configresolver","file":"/go/src/github.com/openshift/ci-tools/cmd/ci-operator-configresolver/main.go:206","func":"main.main","level":"fatal","msg":"Failed to get config agent: failed to laod config: loading config failed: failed to load ci-operator config (invalid configuration in file ci-operator/config/redhat-et/microshift/redhat-et-microshift-main.yaml: error converting YAML to JSON: yaml: unmarshal errors:\n  line 152: key \"grace_period\" already set in map\nvalue:\nbase_images:\n  base:\n    name: \"4.7\"\n    namespace: ocp\n    tag: base\n  ocp_builder_rhel-8-golang-1.15-openshift-4.7:\n    name: builder\n    namespace: ocp\n    tag: rhel-8-golang-1.15-openshift-4.7\nbinary_build_commands: make cross-build-linux-amd64 cross-build-linux-arm64\nbuild_root:\n  project_image:\n    dockerfile_literal: |\n      FROM registry.access.redhat.com/ubi8/go-toolset\n\n      USER root\n\n      ENV GOPATH=/go GOCACHE=/go/src/.cache GO111MODULE=on\n\n      RUN mkdir -p $GOCACHE \u0026\u0026 mkdir -p /root/.aws\n\n      WORKDIR $GOPATH/src/github.com/redhat-et/microshift\n\n      RUN yum install gpgme-devel glibc-static libassuan-devel -y\n    inputs:\n      ocp_builder_rhel-8-golang-1.15-openshift-4.7:\n        as:\n        - registry.access.redhat.com/ubi8/go-toolset\nimages:\n- dockerfile_literal: |\n    FROM base\n    ADD microshift /usr/bin/\n    ENTRYPOINT [\"/usr/bin/microshift\", \"run\"]\n  from: base\n  inputs:\n    bin:\n      paths:\n      - destination_dir: .\n        source_path: /go/src/github.com/redhat-et/microshift/_output/bin/linux_amd64/microshift\n  to: linux-amd64-4.7.0-0.microshift\n- dockerfile_literal: |\n    FROM base\n    ADD microshift /usr/bin/\n    ENTRYPOINT [\"/usr/bin/microshift\", \"run\"]\n  from: base\n  inputs:\n    bin:\n      paths:\n      - destination_dir: .\n        source_path: /go/src/github.com/redhat-et/microshift/_output/bin/linux_arm64/microshift\n  to: linux-arm64-4.7.0-0.microshift\n- dockerfile_literal: |\n    FROM registry.access.redhat.com/ubi8/ubi\n\n    WORKDIR /opt/\n    \n    ENV HOME=/root/\n\n    RUN dnf install jq python3 -y \u0026\u0026 python3 -m pip install awscli\n\n    RUN mkdir -p /root/.ssh ./microshift/linux_amd64 ./microshift/linux_arm64 /root/.subsciption-manager \u0026\u0026 \\\n        printf \"Host *.compute.amazon.com\\n\\tIdentityFile ~/.ssh/aws.pem\\n\\tUser ec2-user\\n\" \u003e ~/.ssh/config\n  from: base\n  inputs:\n    bin:\n      paths:\n      - destination_dir: ./microshift/linux_amd64/\n        source_path: /go/src/github.com/redhat-et/microshift/_output/bin/linux_amd64/microshift\n      - destination_dir: ./microshift/linux_arm64/\n        source_path: /go/src/github.com/redhat-et/microshift/_output/bin/linux_arm64/microshift\n  to: test-smoke-base\npromotion:\n  name: microshift\n  namespace: microshift\nresources:\n  '*':\n    limits:\n      memory: 4Gi\n    requests:\n      cpu: 100m\n      memory: 200Mi\ntests:\n- as: verify\n  commands: make verify\n  container:\n    from: src\n- as: test-unit\n  commands: make test-unit\n  container:\n    from: src\n- as: run-smoke-tests\n  steps:\n    env:\n      AWS_DEFAULT_REGION: us-east-2\n      AWS_LAUNCH_TEMPLATE_ID: lt-0c7afc666d88ec6be\n      AWS_SHARED_CREDENTIALS_FILE: /root/.aws/credentials\n    test:\n    - as: test-smoke-deploy-infra\n      grace_period: 120s\n      commands: |\n        #! /usr/bin/env bash\n        set -euo pipefail\n        INSTANCE_ID=''\n        clean_up(){ \n          aws ec2 terminate-instances --instance-ids $INSTANCE_ID\n          subscription-manager remove --all\n          subscription-manager unregister\n        }\n        trap clean_up EXIT\n        subscription-manager \\\n          --username $(cat /root/.subscription-manager/subscription-manager-user) \n          --password $(cat /root/.subscription-manager/subscription-manager-passwd)\n\n        dnf install openssh-clients -y\n        dnf clean --all\n\n        INSTANCE=\"$(aws ec2 run-instances --launch-template LaunchTemplateId=$AWS_LAUNCH_TEMPLATE_ID \\\n                    --tag-specifications=\"ResourceType=instance,\n                        Tags=[\n                          {Key=Name,Value=${JOB_NAME:=openshift-release-ci}},\n                          {Key=PULL_SHA,Value=${PULL_PULL_SHA:-' '}},\n                          {Key=NAMESPACE,Value=${NAMESPACE:-' '}},\n                          {Key=PROW_JOB_ID,Value=${PROW_JOB_ID:-' '}}]\")\" || exit 1\n        INSTANCE_ID=\"$(jq -r \".Instances[0].InstanceId\" \u003c\u003c\u003c $INSTANCE)\"\n\n\n        aws ec2 wait instance-running --instance-ids \"$INSTANCE_ID\"\n\n        INSTANCE=\"$(aws ec2 describe-instances --instance-ids \"$INSTANCE_ID\")\"\n        PUB_DNS=\"$(jq -r '.Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicDnsName' \u003c\u003c\u003c \"$INSTANCE\")\"\n\n        echo \"shelling into instance [$INSTANCE_ID]\"\n        ssh \"$PUB_DNS\" \"echo Hello, AWS!\"\n      credentials:\n      - mount_path: /root/.ssh/\n        name: microshift-aws-ssh-access-pem\n        namespace: test-credentials\n      - mount_path: /root/.aws/\n        name: microshift-aws-access-credentials\n        namespace: test-credentials\n      - mount_path: /root/.subscription-manager/\n        name: microshift-dependency-access-credentials\n        namespace: test-credentials\n      dependencies:\n      - env: TEST_SMOKE_BASE\n        name: pipeline:test-smoke-base\n      env:\n      - name: AWS_DEFAULT_REGION\n      - name: AWS_LAUNCH_TEMPLATE_ID\n      - name: AWS_SHARED_CREDENTIALS_FILE\n      from: test-smoke-base\n      grace_period: 2m0s\n      resources:\n        requests:\n          cpu: 100m\n          memory: 100Mi\nzz_generated_metadata:\n  branch: main\n  org: redhat-et\n  repo: microshift\n)","severity":"fatal","time":"2021-07-16T20:20:14Z"} 
