kind: Template
apiVersion: template.openshift.io/v1

parameters:
- name: JOB_NAME_SAFE
  required: true
- name: JOB_NAME_HASH
  required: true
- name: NAMESPACE
  required: true
- name: IMAGE_INSTALLER
  required: true
- name: IMAGE_TESTS
  required: true
- name: CLUSTER_TYPE
  required: true
- name: RELEASE_IMAGE_LATEST
  required: true
- name: BASE_DOMAIN
  value: llc.devcluster.openshift.com
  required: true

objects:
- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: edit
    namespace: ${NAMESPACE}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: edit
  subjects:
  - kind: ServiceAccount
    name: default
    namespace: ${NAMESPACE}
- kind: Pod
  apiVersion: v1
  metadata:
    name: ${JOB_NAME_SAFE}
    namespace: ${NAMESPACE}
    annotations:
      # we want to gather the teardown logs no matter what
      ci-operator.openshift.io/wait-for-container-artifacts: teardown
      ci-operator.openshift.io/save-container-logs: "true"
      ci-operator.openshift.io/container-sub-tests: "checkcluster,teardown,reinstall,test"
  spec:
    restartPolicy: Never
    activeDeadlineSeconds: 21600
    terminationGracePeriodSeconds: 900
    volumes:
    - name: artifacts
      emptyDir: {}
    - name: shared-tmp
      emptyDir: {}
    - name: ci-credentials
      secret:
        secretName: ci-credentials
    - name: cloud-credentials
      secret:
        secretName: ${CLUSTER_TYPE}-openshift-llc-account-credentials
    - name: cluster-credentials
      secret:
        secretName: endurance-cluster-credentials-${CLUSTER_TYPE}

    initContainers:
    - name: checkcluster
      image: ${IMAGE_TESTS}
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: artifacts
        mountPath: /tmp/artifacts
      - name: cluster-credentials
        mountPath: /tmp/cluster-credentials
      env:
      - name: KUBECONFIG
        value: /tmp/shared/auth/kubeconfig
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        
        # fetch the oc binary so we can talk to the cluster.  
        export PATH=$PATH:/tmp/shared/bin
        mkdir /tmp/shared/bin
        curl https://mirror.openshift.com/pub/openshift-v4/clients/oc/4.3/linux/oc.tar.gz | tar xvzf - -C /tmp/shared/bin/ oc
        chmod ug+x /tmp/shared/bin/oc

        # setup the persisted metadata.json and kubeconfig files that 
        # correspond to the endurance cluster so we can interact with it.
        # (endurance cluster credentials injected by ci-operator)
        mkdir -p /tmp/shared/auth
        mkdir -p /tmp/artifacts/installer
        
        # files may not exist if cluster is brand new
        set +e
        cp /tmp/cluster-credentials/metadata.json /tmp/artifacts/installer
        cp /tmp/cluster-credentials/kubeconfig /tmp/shared/auth
        cp /tmp/cluster-credentials/kubeadmin /tmp/shared/auth/kubeadmin-password

        # to force a teardown of the cluster, create a configmap with this name on the cluster
        oc get configmap/teardown -n openshift-config
        rc=$?
        if [ $rc -eq 0 ]; then
          echo "Cluster marked for teardown, tearing down and reinstalling"
          touch /tmp/shared/mustgather
          touch /tmp/shared/teardown
          exit 0
        fi

        # check if all the operators are reporting available. If anything
        # goes wrong or any operator is not reporting available, we will 
        # gather artifacts, tear down the endurance cluster, install a new one, 
        # and fail this job.
        echo "Fetching cluster operator status...."
        oc get clusteroperators &> /tmp/operators.out
        rc=$?
        cat /tmp/operators.out
        if [ ! $rc -eq 0 ]; then
          echo "Could not retrieve cluster operator objects, collecting must-gather and tearing down cluster"
          touch /tmp/shared/mustgather
          touch /tmp/shared/teardown
          exit 0
        fi

        awk '{print $3}' < /tmp/operators.out  | grep -v AVAILABLE | grep -v True
        rc=$?
        if [ ! $rc -eq 1 ]; then
          echo "Some operators are not available, collecting must-gather from cluster"
          touch /tmp/shared/mustgather
          exit 0
        fi          
       
        echo "Fetching node status...."
        oc get nodes &> /tmp/nodes.out
        rc=$?
        cat /tmp/nodes.out
        if [ ! $rc -eq 0 ]; then
          echo "Could not retrieve nodes, collecting must-gather and tearing down cluster"
          touch /tmp/shared/mustgather
          touch /tmp/shared/teardown
          exit 0
        fi

        grep NotReady /tmp/nodes.out
        rc=$?
        if [ $rc -eq 0 ]; then
          echo "Some operators are not available, collecting must-gather from cluster"
          touch /tmp/shared/mustgather
          exit 0
        fi          
        set -e

        echo "Cluster appears healthy"

    - name: teardown
      image: ${IMAGE_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: ci-credentials
        mountPath: /etc/openshift-installer
      - name: cloud-credentials
        mountPath: /etc/cloud-credentials
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: INSTANCE_PREFIX
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: TYPE
        value: ${CLUSTER_TYPE}
      - name: KUBECONFIG
        value: /tmp/shared/auth/kubeconfig
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -eo pipefail

        export PATH=$PATH:/tmp/shared/bin

        if [[ ! -f /tmp/shared/teardown && ! -f /tmp/shared/mustgather ]];then
          echo "Long lived cluster appears healthy, taking no action"
          exit 0
        fi


        function queue() {
          local TARGET="${1}"
          shift
          local LIVE="$(jobs | wc -l)"
          while [[ "${LIVE}" -ge 45 ]]; do
            sleep 1
            LIVE="$(jobs | wc -l)"
          done
          echo "${@}"
          if [[ -n "${FILTER}" ]]; then
            "${@}" | "${FILTER}" >"${TARGET}" &
          else
            "${@}" >"${TARGET}" &
          fi
        }

        function teardown() {
          set +e

          echo "Gathering artifacts ..."
          mkdir -p /tmp/artifacts/pods /tmp/artifacts/nodes /tmp/artifacts/metrics /tmp/artifacts/bootstrap /tmp/artifacts/network

          oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o jsonpath --template '{range .items[*]}{.metadata.name}{"\n"}{end}' > /tmp/nodes
          oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces --template '{{ range .items }}{{ $name := .metadata.name }}{{ $ns := .metadata.namespace }}{{ range .spec.containers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ "\n" }}{{ end }}{{ range .spec.initContainers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ "\n" }}{{ end }}{{ end }}' > /tmp/containers
          oc --insecure-skip-tls-verify --request-timeout=5s get pods -l openshift.io/component=api --all-namespaces --template '{{ range .items }}-n {{ .metadata.namespace }} {{ .metadata.name }}{{ "\n" }}{{ end }}' > /tmp/pods-api

          queue /tmp/artifacts/config-resources.json oc --insecure-skip-tls-verify --request-timeout=5s get apiserver.config.openshift.io authentication.config.openshift.io build.config.openshift.io console.config.openshift.io dns.config.openshift.io featuregate.config.openshift.io image.config.openshift.io infrastructure.config.openshift.io ingress.config.openshift.io network.config.openshift.io oauth.config.openshift.io project.config.openshift.io scheduler.config.openshift.io -o json
          queue /tmp/artifacts/apiservices.json oc --insecure-skip-tls-verify --request-timeout=5s get apiservices -o json
          queue /tmp/artifacts/clusteroperators.json oc --insecure-skip-tls-verify --request-timeout=5s get clusteroperators -o json
          queue /tmp/artifacts/clusterversion.json oc --insecure-skip-tls-verify --request-timeout=5s get clusterversion -o json
          queue /tmp/artifacts/configmaps.json oc --insecure-skip-tls-verify --request-timeout=5s get configmaps --all-namespaces -o json
          queue /tmp/artifacts/credentialsrequests.json oc --insecure-skip-tls-verify --request-timeout=5s get credentialsrequests --all-namespaces -o json
          queue /tmp/artifacts/csr.json oc --insecure-skip-tls-verify --request-timeout=5s get csr -o json
          queue /tmp/artifacts/endpoints.json oc --insecure-skip-tls-verify --request-timeout=5s get endpoints --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/deployments.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get deployments --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/daemonsets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get daemonsets --all-namespaces -o json
          queue /tmp/artifacts/events.json oc --insecure-skip-tls-verify --request-timeout=5s get events --all-namespaces -o json
          queue /tmp/artifacts/kubeapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get kubeapiserver -o json
          queue /tmp/artifacts/kubecontrollermanager.json oc --insecure-skip-tls-verify --request-timeout=5s get kubecontrollermanager -o json
          queue /tmp/artifacts/machineconfigpools.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigpools -o json
          queue /tmp/artifacts/machineconfigs.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigs -o json
          queue /tmp/artifacts/namespaces.json oc --insecure-skip-tls-verify --request-timeout=5s get namespaces -o json
          queue /tmp/artifacts/nodes.json oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o json
          queue /tmp/artifacts/openshiftapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get openshiftapiserver -o json
          queue /tmp/artifacts/pods.json oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces -o json
          queue /tmp/artifacts/persistentvolumes.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumes --all-namespaces -o json
          queue /tmp/artifacts/persistentvolumeclaims.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumeclaims --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/replicasets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get replicasets --all-namespaces -o json
          queue /tmp/artifacts/rolebindings.json oc --insecure-skip-tls-verify --request-timeout=5s get rolebindings --all-namespaces -o json
          queue /tmp/artifacts/roles.json oc --insecure-skip-tls-verify --request-timeout=5s get roles --all-namespaces -o json
          queue /tmp/artifacts/services.json oc --insecure-skip-tls-verify --request-timeout=5s get services --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/statefulsets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get statefulsets --all-namespaces -o json

          FILTER=gzip queue /tmp/artifacts/openapi.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get --raw /openapi/v2

          # gather nodes first in parallel since they may contain the most relevant debugging info
          while IFS= read -r i; do
            mkdir -p /tmp/artifacts/nodes/$i
            queue /tmp/artifacts/nodes/$i/heap oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/debug/pprof/heap
          done < /tmp/nodes

          if oc --insecure-skip-tls-verify adm node-logs -h &>/dev/null; then
            # starting in 4.0 we can query node logs directly
            FILTER=gzip queue /tmp/artifacts/nodes/masters-journal.gz oc --insecure-skip-tls-verify adm node-logs --role=master --unify=false
            FILTER=gzip queue /tmp/artifacts/nodes/workers-journal.gz oc --insecure-skip-tls-verify adm node-logs --role=worker --unify=false
          else
            while IFS= read -r i; do
              FILTER=gzip queue /tmp/artifacts/nodes/$i/messages.gz oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/logs/messages
              oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/logs/journal | sed -e 's|.*href="\(.*\)".*|\1|;t;d' > /tmp/journals
              while IFS= read -r j; do
                FILTER=gzip queue /tmp/artifacts/nodes/$i/journal.gz oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/logs/journal/${j}system.journal
              done < /tmp/journals
              FILTER=gzip queue /tmp/artifacts/nodes/$i/secure.gz oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/logs/secure
              FILTER=gzip queue /tmp/artifacts/nodes/$i/audit.gz oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/logs/audit
            done < /tmp/nodes
          fi

          # Snapshot iptables-save on each node for debugging possible kube-proxy issues
          oc --insecure-skip-tls-verify get --request-timeout=20s -n openshift-sdn -l app=sdn pods --template '{{ range .items }}{{ .metadata.name }}{{ "\n" }}{{ end }}' > /tmp/sdn-pods
          while IFS= read -r i; do
            queue /tmp/artifacts/network/iptables-save-$i oc --insecure-skip-tls-verify rsh --timeout=20 -n openshift-sdn -c sdn $i iptables-save -c
          done < /tmp/sdn-pods

          while IFS= read -r i; do
            file="$( echo "$i" | cut -d ' ' -f 3 | tr -s ' ' '_' )"
            queue /tmp/artifacts/metrics/${file}-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server "https://$( hostname ):8443" --config /etc/origin/master/admin.kubeconfig'
            queue /tmp/artifacts/metrics/${file}-controllers-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server "https://$( hostname ):8444" --config /etc/origin/master/admin.kubeconfig'
          done < /tmp/pods-api

          while IFS= read -r i; do
            file="$( echo "$i" | cut -d ' ' -f 2,3,5 | tr -s ' ' '_' )"
            FILTER=gzip queue /tmp/artifacts/pods/${file}.log.gz oc --insecure-skip-tls-verify logs --request-timeout=20s $i
            FILTER=gzip queue /tmp/artifacts/pods/${file}_previous.log.gz oc --insecure-skip-tls-verify logs --request-timeout=20s -p $i
          done < /tmp/containers

          echo "Gathering kube-apiserver audit.log ..."
          oc --insecure-skip-tls-verify adm node-logs --role=master --path=kube-apiserver/ > /tmp/kube-audit-logs
          while IFS=$'\n' read -r line; do
            IFS=' ' read -ra log <<< "${line}"
            FILTER=gzip queue /tmp/artifacts/nodes/"${log[0]}"-"${log[1]}".gz oc --insecure-skip-tls-verify adm node-logs "${log[0]}" --path=kube-apiserver/"${log[1]}"
          done < /tmp/kube-audit-logs

          echo "Gathering openshift-apiserver audit.log ..."
          oc --insecure-skip-tls-verify adm node-logs --role=master --path=openshift-apiserver/ > /tmp/openshift-audit-logs
          while IFS=$'\n' read -r line; do
            IFS=' ' read -ra log <<< "${line}"
            FILTER=gzip queue /tmp/artifacts/nodes/"${log[0]}"-"${log[1]}".gz oc --insecure-skip-tls-verify adm node-logs "${log[0]}" --path=openshift-apiserver/"${log[1]}"
          done < /tmp/openshift-audit-logs

          echo "Snapshotting prometheus (may take 15s) ..."
          queue /tmp/artifacts/metrics/prometheus.tar.gz oc --insecure-skip-tls-verify exec -n openshift-monitoring prometheus-k8s-0 -- tar cvzf - -C /prometheus .

          echo "Running must-gather..."
          mkdir -p /tmp/artifacts/must-gather
          queue /tmp/artifacts/must-gather/must-gather.log oc --insecure-skip-tls-verify adm must-gather --dest-dir /tmp/artifacts/must-gather

          echo "Waiting for logs ..."
          wait

          tar -czC /tmp/artifacts/must-gather -f /tmp/artifacts/must-gather.tar.gz . &&
          rm -rf /tmp/artifacts/must-gather

          if [ -f /tmp/shared/teardown ];then
            # flag that we're going to need to install a new endurance cluster
            # after gathering artifacts/teardown.
            touch /tmp/shared/install
            if [ -f /tmp/artifacts/installer/metadata.json ]; then
              echo "Deprovisioning cluster ..."
              export AWS_SHARED_CREDENTIALS_FILE=/etc/cloud-credentials/.awscred
              openshift-install --dir /tmp/artifacts/installer destroy cluster
              echo "Done"
            else
              echo "no cluster metadata.json found so skipping teardown"
            fi
          fi
        }

        trap 'jobs -p | xargs -r kill || true; exit 0' TERM
        teardown

    # Runs an install
    - name: reinstall
      image: ${IMAGE_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: ci-credentials
        mountPath: /etc/openshift-installer
      - name: cloud-credentials
        mountPath: /etc/cloud-credentials
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: TYPE
        value: ${CLUSTER_TYPE}
      - name: AWS_SHARED_CREDENTIALS_FILE
        value: /etc/cloud-credentials/.awscred
      - name: AWS_REGION
        value: us-east-2
      - name: CLUSTER_NAME
        value: ${NAMESPACE}-endurance-${JOB_NAME_HASH}
      - name: BASE_DOMAIN
        value: ${BASE_DOMAIN}
      - name: SSH_PUB_KEY_PATH
        value: /etc/openshift-installer/ssh-publickey
      - name: PULL_SECRET_PATH
        value: /etc/openshift-installer/pull-secret
      - name: OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE
        value: ${RELEASE_IMAGE_LATEST}
      - name: USER
        value: test
      - name: HOME
        value: /tmp
      - name: NAMESPACE
        value: ${NAMESPACE}
      command:
      - /bin/sh
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        export PATH=$PATH:/tmp/shared/bin

        if [ ! -f /tmp/shared/install ];then
          echo "Existing long lived cluster is healthy, not reinstalling"
          oc create secret generic endurance-cluster-credentials-${CLUSTER_TYPE}-new -n ${NAMESPACE} --from-file=kubeconfig=/tmp/shared/auth/kubeconfig --from-file=kubeadmin=/tmp/shared/auth/kubeadmin-password --from-file=metadata.json=/tmp/artifacts/installer/metadata.json
          exit 0
        fi

        rm -rf /tmp/artifacts/installer
        mkdir -p /tmp/artifacts/installer

        echo "Installing from release ${RELEASE_IMAGE_LATEST}"

        export EXPIRATION_DATE=$(date -d '4 hours' --iso=minutes --utc)
        export SSH_PUB_KEY=$(cat "${SSH_PUB_KEY_PATH}")
        export PULL_SECRET=$(cat "${PULL_SECRET_PATH}")

        if [[ "${CLUSTER_TYPE}" == "aws" ]]; then
            cat > /tmp/artifacts/installer/install-config.yaml << EOF
        apiVersion: v1beta4
        baseDomain: ${BASE_DOMAIN}
        metadata:
          name: ${CLUSTER_NAME}
        controlPlane:
          name: master
          replicas: 3
          platform:
            aws:
              zones:
              - us-east-2a
              - us-east-2b
        compute:
        - name: worker
          replicas: 3
          platform:
            type: m4.xlarge
            aws:
              zones:
              - us-east-2a
              - us-east-2b
        networking:
          clusterNetwork:
          - cidr: 10.128.0.0/14
            hostPrefix: 23
          machineCIDR: 10.0.0.0/16
          serviceNetwork:
          - 172.30.0.0/16
          networkType: OpenShiftSDN
        platform:
          aws:
            region:       ${AWS_REGION}
            userTags:
              expirationDate: ${EXPIRATION_DATE}
              owner: bparees
        pullSecret: |
          ${PULL_SECRET}
        sshKey: |
          ${SSH_PUB_KEY}
        EOF
        else
            echo "Unsupported cluster type '${CLUSTER_NAME}'"
            exit 1
        fi

        TF_LOG=debug openshift-install --dir=/tmp/artifacts/installer create cluster 2>&1 | grep --line-buffered -v password &
        wait "$!"

        grep -v password /tmp/artifacts/installer/.openshift_install.log > /tmp/artifacts/installer/install.log
        mv /tmp/artifacts/installer/install.log /tmp/artifacts/installer/.openshift_installer.log

        echo "##################### start cluster metadata.json ##########################"
        cat /tmp/artifacts/installer/metadata.json
        echo
        echo "##################### end cluster metadata.json ############################"       

        echo "Confirming cluster is up"
        oc --config /tmp/artifacts/installer/auth/kubeconfig get clusteroperators
        rc=$?
        if [ ! $rc -eq 0 ]; then
          echo "Failed to communicate with newly installed cluster"
          exit 1
        fi
        echo "Successfully pinged new cluster"
        
        # the ci-operator pod will copy this secret into the ci namespace to persist
        # it for future jobs to use when accessing the long lived cluster.
        oc create secret generic endurance-cluster-credentials-${CLUSTER_TYPE}-new -n ${NAMESPACE} --from-file=kubeconfig=/tmp/artifacts/installer/auth/kubeconfig --from-file=metadata.json=/tmp/artifacts/installer/metadata.json --from-file=kubeadmin=/tmp/artifacts/installer/auth/kubeadmin-password

    containers:
    - name: test
      image: ${IMAGE_TESTS}
      terminationMessagePolicy: FallbackToLogsOnError
      resources:
        requests:
          cpu: 1
          memory: 300Mi
        limits:
          memory: 3Gi
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        if [ -f /tmp/shared/teardown ]; then
          echo "Cluster was found to be in a failed state, artifacts gathered and cluster reinstalled"
          exit 1
        fi
        if [ -f /tmp/shared/mustgather ]; then
          echo "Cluster was found to be in an unhealthy state, artifacts gathered, cluster left intact"
          exit 1
        fi

        echo "Cluster was found to be healthy"
        exit 0
