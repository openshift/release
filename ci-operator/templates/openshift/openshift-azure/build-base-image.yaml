# This template is being used for testing OpenShift Ansible base image builds for Azure.
kind: Template
apiVersion: template.openshift.io/v1

parameters:
- name: JOB_NAME_SAFE
  required: true
- name: JOB_NAME_HASH
  required: true
- name: NAMESPACE
  required: true
- name: CLUSTER_TYPE
  value: "azure"
  required: true
- name: AZURE_VM_SIZE
  value: "Standard_D2s_v3"
  required: true
- name: IMAGE_ANSIBLE
  required: true
- name: DEPLOY_OS
  value: "rhel7"
  required: true

objects:

# We want the cluster to be able to access these images
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-image-puller
    namespace: ${NAMESPACE}
  roleRef:
    name: system:image-puller
  subjects:
  - kind: SystemGroup
    name: system:unauthenticated

# The build pod will create an instance and install openshift
- kind: Pod
  apiVersion: v1
  metadata:
    name: ${JOB_NAME_SAFE}
    namespace: ${NAMESPACE}
    annotations:
      ci-operator.openshift.io/containers-logged-on-failure: buildimage,teardown
  spec:
    restartPolicy: Never
    activeDeadlineSeconds: 10800
    terminationGracePeriodSeconds: 600
    volumes:
    - name: artifacts
      emptyDir: {}
    - name: shared-tmp
      emptyDir: {}
    - name: cluster-secrets-azure
      secret:
        secretName: azure

    containers:
    - name: buildimage
      image: ${IMAGE_ANSIBLE}
      resources:
        requests:
          cpu: 1
          memory: 300Mi
        limits:
          cpu: 3
          memory: 4Gi
      volumeMounts:
      - name: artifacts
        mountPath: /tmp/artifacts
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-secrets-azure
        mountPath: /usr/share/ansible/openshift-ansible/inventory/dynamic/injected
      env:
      - name: HOME
        value: /usr/share/ansible/openshift-ansible
      - name: AZURE_VM_SIZE
        value: "${AZURE_VM_SIZE}"
      - name: JOB_NAME_SAFE
        value: "${JOB_NAME_SAFE}"
      - name: JOB_NAME_HASH
        value: "${JOB_NAME_HASH}"
      - name: DEPLOY_OS
        value: "${DEPLOY_OS}"
      - name: TYPE
        value: "${CLUSTER_TYPE}"
      - name: INSTANCE_PREFIX
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      command:
      - /usr/local/bin/entrypoint-provider
      args:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        # error handling and sync code
        set -euo pipefail

        export BUILD_DATE_TIME=$(TZ=Etc/UTC date +%Y%m%d%H%M)
        export RESOURCE_GROUP=${INSTANCE_PREFIX}-${BUILD_DATE_TIME}
        export IMAGE_NAME=${DEPLOY_OS}-base-${BUILD_DATE_TIME}

        # We need to persist the resource group for use in the teardown container
        # This is necessary because it is composed of time components whose
        # computation would vary if the teardown container runs a couple of
        # minutes after the buildimage container was first started
        echo "RESOURCE_GROUP=${RESOURCE_GROUP}" >>/tmp/shared/environment

        trap 'touch /tmp/shared/exit' EXIT
        trap 'kill $(jobs -p); exit 0' TERM

        source /usr/share/ansible/openshift-ansible/inventory/dynamic/injected/secret
        az login --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID} &>/dev/null
        # Unfortunately az login is not enough for the base build playbook, we also
        # have to source the following variables: AZURE_TENANT and AZURE_SECRET
        # instead of AZURE_TENANT_ID and AZURE_CLIENT_SECRET which are used elsewhere.
        cp /usr/share/ansible/openshift-ansible/inventory/dynamic/injected/secret /tmp/shared/credentials
        sed -i -e "s#TENANT_ID#TENANT#" /tmp/shared/credentials
        sed -i -e "s#CLIENT_SECRET#SECRET#" /tmp/shared/credentials
        source /tmp/shared/credentials

        # build the base image
        ansible-playbook \
          -e openshift_azure_resource_group_name=$RESOURCE_GROUP \
          -e openshift_azure_resource_location=eastus \
          -e openshift_azure_input_image_ns=images \
          -e openshift_azure_input_image_prefix=${DEPLOY_OS}-root \
          -e openshift_azure_output_image_ns=images \
          -e openshift_azure_output_image_name=$IMAGE_NAME \
          -e openshift_azure_vm_size=$AZURE_VM_SIZE \
          -e openshift_azure_vm_ssh_public_key="~/.ssh/id_rsa.pub" \
          -e @/usr/share/ansible/openshift-ansible/inventory/dynamic/injected/certs.yaml \
          playbooks/azure/openshift-cluster/build_base_image.yml

        # tag the image
        ansible-playbook \
          -e openshift_azure_input_image_ns=images \
          -e openshift_azure_input_image_name=$IMAGE_NAME \
          playbooks/azure/openshift-cluster/tag_image_as_valid.yml

    # Performs cleanup of all created resources
    - name: teardown
      image: registry.svc.ci.openshift.org/azure/test-base:latest
      volumeMounts:
      - name: artifacts
        mountPath: /tmp/artifacts
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-secrets-azure
        mountPath: /etc/azure/credentials
      env:
      - name: HOME
        value: /tmp/shared/home
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        function teardown() {
          set +e

          # Get resource group which was persisted by the buildimage container
          source /tmp/shared/environment

          # Login to azure
          source /etc/azure/credentials/secret
          az login --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID} &>/dev/null

          az group delete -n ${RESOURCE_GROUP} -y --no-wait
        }

        trap 'teardown' EXIT
        trap 'kill $(jobs -p); exit 0' TERM

        for i in `seq 1 120`; do
          if [[ -f /tmp/shared/exit ]]; then
            exit 0
          fi
          sleep 60 & wait
        done
