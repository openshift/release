kind: Template
apiVersion: template.openshift.io/v1

parameters:
- name: JOB_NAME_SAFE
  required: true
- name: JOB_NAME_HASH
  required: true
- name: LOCAL_IMAGE_BIN
  required: true
- name: IMAGE_TESTS
  required: true
- name: IMAGE_SYNC
  required: true
- name: IMAGE_LOGBRIDGE
  required: true
- name: NAMESPACE
  required: true
- name: CLUSTER_TYPE
  value: "azure"
  required: true
- name: TEST_COMMAND
  required: true

objects:

# We want the cluster to be able to access these images
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-image-puller
    namespace: ${NAMESPACE}
  roleRef:
    name: system:image-puller
  subjects:
  - kind: SystemGroup
    name: system:unauthenticated

- kind: Pod
  apiVersion: v1
  metadata:
    name: ${JOB_NAME_SAFE}
    namespace: ${NAMESPACE}
    annotations:
      # we want to gather the teardown logs no matter what
      ci-operator.openshift.io/wait-for-container-artifacts: teardown
      ci-operator.openshift.io/containers-logged-on-failure: setup,test,teardown
  spec:
    restartPolicy: Never
    activeDeadlineSeconds: 10800
    terminationGracePeriodSeconds: 600
    volumes:
    - name: artifacts
      emptyDir: {}
    - name: shared-tmp
      emptyDir: {}
    - name: openshift-tmp
      emptyDir: {}
    - name: cluster-secrets-azure
      secret:
        secretName: azure

    containers:

    # Executes origin conformance tests
    - name: test
      image: ${IMAGE_TESTS}
      resources:
        requests:
          cpu: 1
          memory: 300Mi
        limits:
          cpu: 3
          memory: 4Gi
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: openshift-tmp
        mountPath: /tmp/openshift
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: HOME
        value: /tmp/shared/home
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        trap 'touch /tmp/shared/exit' EXIT
        trap 'kill $(jobs -p); exit 0' TERM

        cp "$(which oc)" /tmp/shared/

        mkdir -p "${HOME}"

        # wait until the setup job creates admin.kubeconfig
        while true; do
          if [[ ! -f  /tmp/shared/_data/_out/admin.kubeconfig ]]; then
            sleep 15 & wait
            continue
          fi
          # if we got admin kubeconfig file with failure marker, ignore. Teardown is in progress. 
          if [[ -f  /tmp/shared/exit ]]; then
             exit 1
          fi
          break
        done
        echo "Found shared kubeconfig"

        # don't let clients impact the global kubeconfig
        cp -r /tmp/shared/_data /tmp/openshift/
        export KUBECONFIG=/tmp/openshift/_data/_out/admin.kubeconfig

        PATH=/usr/libexec/origin:$PATH

        # TODO: the test binary should really be a more structured command - most of these flags should be
        #       autodetected from the running cluster.
        # TODO: bump nodes up to 40 again
        source /tmp/shared/overrides
        function run-tests() {
          if [[ -n "${TEST_FOCUS:-}" ]]; then
            ginkgo -v -noColor -nodes="${TEST_PARALLELISM:-30}" $( which extended.test ) -- \
              -ginkgo.focus="${TEST_FOCUS}" -ginkgo.skip="${TEST_SKIP:-"\\[local\\]"}" \
              -e2e-output-dir /tmp/artifacts -report-dir /tmp/artifacts/junit \
              -test.timeout=2h ${PROVIDER_ARGS-} || rc=$?
          fi
          if [[ -n "${TEST_FOCUS_SERIAL:-}" ]]; then
            ginkgo -v -noColor -nodes=1 $( which extended.test ) -- \
              -ginkgo.focus="${TEST_FOCUS_SERIAL}" -ginkgo.skip="${TEST_SKIP_SERIAL:-"\\[local\\]"}" \
              -e2e-output-dir /tmp/artifacts -report-dir /tmp/artifacts/junit/serial \
              -test.timeout=2h ${PROVIDER_ARGS-} || rc=$?
          fi
          exit ${rc:-0}
        }

        ${TEST_COMMAND}

    # Runs an install
    - name: setup
      image: ${LOCAL_IMAGE_BIN}
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-secrets-azure
        mountPath: /etc/azure/credentials
      env:
      - name: INSTANCE_PREFIX
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: TYPE
        value: ${CLUSTER_TYPE}
      - name: HOME
        value: /tmp/shared/home
      - name: SYNC_IMAGE
        value: ${IMAGE_SYNC}
      - name: LOGBRIDGE_IMAGE
        value: ${IMAGE_LOGBRIDGE}
      - name: RUNNING_UNDER_TEST
        value: "true"
      - name: RESOURCEGROUP_TTL
        value: 4h
      command:
      - /usr/local/bin/entrypoint
      args:
      - /bin/bash
      - -c
      - |
       #!/bin/bash
        set -euo pipefail

        trap 'rc=$?; if [[ $rc -ne 0 ]]; then 
          touch /tmp/shared/exit;
        fi;
        cp -r /go/src/github.com/openshift/openshift-azure/_data /tmp/shared &>/dev/null
        cp /go/src/github.com/openshift/openshift-azure/test/overrides /tmp/shared
        exit $rc' EXIT
        trap 'kill $(jobs -p); exit 0' TERM

        # Cluster creation specific configuration.
        mkdir -p "${HOME}"
        source /etc/azure/credentials/secret
        az login --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID} &>/dev/null
        # aad integration configuration - we dont test aad so populate as dummy
        export AZURE_AAD_CLIENT_ID=$AZURE_CLIENT_ID
        export AZURE_AAD_CLIENT_SECRET=$AZURE_CLIENT_SECRET
        export AZURE_REGION=eastus
        echo "Using sync image ${SYNC_IMAGE}"
        echo "Using logbridge image ${LOGBRIDGE_IMAGE}"
        export DNS_DOMAIN=osadev.cloud
        export DNS_RESOURCEGROUP=dns
        export DEPLOY_VERSION=v3.11
        export RUN_SYNC_LOCAL=true
        export IMAGE_RESOURCEGROUP=images
        export IMAGE_RESOURCENAME=$(az image list -g $IMAGE_RESOURCEGROUP -o json --query "[?starts_with(name, '${DEPLOY_OS:-rhel7}-${DEPLOY_VERSION//v}') && tags.valid=='true'].name | sort(@) | [-1]" | tr -d '"')
        # create cluster for test
        cd /go/src/github.com/openshift/openshift-azure/
        timeout 1h ./hack/create.sh ${INSTANCE_PREFIX}
        # disable sync pod
        ./hack/ssh.sh -c "sudo rm /etc/origin/node/pods/sync.yaml" ${INSTANCE_PREFIX}

    # Performs cleanup of all created resources
    - name: teardown
      image: ${LOCAL_IMAGE_BIN}
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-secrets-azure
        mountPath: /etc/azure/credentials
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: INSTANCE_PREFIX
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: TYPE
        value: ${CLUSTER_TYPE}
      - name: HOME
        value: /tmp/shared/home
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash

        set -euo pipefail

        ./test/scripts/teardown.sh 2>&1 | tee /tmp/artifacts/teardown.log
