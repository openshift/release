kind: Template
apiVersion: template.openshift.io/v1

parameters:
- name: JOB_NAME_SAFE
  required: true
- name: JOB_NAME_HASH
  required: true
- name: NAMESPACE
  required: true
- name: IMAGE_FORMAT
  required: true
- name: IMAGE_INSTALLER
  required: true
- name: IMAGE_LIBVIRT_INSTALLER
  required: true
- name: LOCAL_IMAGE_SRC
  required: true
- name: IMAGE_CLI
  required: true
- name: IMAGE_TESTS
  required: true
- name: CLUSTER_TYPE
  required: true
# Ensures the release image is created and tested
- name: TEST_COMMAND
  required: true
- name: RELEASE_IMAGE_LATEST
  required: true
- name: BASE_DOMAIN
- name: CLUSTER_NETWORK_TYPE
- name: CLUSTER_VARIANT
- name: BUILD_ID
  required: false

objects:

# We want the cluster to be able to access these images
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-image-puller
    namespace: ${NAMESPACE}
  roleRef:
    name: system:image-puller
  subjects:
  - kind: SystemGroup
    name: system:unauthenticated
  - kind: SystemGroup
    name: system:authenticated

# The e2e pod spins up a cluster, runs e2e tests, and then cleans up the cluster.
- kind: Pod
  apiVersion: v1
  metadata:
    name: ${JOB_NAME_SAFE}
    namespace: ${NAMESPACE}
    annotations:
      # we want to gather the teardown logs no matter what
      ci-operator.openshift.io/wait-for-container-artifacts: teardown
      ci-operator.openshift.io/save-container-logs: "true"
      ci-operator.openshift.io/container-sub-tests: "setup,setupgcptest,test,teardown,teardowngcptest"
  spec:
    restartPolicy: Never
    activeDeadlineSeconds: 18000
    terminationGracePeriodSeconds: 900
    volumes:
    - name: artifacts
      emptyDir: {}
    - name: shared-tmp
      emptyDir: {}
    - name: cluster-profile
      secret:
        secretName: ${JOB_NAME_SAFE}-cluster-profile
    initContainers:
    - name: openshift-tests
      image: ${IMAGE_TESTS}
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      command:
      - cp
      - /usr/bin/openshift-tests
      - /tmp/shared/openshift-tests
    - name: cli
      image: ${IMAGE_CLI}
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      command:
      - cp
      - /usr/bin/oc
      - /tmp/shared/oc
    - name: kubevirt-src
      image: ${LOCAL_IMAGE_SRC}
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      command:
      - cp
      - -R
      - /go/src/kubevirt.io/kubevirt
      - /tmp/shared/kubevirt

    containers:
    # Once the cluster is up, execute tests
    # The tests require nested virt, we run the tests
    # from within a nested-virt-enabled gcp instance against a
    # cluster running in aws.
    # We use IMAGE_LIBVIRT_INSTALLER because it has the nss-wrapper
    # We aren't launching libvirt cluster with this template
    - name: test
      image: ${IMAGE_LIBVIRT_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /home/packer
      - name: cluster-profile
        mountPath: /tmp/cluster
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: NSS_WRAPPER_PASSWD
        value: /home/packer/passwd
      - name: NSS_WRAPPER_GROUP
        value: /home/packer/group
      - name: NSS_USERNAME
        value: packer
      - name: NSS_GROUPNAME
        value: packer
      - name: GOOGLE_PROJECT_ID
        value: openshift-gce-devel
      - name: GOOGLE_COMPUTE_ZONE
        value: us-east1-d
      - name: INSTANCE_PREFIX
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: INSTANCE_PREFIX_TEST
        value: ${NAMESPACE}-test-${JOB_NAME_HASH}
      - name: GCP_SHARED_CREDENTIALS_FILE
        value: /tmp/cluster/gce.json
      - name: ARTIFACT_DIR
        value: /tmp/artifacts
      - name: HOME
        value: /home/packer
      - name: IMAGE_FORMAT
        value: ${IMAGE_FORMAT}
      - name: KUBECONFIG
        value: /home/packer/kubeconfig
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        export PATH=/home/packer:$PATH

        trap 'touch "${HOME}"/exit "${HOME}"/exit1' EXIT
        trap 'jobs -p | xargs -r kill || true; exit 0' TERM
        set -x
        export GOOGLE_APPLICATION_CREDENTIALS="${GCP_SHARED_CREDENTIALS_FILE}"
        [ -d "${HOME}"/.ssh ] || mkdir -p ~/.ssh

        mock-nss.sh
        gcloud auth activate-service-account --key-file="${GCP_SHARED_CREDENTIALS_FILE}"
        gcloud --quiet config set project openshift-gce-devel
        gcloud --quiet config set compute/zone "${GOOGLE_COMPUTE_ZONE}"
        echo "Waiting for kubeconfig from setup container..."
        while true; do
          if [[ -f "${HOME}"/exit ]] || [[ -f "${HOME}"/exit1 ]]; then
            echo "Another process exited" 2>&1
            exit 1
          fi
          if [[ ! -f "${HOME}"/setup-success ]]; then
            sleep 15 & wait
            continue
          fi
          break
        done
        set -x
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute --project "${GOOGLE_PROJECT_ID}" ssh \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          packer@"${INSTANCE_PREFIX_TEST}" \
          --command 'export KUBECONFIG=/home/packer/kubeconfig && /home/packer/run-tests.sh'

    # We use IMAGE_LIBVIRT_INSTALLER because it has the nss-wrapper
    # We aren't launching libvirt cluster with this template
    # This container sets up the nested-virt-enabled gcp instance from which tests will
    # be run against the cluster launched via the setup container.
    - name: setupgcptest
      image: ${IMAGE_LIBVIRT_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /home/packer
      - name: cluster-profile
        mountPath: /tmp/cluster
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: HOME
        value: /home/packer
      - name: NSS_WRAPPER_PASSWD
        value: /home/packer/passwd
      - name: NSS_WRAPPER_GROUP
        value: /home/packer/group
      - name: NSS_USERNAME
        value: packer
      - name: NSS_GROUPNAME
        value: packer
      - name: GOOGLE_PROJECT_ID
        value: openshift-gce-devel
      - name: GOOGLE_COMPUTE_ZONE
        value: us-east1-d
      - name: INSTANCE_PREFIX_TEST
        value: ${NAMESPACE}-test-${JOB_NAME_HASH}
      - name: GCP_REGION
        value: us-east1
      - name: GCP_PROJECT
        value: openshift-gce-devel
      - name: GOOGLE_CLOUD_KEYFILE_JSON
        value: /tmp/cluster/gce.json
      command:
      - /bin/sh
      - -c
      - |
        #!/bin/sh
        set -e
        trap 'rc=$?; if test "${rc}" -eq 0; then touch "${HOME}"/testgcpsetup; else touch "${HOME}"/exit "${HOME}"/exit1; fi; exit "${rc}"' EXIT
        trap 'CHILDREN=$(jobs -p); if test -n "${CHILDREN}"; then kill ${CHILDREN} && wait; fi' TERM
        # This script will be scp'd to nested-virt-enabled gcp instance to run tests (tests run in test container)
        cat  > "${HOME}"/kubevirt-tests.sh << 'EOF'
        #!/bin/bash
        set -euo pipefail
        echo "installing docker"
        sudo yum install -y docker
        sudo systemctl start docker
        echo "fetching oc and kubectl for deployment"
        export oc_filename='oc.tar.gz'
        export oc_dirname="${oc_filename%.tar.gz}"
        export oc_download_url_base='https://mirror.openshift.com/pub/openshift-v4/clients/oc/4.2/linux/'
        (
          mkdir ${oc_dirname}
          cd ${oc_dirname}
          curl -L -O -o ${oc_filename} ${oc_download_url_base}/${oc_filename}
          tar zxvf ${oc_filename}
          ln -s $(pwd)/${oc_dirname} kubectl
        ) || ( echo "failed to download ${oc_filename}"; exit 1 )
        export PATH=$(pwd)/${oc_dirname}:$PATH
        export KUBECONFIG=/home/packer/kubeconfig
        which kubectl
        which oc
        echo "checking nodes for cluster"
        oc get nodes
        echo "checking configuration"
        env|grep KUBE
        kubectl config view
        export DOCKER_PREFIX='dhiller'
        export DOCKER_TAG="latest"
        export KUBEVIRT_PROVIDER=external
        export GIMME_GO_VERSION=1.12.8
        sudo mkdir /go
        sudo chmod 777 /go
        export GOPATH="/go"
        export GOBIN="/usr/bin"
        sudo mkdir -p /gimme
        sudo chmod 777 /gimme
        sudo chmod 777 /etc/profile.d
        sudo curl -sL https://raw.githubusercontent.com/travis-ci/gimme/master/gimme | HOME=/gimme GIMME_GO_VERSION=1.12.8 bash >> /etc/profile.d/gimme.sh
        source /etc/profile.d/gimme.sh
        echo "creating manifests"
        # This is failing atm...
        bash -x ./hack/build-manifests.sh
        echo "checking configuration location"
        echo "KUBECONFIG: ${KUBECONFIG}"
        echo "patching cluster-up external provider"
        (
          cd cluster-up/cluster/external
          curl -L -O -o provider.sh https://raw.githubusercontent.com/dhiller/kubevirtci/fix-external-provider/cluster-up/cluster/external/provider.sh
        )
        echo "calling cluster-up to prepare config and check whether cluster is reachable"
        cd ../../../
        bash -x ./cluster-up/up.sh echo "checking cluster configuration after config prep"
        kubectl config view
        echo "deploying"
        sudo bash -x ./hack/cluster-deploy.sh
        echo "checking pods for kubevirt"
        oc get pods -n kubevirt
        echo "testing"
        go get -u github.com/onsi/ginkgo/ginkgo
        sudo bash -x ./hack/build-func-tests.sh
        sudo bash -x ./hack/functests.sh
        EOF
        chmod +x "${HOME}"/kubevirt-tests.sh
        # This script will be scp'd to nested-virt-enabled gcp instance to run tests (tests run in test container)
        cat  > "${HOME}"/run-tests.sh << 'EOF'
        #!/bin/bash
        set -euo pipefail
        export PATH=/home/packer:$PATH
        mkdir -p /tmp/artifacts/junit

        function run-tests() {
          cd kubevirt
          "${HOME}"/kubevirt/kubevirt-tests.sh
          return 0
        }

        ${TEST_COMMAND}
        EOF
        chmod +x "${HOME}"/run-tests.sh
        mock-nss.sh
        [ -d "${HOME}"/.ssh ] || mkdir "${HOME}"/.ssh
        gcloud auth activate-service-account \
          --quiet --key-file /tmp/cluster/gce.json
        gcloud --quiet config set project "${GOOGLE_PROJECT_ID}"
        gcloud --quiet config set compute/zone "${GOOGLE_COMPUTE_ZONE}"
        set -x

        # image-family openshift4-libvirt must exist in ${GOOGLE_COMPUTE_ZONE} for this template
        # to create the image-family see here: https://github.com/ironcladlou/openshift4-libvirt-gcp#images
        gcloud compute instances create "${INSTANCE_PREFIX_TEST}" \
          --image-family openshift4-libvirt \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --machine-type n1-standard-8 \
          --min-cpu-platform "Intel Haswell" \
          --boot-disk-type pd-ssd \
          --boot-disk-size 256GB
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
          --quiet \
          --project "${GOOGLE_PROJECT_ID}" \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --recurse /home/packer/kubevirt packer@"${INSTANCE_PREFIX_TEST}":~/
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
          --quiet \
          --project "${GOOGLE_PROJECT_ID}" \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --recurse "${HOME}"/kubevirt-tests.sh packer@"${INSTANCE_PREFIX_TEST}":~/kubevirt/kubevirt-tests.sh
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
          --quiet \
          --project "${GOOGLE_PROJECT_ID}" \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --recurse "${HOME}"/run-tests.sh packer@"${INSTANCE_PREFIX_TEST}":~/run-tests.sh
        # we don't run openshift-tests, but might in the future
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
          --quiet \
          --project "${GOOGLE_PROJECT_ID}" \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --recurse "${HOME}"/openshift-tests packer@"${INSTANCE_PREFIX_TEST}":~/openshift-tests
        # Now wait for setup container to finish cluster launch, then copy kubeconfig to nested-virt-enabled gcp
        # where tests will run.
        while true; do
          if [[ ! -f "${HOME}"/setup-success ]]; then
            sleep 15 & wait
            continue
          fi
          break
        done
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so gcloud compute scp \
          --quiet \
          --project "${GOOGLE_PROJECT_ID}" \
          --zone "${GOOGLE_COMPUTE_ZONE}" \
          --recurse "${HOME}"/kubeconfig packer@"${INSTANCE_PREFIX_TEST}":~/kubeconfig

    # This setup container runs the openshift-install binary to launch a cluster
    - name: setup
      image: ${IMAGE_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp
      - name: cluster-profile
        mountPath: /etc/openshift-installer
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: AWS_SHARED_CREDENTIALS_FILE
        value: /etc/openshift-installer/.awscred
      - name: AWS_REGION
        value: us-east-1
      - name: CLUSTER_NAME
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: CLUSTER_VARIANT
        value: ${CLUSTER_VARIANT}
      - name: BASE_DOMAIN
        value: ${BASE_DOMAIN}
      - name: SSH_PRIV_KEY_PATH
        value: /etc/openshift-installer/ssh-privatekey
      - name: SSH_PUB_KEY_PATH
        value: /etc/openshift-installer/ssh-publickey
      - name: PULL_SECRET_PATH
        value: /etc/openshift-installer/pull-secret
      - name: OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE
        value: ${RELEASE_IMAGE_LATEST}
      - name: OPENSHIFT_INSTALL_INVOKER
        value: openshift-internal-ci/${JOB_NAME_SAFE}/${BUILD_ID}
      - name: USER
        value: test
      - name: HOME
        value: /tmp
      - name: MIRROR_BASE
        value: registry.svc.ci.openshift.org/${NAMESPACE}/release
      - name: INSTALL_INITIAL_RELEASE
      - name: RELEASE_IMAGE_INITIAL
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/sh
        set -e

        trap 'rc=$?; if test "${rc}" -eq 0; then touch /tmp/setup-success; else touch /tmp/exit; fi; exit "${rc}"' EXIT
        trap 'CHILDREN=$(jobs -p); if test -n "${CHILDREN}"; then kill ${CHILDREN} && wait; fi' TERM
        cp "$(command -v openshift-install)" /tmp
        mkdir /tmp/artifacts/installer

        if [[ -n "${INSTALL_INITIAL_RELEASE}" && -n "${RELEASE_IMAGE_INITIAL}" ]]; then
          echo "Installing from initial release ${RELEASE_IMAGE_INITIAL}"
          OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE="${RELEASE_IMAGE_INITIAL}"
        elif [[ "${CLUSTER_VARIANT}" =~ "mirror" ]]; then
          export PATH=$PATH:/tmp  # gain access to oc
          while [ ! command -V oc ]; do sleep 1; done # poll to make sure that the test container has dropped oc into the shared volume

          # mirror the release image and override the release image to point to the mirrored one
          mkdir /tmp/.docker && cp /etc/openshift-installer/pull-secret /tmp/.docker/config.json
          oc registry login
          oc adm release new --from-release ${RELEASE_IMAGE_LATEST} --to-image ${MIRROR_BASE}-scratch:release --mirror ${MIRROR_BASE}-scratch || echo 'ignore: the release could not be reproduced from its inputs'
          oc adm release mirror --from ${MIRROR_BASE}-scratch:release --to ${MIRROR_BASE} --to-release-image ${MIRROR_BASE}:mirrored
          RELEASE_PAYLOAD_IMAGE_SHA=$(oc get istag ${MIRROR_BASE##*/}:mirrored -o=jsonpath="{.image.metadata.name}")
          oc delete imagestream "$(basename "${MIRROR_BASE}-scratch")"
          RELEASE_IMAGE_MIRROR="${MIRROR_BASE}@${RELEASE_PAYLOAD_IMAGE_SHA}"

          echo "Installing from mirror override release ${RELEASE_IMAGE_MIRROR}"
          OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE="${RELEASE_IMAGE_MIRROR}"
        else
          echo "Installing from release ${RELEASE_IMAGE_LATEST}"
        fi

        export EXPIRATION_DATE=$(date -d '4 hours' --iso=minutes --utc)
        export SSH_PUB_KEY=$(cat "${SSH_PUB_KEY_PATH}")
        export PULL_SECRET=$(cat "${PULL_SECRET_PATH}")

        ## move private key to ~/.ssh/ so that installer can use it to gather logs on bootstrap failure
        mkdir -p ~/.ssh
        cp "${SSH_PRIV_KEY_PATH}" ~/.ssh/

        workers=3
        if [[ "${CLUSTER_VARIANT}" =~ "compact" ]]; then
          workers=0
        fi
        if [[ "${CLUSTER_TYPE}" == "aws" ]]; then
            master_type=null
            if [[ "${CLUSTER_VARIANT}" =~ "xlarge" ]]; then
              master_type=m5.8xlarge
            elif [[ "${CLUSTER_VARIANT}" =~ "large" ]]; then
              master_type=m5.4xlarge
            fi
            subnets="[]"
            if [[ "${CLUSTER_VARIANT}" =~ "shared-vpc" ]]; then
              case $((RANDOM % 4)) in
              0) subnets="['subnet-030a88e6e97101ab2','subnet-0e07763243186cac5','subnet-02c5fea7482f804fb','subnet-0291499fd1718ee01','subnet-01c4667ad446c8337','subnet-025e9043c44114baa']";;
              1) subnets="['subnet-0170ee5ccdd7e7823','subnet-0d50cac95bebb5a6e','subnet-0094864467fc2e737','subnet-0daa3919d85296eb6','subnet-0ab1e11d3ed63cc97','subnet-07681ad7ce2b6c281']";;
              2) subnets="['subnet-00de9462cf29cd3d3','subnet-06595d2851257b4df','subnet-04bbfdd9ca1b67e74','subnet-096992ef7d807f6b4','subnet-0b3d7ba41fc6278b2','subnet-0b99293450e2edb13']";;
              3) subnets="['subnet-047f6294332aa3c1c','subnet-0c3bce80bbc2c8f1c','subnet-038c38c7d96364d7f','subnet-027a025e9d9db95ce','subnet-04d9008469025b101','subnet-02f75024b00b20a75']";;
              *) echo >&2 "invalid subnets index"; exit 1;;
              esac
              echo "Subnets : ${subnets}"
            fi
            cat > /tmp/artifacts/installer/install-config.yaml << EOF
        apiVersion: v1
        baseDomain: ${BASE_DOMAIN:-devcluster.openshift.com}
        metadata:
          name: ${CLUSTER_NAME}
        controlPlane:
          name: master
          replicas: 3
          platform:
            aws:
              type: ${master_type}
              zones:
              - us-east-1a
              - us-east-1b
        compute:
        - name: worker
          replicas: ${workers}
          platform:
            aws:
              type: m4.xlarge
              zones:
              - us-east-1a
              - us-east-1b
        platform:
          aws:
            region:       ${AWS_REGION}
            userTags:
              expirationDate: ${EXPIRATION_DATE}
            subnets: ${subnets}
        pullSecret: >
          ${PULL_SECRET}
        sshKey: |
          ${SSH_PUB_KEY}
        EOF

        else
            echo "Unsupported cluster type '${CLUSTER_TYPE}'"
            exit 1
        fi

        network_type="${CLUSTER_NETWORK_TYPE-}"
        if [[ "${CLUSTER_VARIANT}" =~ "ovn" ]]; then
          network_type=OVNKubernetes
        fi
        if [[ -n "${network_type}" ]]; then
          cat >> /tmp/artifacts/installer/install-config.yaml << EOF
        networking:
          networkType: ${network_type}
        EOF
        fi

        if [[ "${CLUSTER_VARIANT}" =~ "mirror" ]]; then
          cat >> /tmp/artifacts/installer/install-config.yaml << EOF
        imageContentSources:
        - source: "${MIRROR_BASE}-scratch"
          mirrors:
          - "${MIRROR_BASE}"
        EOF
        fi

        # TODO: Replace with a more concise manifest injection approach
        if [[ -n "${CLUSTER_NETWORK_MANIFEST}" ]]; then
            openshift-install --dir=/tmp/artifacts/installer/ create manifests
            echo "${CLUSTER_NETWORK_MANIFEST}" > /tmp/artifacts/installer/manifests/cluster-network-03-config.yml
        fi

        TF_LOG=debug openshift-install --dir=/tmp/artifacts/installer create cluster &
        wait "$!"
        cp /tmp/artifacts/installer/auth/kubeconfig /tmp/kubeconfig


    # Performs cleanup of all created resources from cluster launch
    - name: teardown
      image: ${IMAGE_TESTS}
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-profile
        mountPath: /etc/openshift-installer
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: INSTANCE_PREFIX
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: TYPE
        value: ${CLUSTER_TYPE}
      - name: AWS_SHARED_CREDENTIALS_FILE
        value: /etc/openshift-installer/.awscred
      - name: GOOGLE_CLOUD_KEYFILE_JSON
        value: /etc/openshift-installer/gce.json
      - name: KUBECONFIG
        value: /tmp/artifacts/installer/auth/kubeconfig
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        function queue() {
          local TARGET="${1}"
          shift
          local LIVE="$(jobs | wc -l)"
          while [[ "${LIVE}" -ge 45 ]]; do
            sleep 1
            LIVE="$(jobs | wc -l)"
          done
          echo "${@}"
          if [[ -n "${FILTER}" ]]; then
            "${@}" | "${FILTER}" >"${TARGET}" &
          else
            "${@}" >"${TARGET}" &
          fi
        }

        function teardown() {
          set +e
          touch /tmp/shared/exit
          export PATH=$PATH:/tmp/shared

          echo "Deprovisioning cluster ..."
          openshift-install --dir /tmp/artifacts/installer destroy cluster
        }

        trap 'teardown' EXIT
        trap 'jobs -p | xargs -r kill || true; exit 0' TERM

        for i in `seq 1 180`; do
          if [[ -f /home/packer/exit ]] || [[ -f /home/packer/exit1 ]]; then
            exit 0
          fi
          sleep 60 & wait
        done

   # Performs cleanup of all created resources
    - name: teardowngcptest
      image: ${IMAGE_LIBVIRT_INSTALLER}
      volumeMounts:
      - name: shared-tmp
        mountPath: /home/packer
      - name: cluster-profile
        mountPath: /tmp/cluster
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: HOME
        value: /home/packer
      - name: NSS_WRAPPER_PASSWD
        value: /home/packer/passwd
      - name: NSS_WRAPPER_GROUP
        value: /home/packer/group
      - name: NSS_USERNAME
        value: packer
      - name: NSS_GROUPNAME
        value: packer
      - name: GOOGLE_PROJECT_ID
        value: openshift-gce-devel
      - name: GOOGLE_COMPUTE_ZONE
        value: us-east1-d
      - name: INSTANCE_PREFIX_TEST
        value: ${NAMESPACE}-test-${JOB_NAME_HASH}
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail
        function teardowngcptest() {
          # This is for running the gcloud commands
          mock-nss.sh
          gcloud auth activate-service-account \
            --quiet --key-file /tmp/cluster/gce.json
          gcloud --quiet config set project "${GOOGLE_PROJECT_ID}"
          gcloud --quiet config set compute/zone "${GOOGLE_COMPUTE_ZONE}"

          set -x
          set +e
          touch /home/packer/exit1
          echo "Deprovisioning nested-virt gcp test instance ..."
          gcloud compute instances delete "${INSTANCE_PREFIX_TEST}" --quiet
        }

        trap 'teardowngcptest' EXIT
        trap 'jobs -p | xargs -r kill || true; exit 0' TERM

        for i in `seq 1 180`; do
          if [[ -f /home/packer/exit1 ]] || [[ -f /home/packer/exit ]]; then
            exit 0
          fi
          sleep 60 & wait
        done
