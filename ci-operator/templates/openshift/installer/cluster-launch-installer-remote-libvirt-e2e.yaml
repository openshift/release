kind: Template
apiVersion: template.openshift.io/v1

parameters:
- name: JOB_NAME
  required: true
- name: JOB_NAME_SAFE
  required: true
- name: JOB_NAME_HASH
  required: true
- name: NAMESPACE
  required: true
- name: IMAGE_LIBVIRT_INSTALLER
  required: true
- name: IMAGE_TESTS
  required: true
- name: ARCH
  required: true
- name: CLUSTER_TYPE
  value: remote-libvirt
- name: TEST_COMMAND
  required: true
- name: RELEASE_IMAGE_LATEST
  required: true
- name: BUILD_ID
  required: false
- name: BASTION_SVC_IP
  required: true
- name: BASTION_SVC_1_IP
  value: 127.0.0.1
  required: false
- name: BASTION_SVC_2_IP
  value: 127.0.0.1
  required: false
- name: BASTION_SVC_3_IP
  value: 127.0.0.1
  required: false
- name: BASTION_SVC_4_IP
  value: 127.0.0.1
  required: false
- name: BASTION_SVC
  required: true
- name: REMOTE_LIBVIRT_HOSTNAME
  required: true
- name: MULTIARCH_RELEASE_IMAGE_LATEST
  required: true

objects:

# We want the cluster to be able to access these images
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-image-puller
    namespace: ${NAMESPACE}
  roleRef:
    name: system:image-puller
  subjects:
  - kind: SystemGroup
    name: system:unauthenticated
  - kind: SystemGroup
    name: system:authenticated

# Give admin access to a known bot
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-namespace-admins
    namespace: ${NAMESPACE}
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    namespace: ci
    name: ci-chat-bot

# Role for giving the e2e pod permissions to update imagestreams
- kind: Role
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-imagestream-updater
    namespace: ${NAMESPACE}
  rules:
  - apiGroups: ["image.openshift.io"]
    resources: ["imagestreams/layers"]
    verbs: ["get", "update"]
  - apiGroups: ["image.openshift.io"]
    resources: ["imagestreams", "imagestreamtags"]
    verbs: ["get", "create", "update", "delete", "list"]

# Give the e2e pod access to the imagestream-updater role
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-imagestream-updater-binding
    namespace: ${NAMESPACE}
  roleRef:
    kind: Role
    namespace: ${NAMESPACE}
    name: ${JOB_NAME_SAFE}-imagestream-updater
  subjects:
  - kind: ServiceAccount
    namespace: ${NAMESPACE}
    name: default

# The e2e pod spins up a cluster, runs e2e tests, and then cleans up the cluster.
- kind: Pod
  apiVersion: v1
  metadata:
    name: ${JOB_NAME_SAFE}
    namespace: ${NAMESPACE}
    annotations:
      # we want to gather the teardown logs no matter what
      ci-operator.openshift.io/wait-for-container-artifacts: teardown
      ci-operator.openshift.io/save-container-logs: "true"
      ci-operator.openshift.io/container-sub-tests: "lease,setup,test,teardown"
  spec:
    restartPolicy: Never
    activeDeadlineSeconds: 21600
    terminationGracePeriodSeconds: 900
    volumes:
    - name: artifacts
      emptyDir: {}
    - name: shared-tmp
      emptyDir: {}
    - name: cluster-profile
      secret:
        secretName: ${JOB_NAME_SAFE}-cluster-profile

    containers:

    - name: lease
      image: registry.svc.ci.openshift.org/ci/boskoscli:latest
      terminationMessagePolicy: FallbackToLogsOnError
      resources:
        requests:
          cpu: 10m
          memory: 10Mi
        limits:
          memory: 200Mi
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-profile
        mountPath: /etc/openshift-installer
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: ARCH
      - name: CLUSTER_TYPE
      - name: CLUSTER_NAME
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        trap 'rc=$?; CHILDREN=$(jobs -p); if test -n "${CHILDREN}"; then kill ${CHILDREN} && wait; fi; if test "${rc}" -ne 0; then touch /tmp/shared/exit; fi; exit "${rc}"' EXIT

        # hack for bazel
        function boskosctl() {
          /app/boskos/cmd/cli/app.binary "${@}"
        }

        function acquire_lease() {
          if [[ "${ARCH}" != "s390x" ]]; then
            resource_name="${CLUSTER_TYPE}-00"
            return
          fi

          resource="$( boskosctl --server-url http://boskos.ci --owner-name "${CLUSTER_NAME}" acquire --type "${CLUSTER_TYPE}-quota-slice" --state "free" --target-state "leased" --timeout 150m )"
          resource_name="$(echo "${resource}"|jq .name --raw-output)"

          echo "[INFO] Lease acquired! at $(date --utc)"
          echo "[INFO] Leased resource: ${resource}"
          echo "[INFO] Sending heartbeats to retain the lease ${resource_name}"
          boskosctl --server-url http://boskos.ci --owner-name "${CLUSTER_NAME}" heartbeat --resource "${resource}" &
          heartbeats_pid=$!
        }

        echo "[INFO] Acquiring a lease ..."
        acquire_lease

        # Save name of the env to be used as the base domain
        cat > /tmp/shared/libvirt-lease.conf <<EOF
        BASE_DOMAIN="${resource_name}"
        EOF

        touch /tmp/shared/leased

        function release() {
            if [[ "${ARCH}" != "s390x" ]]; then
              return
            fi

            echo "killing heartbeat process "${heartbeats_pid}" at $(date --utc)"
            kill -9 "${heartbeats_pid}"
            echo "[INFO] Releasing the lease on resouce ${resource_name}"
            boskosctl --server-url http://boskos.ci --owner-name "${CLUSTER_NAME}" release --name "${resource_name}" --target-state "free" || true
        }

        trap "release" EXIT
        trap "release" TERM

        while true; do
          if [[ -f /tmp/shared/exit ]]; then
            echo "Another process exited" 2>&1
            exit 0
          fi

          sleep 15 & wait $!
        done

    # Once the cluster is up, executes shared tests
    - name: test
      image: ${IMAGE_TESTS}
      terminationMessagePolicy: FallbackToLogsOnError
      resources:
        requests:
          cpu: 3
          memory: 600Mi
        limits:
          memory: 4Gi
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-profile
        mountPath: /tmp/cluster
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: ARTIFACT_DIR
        value: /tmp/artifacts
      - name: HOME
        value: /tmp/home
      - name: KUBECONFIG
        value: /tmp/artifacts/installer/auth/kubeconfig
      - name: MIRROR_BASE
        value: registry.svc.ci.openshift.org/${NAMESPACE}/release
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        export PATH=/usr/libexec/origin:$PATH

        trap 'touch /tmp/shared/exit' EXIT
        trap 'jobs -p | xargs -r kill; exit 0' TERM

        function patch_image_specs() {
          cat <<EOF >samples-patch.yaml
        - op: add
          path: /spec/skippedImagestreams
          value:
          - jenkins
          - jenkins-agent-maven
          - jenkins-agent-nodejs
        EOF
          oc patch config.samples.operator.openshift.io cluster --type json -p "$(cat samples-patch.yaml)"

          NAMES='cli cli-artifacts installer installer-artifacts must-gather tests jenkins jenkins-agent-maven jenkins-agent-nodejs'
          cat <<EOF >version-patch.yaml
        - op: add
          path: /spec/overrides
          value:
        EOF
          for NAME in ${NAMES}
          do
            cat <<EOF >>version-patch.yaml
          - group: image.openshift.io/v1
            kind: ImageStream
            name: ${NAME}
            namespace: openshift
            unmanaged: true
        EOF
          done
          oc patch clusterversion version --type json -p "$(cat version-patch.yaml)"

          for NAME in ${NAMES}
          do
            DIGEST="$(oc adm release info --image-for="${NAME}" | sed 's/.*@//')"
            cat <<EOF >image-stream-new-source.yaml
        - op: replace
          path: /spec/tags/0/from
          value:
            kind: DockerImage
            name: "${MIRROR_BASE}@${DIGEST}"
        EOF
            oc -n openshift patch imagestream "${NAME}" --type json -p "$(cat image-stream-new-source.yaml)"
          done
        }

        mkdir -p "${HOME}"

        # Share oc with other containers
        cp "$(command -v oc)" /tmp/shared

        # wait for the API to come up
        while true; do
          if [[ -f /tmp/shared/exit ]]; then
            echo "Another process exited" 2>&1
            exit 1
          fi
          if [[ ! -f /tmp/shared/setup-success ]]; then
            sleep 15 & wait
            continue
          fi
          # don't let clients impact the global kubeconfig
          cp "${KUBECONFIG}" /tmp/admin.kubeconfig
          export KUBECONFIG=/tmp/admin.kubeconfig
          break
        done

        # if the cluster profile included an insights secret, install it to the cluster to
        # report support data from the support-operator
        if [[ -f /tmp/cluster/insights-live.yaml ]]; then
          oc create -f /tmp/cluster/insights-live.yaml || true
        fi

        # set up remote libvirt specific env vars
        export KUBE_SSH_KEY_PATH=/tmp/cluster/ssh-privatekey
        mkdir -p ~/.ssh
        cp /tmp/cluster/ssh-privatekey ~/.ssh/kube_libvirt_rsa || true
        export KUBE_SSH_USER=core

        # ensure lease is acquired
        if [[ ! -f /tmp/shared/libvirt-lease.conf ]]; then
          exit 1
        fi

        # ensure BASE_DOMAIN is set
        source /tmp/shared/libvirt-lease.conf
        if [[ -z "$BASE_DOMAIN" ]]; then
          exit 1
        fi

        mkdir -p /tmp/output
        cd /tmp/output

        # use s390x or ppc64le builds of e2e test images
        # this is a multi-arch iamge
        cat << EOREGISTRY > /tmp/kube-test-repo-list
        e2eRegistry: quay.io/multiarch-k8s-e2e
        EOREGISTRY
        export KUBE_TEST_REPO_LIST=/tmp/kube-test-repo-list

        function run-upgrade-tests() {
          openshift-tests run-upgrade "${TEST_SUITE}" --to-image "${IMAGE:-${RELEASE_IMAGE_LATEST}}" \
            --options "${TEST_OPTIONS:-}" \
            --provider "${TEST_PROVIDER:-}" -o /tmp/artifacts/e2e.log --junit-dir /tmp/artifacts/junit
        }

        function run-tests() {
          openshift-tests run "${TEST_SUITE}" \
            --provider "${TEST_PROVIDER:-}" -o /tmp/artifacts/e2e.log --junit-dir /tmp/artifacts/junit
        }

        ${TEST_COMMAND}

    # Runs an install
    - name: setup
      image: "${IMAGE_LIBVIRT_INSTALLER}"
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-profile
        mountPath: /etc/openshift-installer
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: CLUSTER_NAME
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: SSH_PRIV_KEY_PATH
        value: /etc/openshift-installer/ssh-privatekey
      - name: SSH_PUB_KEY_PATH
        value: /etc/openshift-installer/ssh-publickey
      - name: PULL_SECRET_PATH
        value: /etc/openshift-installer/pull-secret
      - name: OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE
        value: ${MULTIARCH_RELEASE_IMAGE_LATEST}
      - name: OPENSHIFT_INSTALL_INVOKER
        value: openshift-internal-ci/${JOB_NAME}/${BUILD_ID}
      - name: USER
        value: test
      - name: HOME
        value: /tmp
      - name: NSS_WRAPPER_PASSWD
        value: /tmp/test-passwd
      - name: NSS_WRAPPER_GROUP
        value: /tmp/test-group
      - name: NSS_USERNAME
        value: test
      - name: NSS_GROUPNAME
        value: test
      - name: MIRROR_BASE
        value: registry.svc.ci.openshift.org/${NAMESPACE}/release
      - name: REMOTE_LIBVIRT_URI
        value: "qemu+tcp://${REMOTE_LIBVIRT_HOSTNAME}/system"
      - name: BASTION_SVC
        value: sshd.bastion-z.svc.cluster.local
      - name: MASTER_REPLICAS
        value: "3"
      - name: WORKER_REPLICAS
        value: "2"
      - name: INSTALL_INITIAL_RELEASE
      - name: RELEASE_IMAGE_INITIAL
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/sh
        set -e

        trap 'rc=$?; if test "${rc}" -eq 0; then touch /tmp/shared/setup-success; else touch /tmp/shared/exit; fi; exit "${rc}"' EXIT
        trap 'CHILDREN=$(jobs -p); if test -n "${CHILDREN}"; then kill ${CHILDREN} && wait; fi' TERM
        # Wait until lease is acquired
        while true; do
          if [[ -f /tmp/shared/exit ]]; then
            echo "Another process exited" 2>&1
            exit 1
          fi
          if [[ -f /tmp/shared/leased ]]; then
            echo "Lease acquired, installing..."

            # Retrieve lease variables
            source /tmp/shared/libvirt-lease.conf
            break
          fi
          sleep 15 & wait
        done

        cp "$(command -v openshift-install)" /tmp
        mkdir /tmp/artifacts/installer

        if [[ -n "${INSTALL_INITIAL_RELEASE}" && -n "${RELEASE_IMAGE_INITIAL}" ]]; then
          echo "Installing from initial release ${RELEASE_IMAGE_INITIAL}"
          OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE="${RELEASE_IMAGE_INITIAL}"
        else
          echo "Installing from release ${OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE}"
        fi

        openshift-install version

        export SSH_PUB_KEY=$(cat "${SSH_PUB_KEY_PATH}")
        export PULL_SECRET=$(cat "${PULL_SECRET_PATH}")

        ## move private key to ~/.ssh/ so that installer can use it to gather logs on bootstrap failure
        mkdir -p ~/.ssh
        cp "${SSH_PRIV_KEY_PATH}" ~/.ssh/

        # declare environments to extract subnet
        declare -A SUBNETS
        SUBNETS["${CLUSTER_TYPE}-00"]="126"
        SUBNETS["${CLUSTER_TYPE}-01"]="1"
        SUBNETS["${CLUSTER_TYPE}-02"]="2"
        SUBNETS["${CLUSTER_TYPE}-03"]="3"
        SUBNETS["${CLUSTER_TYPE}-04"]="4"

        # get cluster subnet or default it to 126
        cluster_subnet="${SUBNETS[$BASE_DOMAIN]}"
        if [[ -z "$cluster_subnet" ]]; then
           cluster_subnet=126
        fi

        if [[ "${ARCH}" = "s390x" || "${ARCH}" = "ppc64le" ]]; then
            master_type=null
            subnets="[]"
            cat > /tmp/artifacts/installer/install-config.yaml << EOF
        apiVersion: v1
        baseDomain: ${BASE_DOMAIN}
        metadata:
          name: ${CLUSTER_NAME}
        controlPlane:
          architecture: ${ARCH}
          hyperthreading: Enabled
          name: master
          replicas: ${MASTER_REPLICAS}
        networking:
          clusterNetwork:
          - cidr: 10.128.0.0/14
            hostPrefix: 23
          machineCIDR: 192.168.${cluster_subnet}.0/24
          networkType: OpenShiftSDN
          serviceNetwork:
          - 172.30.0.0/16
        compute:
        - architecture: ${ARCH}
          hyperthreading: Enabled
          name: worker
          replicas: ${WORKER_REPLICAS}
        platform:
          libvirt:
            URI: "${REMOTE_LIBVIRT_URI}"
            network:
              if: "br${JOB_NAME_HASH}${BUILD_ID}"
        pullSecret: >
          ${PULL_SECRET}
        sshKey: |
          ${SSH_PUB_KEY}
        EOF

        else
            echo "No preallocated hardware for cluster arch '${ARCH}'"
            exit 1
        fi

        # Increase log verbosity and ensure it gets saved
        export TF_LOG=DEBUG
        export TF_LOG_PATH=/tmp/artifacts/terraform.log

        # Bump the libvirt masters memory to 16GB
        export TF_VAR_libvirt_master_memory=16384
        mock-nss.sh openshift-install create manifests --dir=/tmp/artifacts/installer
        sed -i '/^  channel:/d' /tmp/artifacts/installer/manifests/cvo-overrides.yaml
        ls /tmp/artifacts/installer/openshift
        for ((i=0; i<$MASTER_REPLICAS; i++))
        do
            sed -i -e 's/7168/16384/g' /tmp/artifacts/installer/openshift/99_openshift-cluster-api_master-machines-${i}.yaml
        done
        
        # Bump the libvirt workers memory to 8GB
        sed -i -e 's/7168/8192/g' /tmp/artifacts/installer/openshift/99_openshift-cluster-api_worker-machineset-0.yaml

        mock-nss.sh openshift-install create cluster --dir=/tmp/artifacts/installer --log-level=debug || true &
        openshift_install="$!"

        # While openshift-install is running...
        i=0
        while kill -0 $openshift_install 2> /dev/null; do
            sleep 60
            echo "Polling libvirt for network, attempt #$((++i))"
            libvirt_network=$(mock-nss.sh virsh --connect "${REMOTE_LIBVIRT_URI}" net-list --name | grep "${NAMESPACE}-${JOB_NAME_HASH}" || true)
            if [[ -n "${libvirt_network}" ]]; then
                cat > /tmp/artifacts/installer/worker-hostrecords.xml << EOF
        <host ip='192.168.${cluster_subnet}.51'>
          <hostname>alertmanager-main-openshift-monitoring.apps.${CLUSTER_NAME}.${BASE_DOMAIN}</hostname>
          <hostname>console-openshift-console.apps.${CLUSTER_NAME}.${BASE_DOMAIN}</hostname>
          <hostname>downloads-openshift-console.apps.${CLUSTER_NAME}.${BASE_DOMAIN}</hostname>
          <hostname>grafana-openshift-monitoring.apps.${CLUSTER_NAME}.${BASE_DOMAIN}</hostname>
          <hostname>oauth-openshift.apps.${CLUSTER_NAME}.${BASE_DOMAIN}</hostname>
          <hostname>prometheus-k8s-openshift-monitoring.apps.${CLUSTER_NAME}.${BASE_DOMAIN}</hostname>
        </host>
        EOF
                echo "Libvirt network found. Injecting worker DNS records."
                mock-nss.sh virsh --connect "${REMOTE_LIBVIRT_URI}" net-update --network "${libvirt_network}" --command add-last --section dns-host --xml "$(< /tmp/artifacts/installer/worker-hostrecords.xml)"
                break
            fi
        done

        wait "${openshift_install}"

        # Add a step to wait for installation to complete, in case the cluster takes longer to create than the default time of 30 minutes.
        mock-nss.sh openshift-install --dir=/tmp/artifacts/installer --log-level=debug wait-for install-complete 2>&1 &
        wait "$!"
    # Performs cleanup of all created resources
    - name: teardown
      image: "${IMAGE_LIBVIRT_INSTALLER}"
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-profile
        mountPath: /etc/openshift-installer
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: INSTANCE_PREFIX
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: KUBECONFIG
        value: /tmp/artifacts/installer/auth/kubeconfig
      - name: USER
        value: test
      - name: HOME
        value: /tmp
      - name: NSS_WRAPPER_PASSWD
        value: /tmp/test-passwd
      - name: NSS_WRAPPER_GROUP
        value: /tmp/test-group
      - name: NSS_USERNAME
        value: test
      - name: NSS_GROUPNAME
        value: test
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        function queue() {
          local TARGET="${1}"
          shift
          local LIVE="$(jobs | wc -l)"
          while [[ "${LIVE}" -ge 45 ]]; do
            sleep 1
            LIVE="$(jobs | wc -l)"
          done
          echo "${@}"
          if [[ -n "${FILTER}" ]]; then
            "${@}" | "${FILTER}" >"${TARGET}" &
          else
            "${@}" >"${TARGET}" &
          fi
        }

        function teardown() {
          set +e
          touch /tmp/shared/exit
          export PATH=$PATH:/tmp/shared

          echo "Gathering artifacts ..."
          mkdir -p /tmp/artifacts/pods /tmp/artifacts/nodes /tmp/artifacts/metrics /tmp/artifacts/bootstrap /tmp/artifacts/network

          oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o jsonpath --template '{range .items[*]}{.metadata.name}{"\n"}{end}' > /tmp/nodes
          oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o jsonpath --template '{range .items[*]}{.spec.providerID}{"\n"}{end}' | sed 's|.*/||' > /tmp/node-provider-IDs
          oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces --template '{{ range .items }}{{ $name := .metadata.name }}{{ $ns := .metadata.namespace }}{{ range .spec.containers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ "\n" }}{{ end }}{{ range .spec.initContainers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ "\n" }}{{ end }}{{ end }}' > /tmp/containers
          oc --insecure-skip-tls-verify --request-timeout=5s get pods -l openshift.io/component=api --all-namespaces --template '{{ range .items }}-n {{ .metadata.namespace }} {{ .metadata.name }}{{ "\n" }}{{ end }}' > /tmp/pods-api

          queue /tmp/artifacts/config-resources.json oc --insecure-skip-tls-verify --request-timeout=5s get apiserver.config.openshift.io authentication.config.openshift.io build.config.openshift.io console.config.openshift.io dns.config.openshift.io featuregate.config.openshift.io image.config.openshift.io infrastructure.config.openshift.io ingress.config.openshift.io network.config.openshift.io oauth.config.openshift.io project.config.openshift.io scheduler.config.openshift.io -o json
          queue /tmp/artifacts/apiservices.json oc --insecure-skip-tls-verify --request-timeout=5s get apiservices -o json
          queue /tmp/artifacts/clusteroperators.json oc --insecure-skip-tls-verify --request-timeout=5s get clusteroperators -o json
          queue /tmp/artifacts/clusterversion.json oc --insecure-skip-tls-verify --request-timeout=5s get clusterversion -o json
          queue /tmp/artifacts/configmaps.json oc --insecure-skip-tls-verify --request-timeout=5s get configmaps --all-namespaces -o json
          queue /tmp/artifacts/credentialsrequests.json oc --insecure-skip-tls-verify --request-timeout=5s get credentialsrequests --all-namespaces -o json
          queue /tmp/artifacts/csr.json oc --insecure-skip-tls-verify --request-timeout=5s get csr -o json
          queue /tmp/artifacts/endpoints.json oc --insecure-skip-tls-verify --request-timeout=5s get endpoints --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/deployments.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get deployments --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/daemonsets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get daemonsets --all-namespaces -o json
          queue /tmp/artifacts/events.json oc --insecure-skip-tls-verify --request-timeout=5s get events --all-namespaces -o json
          queue /tmp/artifacts/kubeapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get kubeapiserver -o json
          queue /tmp/artifacts/kubecontrollermanager.json oc --insecure-skip-tls-verify --request-timeout=5s get kubecontrollermanager -o json
          queue /tmp/artifacts/machineconfigpools.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigpools -o json
          queue /tmp/artifacts/machineconfigs.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigs -o json
          queue /tmp/artifacts/machinesets.json oc --insecure-skip-tls-verify --request-timeout=5s get machinesets -A -o json
          queue /tmp/artifacts/machines.json oc --insecure-skip-tls-verify --request-timeout=5s get machines -A -o json
          queue /tmp/artifacts/namespaces.json oc --insecure-skip-tls-verify --request-timeout=5s get namespaces -o json
          queue /tmp/artifacts/nodes.json oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o json
          queue /tmp/artifacts/openshiftapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get openshiftapiserver -o json
          queue /tmp/artifacts/pods.json oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces -o json
          queue /tmp/artifacts/persistentvolumes.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumes --all-namespaces -o json
          queue /tmp/artifacts/persistentvolumeclaims.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumeclaims --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/replicasets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get replicasets --all-namespaces -o json
          queue /tmp/artifacts/rolebindings.json oc --insecure-skip-tls-verify --request-timeout=5s get rolebindings --all-namespaces -o json
          queue /tmp/artifacts/roles.json oc --insecure-skip-tls-verify --request-timeout=5s get roles --all-namespaces -o json
          queue /tmp/artifacts/services.json oc --insecure-skip-tls-verify --request-timeout=5s get services --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/statefulsets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get statefulsets --all-namespaces -o json

          FILTER=gzip queue /tmp/artifacts/openapi.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get --raw /openapi/v2

          # gather nodes first in parallel since they may contain the most relevant debugging info
          while IFS= read -r i; do
            mkdir -p /tmp/artifacts/nodes/$i
            queue /tmp/artifacts/nodes/$i/heap oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/debug/pprof/heap
          done < /tmp/nodes

          while IFS= read -r i; do
            mkdir -p "/tmp/artifacts/nodes/${i}"
          done < /tmp/node-provider-IDs

          FILTER=gzip queue /tmp/artifacts/nodes/masters-journal.gz oc --insecure-skip-tls-verify adm node-logs --role=master --unify=false
          FILTER=gzip queue /tmp/artifacts/nodes/workers-journal.gz oc --insecure-skip-tls-verify adm node-logs --role=worker --unify=false

          # Snapshot iptables-save on each node for debugging possible kube-proxy issues
          oc --insecure-skip-tls-verify get --request-timeout=20s -n openshift-sdn -l app=sdn pods --template '{{ range .items }}{{ .metadata.name }}{{ "\n" }}{{ end }}' > /tmp/sdn-pods
          while IFS= read -r i; do
            queue /tmp/artifacts/network/iptables-save-$i oc --insecure-skip-tls-verify rsh --timeout=20 -n openshift-sdn -c sdn $i iptables-save -c
          done < /tmp/sdn-pods

          while IFS= read -r i; do
            file="$( echo "$i" | cut -d ' ' -f 3 | tr -s ' ' '_' )"
            queue /tmp/artifacts/metrics/${file}-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server "https://$( hostname ):8443" --config /etc/origin/master/admin.kubeconfig'
            queue /tmp/artifacts/metrics/${file}-controllers-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server "https://$( hostname ):8444" --config /etc/origin/master/admin.kubeconfig'
          done < /tmp/pods-api

          while IFS= read -r i; do
            file="$( echo "$i" | cut -d ' ' -f 2,3,5 | tr -s ' ' '_' )"
            FILTER=gzip queue /tmp/artifacts/pods/${file}.log.gz oc --insecure-skip-tls-verify logs --request-timeout=20s $i
            FILTER=gzip queue /tmp/artifacts/pods/${file}_previous.log.gz oc --insecure-skip-tls-verify logs --request-timeout=20s -p $i
          done < /tmp/containers

          echo "Snapshotting prometheus (may take 15s) ..."
          queue /tmp/artifacts/metrics/prometheus.tar.gz oc --insecure-skip-tls-verify exec -n openshift-monitoring prometheus-k8s-0 -- tar cvzf - -C /prometheus .

          echo "Running must-gather..."
          mkdir -p /tmp/artifacts/must-gather
          queue /tmp/artifacts/must-gather/must-gather.log oc --insecure-skip-tls-verify adm must-gather --dest-dir /tmp/artifacts/must-gather

          echo "Waiting for logs ..."
          wait

          tar -czC /tmp/artifacts/must-gather -f /tmp/artifacts/must-gather.tar.gz . &&
          rm -rf /tmp/artifacts/must-gather

          echo "Deprovisioning cluster ..."
          mock-nss.sh openshift-install --dir /tmp/artifacts/installer destroy cluster
        }

        trap 'teardown' EXIT
        trap 'jobs -p | xargs -r kill; exit 0' TERM

        for i in $(seq 1 220); do
          if [[ -f /tmp/shared/exit ]]; then
            exit 0
          fi
          sleep 60 & wait
        done
    hostAliases:
    - ip: "${BASTION_SVC_IP}"
      hostnames:
      - "${REMOTE_LIBVIRT_HOSTNAME}"
      - "alertmanager-main-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-00"
      - "api.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-00"
      - "console-openshift-console.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-00"
      - "downloads-openshift-console.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-00"
      - "grafana-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-00"
      - "oauth-openshift.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-00"
      - "prometheus-k8s-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-00"
    - ip: "${BASTION_SVC_1_IP}"
      hostnames:
      - "alertmanager-main-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-01"
      - "api.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-01"
      - "console-openshift-console.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-01"
      - "downloads-openshift-console.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-01"
      - "grafana-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-01"
      - "oauth-openshift.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-01"
      - "prometheus-k8s-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-01"
    - ip: "${BASTION_SVC_2_IP}"
      hostnames:
      - "alertmanager-main-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-02"
      - "api.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-02"
      - "console-openshift-console.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-02"
      - "downloads-openshift-console.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-02"
      - "grafana-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-02"
      - "oauth-openshift.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-02"
      - "prometheus-k8s-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-02"
    - ip: "${BASTION_SVC_3_IP}"
      hostnames:
      - "alertmanager-main-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-03"
      - "api.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-03"
      - "console-openshift-console.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-03"
      - "downloads-openshift-console.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-03"
      - "grafana-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-03"
      - "oauth-openshift.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-03"
      - "prometheus-k8s-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-03"
    - ip: "${BASTION_SVC_4_IP}"
      hostnames:
      - "alertmanager-main-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-04"
      - "api.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-04"
      - "console-openshift-console.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-04"
      - "downloads-openshift-console.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-04"
      - "grafana-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-04"
      - "oauth-openshift.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-04"
      - "prometheus-k8s-openshift-monitoring.apps.${NAMESPACE}-${JOB_NAME_HASH}.${CLUSTER_TYPE}-04"
