kind: Template
apiVersion: template.openshift.io/v1
#metadata.name and
metadata:
  name: "cluster-launch-installer-openstack-upi-e2e"
  creationTimestamp: null
parameters:
- name: JOB_NAME_SAFE
  required: true
- name: JOB_NAME_HASH
  required: true
- name: NAMESPACE
  required: true
- name: IMAGE_TESTS
  required: true
- name: IMAGE_OPENSTACK_INSTALLER
  required: true
- name: CLUSTER_TYPE
  value: "openstack"
- name: TEST_COMMAND
  required: true
- name: RELEASE_IMAGE_LATEST
  required: true
- name: OS_CLOUD
  value: openstack
- name: OS_CLIENT_CONFIG_FILE
  value: /tmp/cluster-profile/clouds.yaml
- name: OPENSTACK_EXTERNAL_NETWORK
  value: external
- name: OPENSTACK_IMAGE
  value: rhcos
- name: OPENSTACK_REGION
  value: moc-kzn
- name: OPENSTACK_FLAVOR
  value: m1.s2.xlarge
- name: BASE_DOMAIN
  value: shiftstack.devcluster.openshift.com
  required: true
- name: KURYR_ENABLED
  value: "false"
- name: BUILD_ID
  required: false
- name: DO_NOT_CREATE_DNS_RECORD
  required: false
- name: INSTALLER_SOURCE_PATH
  value: /go/src/github.com/openshift/installer
# what is USE_LEASE_CLIENT for?
- name: USE_LEASE_CLIENT

objects:

# We want the cluster to be able to access the images
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-image-puller
    namespace: ${NAMESPACE}
  roleRef:
    name: system:image-puller
  subjects:
  - kind: SystemGroup
    name: system:unauthenticated
  - kind: SystemGroup
    name: system:authenticated

# Give admin access to a known bot
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-namespace-admins
    namespace: ${NAMESPACE}
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    namespace: ci
    name: ci-chat-bot

# Define the pod consisting of three containers: setup, test, teardown
- kind: Pod
  apiVersion: v1
  metadata:
    name: ${JOB_NAME_SAFE}
    namespace: ${NAMESPACE}
    annotations:
      # we want to gather the teardown logs no matter what
      ci-operator.openshift.io/wait-for-container-artifacts: teardown
      ci-operator.openshift.io/save-container-logs: "true"
      ci-operator.openshift.io/container-sub-tests: "setup,test,teardown"
    labels:
      app: ${JOB_NAME_SAFE}-bootstrap-exporter
  spec:
    restartPolicy: Never
    activeDeadlineSeconds: 18000
    terminationGracePeriodSeconds: 900
    volumes:
    # containers mount them as /tmp/sif /tmp/artifacts /tmp/shared and /tmp/cluster-profile
    - name: shared-ignition-files
      emptyDir: {}
    - name: artifacts
      emptyDir: {}
    - name: shared-tmp
      emptyDir: {}
    - name: cluster-profile
      secret:
        secretName: ${JOB_NAME_SAFE}-cluster-profile

    # openstack-tests requires access to openstackclient/cinder
    # reuse install image which contains the required binaries.
    # The following initContainer is used to copy over the
    # latest openshift-test/oc binaries into /tmp/shared (shared-tmp volume).
    # where test, setup, and teardwon containers may use them.
    initContainers:
    - name: cp-shared
      image: ${IMAGE_TESTS}
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      command:
      - cp
      - /usr/bin/openshift-tests
      - /usr/bin/oc
      - /usr/bin/kubectl
      - /tmp/shared/

    containers:
    # setup container runs a upi install
    - name: setup
      image: ${IMAGE_OPENSTACK_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      # We use the following volumeMounts to share the common files in the
      # appropriate directories. The mounts are setup in the pod volume section.
      volumeMounts:
      - name: shared-ignition-files
        mountPath: /tmp/sif
      - name: artifacts
        mountPath: /tmp/artifacts
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-profile
        mountPath: /tmp/cluster-profile

      env:
      - name: CLUSTER_TYPE
        value: ${CLUSTER_TYPE}
      - name: CLUSTER_NAME
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: AWS_SHARED_CREDENTIALS_FILE
        value: /tmp/cluster-profile/.awscred
      - name: AWS_DEFAULT_REGION
        value: us-east-1
      - name: AWS_DEFAULT_OUTPUT
        value: json
      - name: AWS_PROFILE
        value: openshift-ci-infra
      - name: BASE_DOMAIN
        value: ${BASE_DOMAIN}
      - name: SSH_PUB_KEY_PATH
        value: /tmp/cluster-profile/ssh-publickey
      - name: SSH_PRIVATE_KEY_PATH
        value: /tmp/cluster-profile/ssh-privatekey
      - name: PULL_SECRET_PATH
        value: /tmp/cluster-profile/pull-secret
      - name: OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE
        value: ${RELEASE_IMAGE_LATEST}
      - name: OPENSHIFT_INSTALL_INVOKER
        value: openshift-internal-ci/${JOB_NAME_SAFE}/${BUILD_ID}
      - name: OPENSTACK_IMAGE
        value: ${OPENSTACK_IMAGE}
      - name: OPENSTACK_REGION
        value: ${OPENSTACK_REGION}
      - name: OPENSTACK_FLAVOR
        value: ${OPENSTACK_FLAVOR}
      - name: OPENSTACK_EXTERNAL_NETWORK
        value: ${OPENSTACK_EXTERNAL_NETWORK}
      - name: OS_CLOUD
        value: ${OS_CLOUD}
      - name: OS_CLIENT_CONFIG_FILE
        value: ${OS_CLIENT_CONFIG_FILE}
      - name: DO_NOT_CREATE_DNS_RECORD
        value: ${DO_NOT_CREATE_DNS_RECORD}
      - name: USER
        value: test
      - name: HOME
        value: /tmp
      - name: INSTALLER_SOURCE_PATH
        value: ${INSTALLER_SOURCE_PATH}

        # we must boot from performance volumes to reduce disk speed related etcd failures
      - name: OPENSTACK_MASTER_VOLUME_SIZE
        value: "25"
      - name: OPENSTACK_MASTER_VOLUME_TYPE
        value: "performance"
      - name: INSTALL_INITIAL_RELEASE
      - name: RELEASE_IMAGE_INITIAL
      command:
      - /bin/sh
      - -c
      - |
        #!/bin/sh -x
        echo "OpenStack: setup for cluster ${CLUSTER_NAME}-"

        # configure pipefail to return value from last non-zero exiting process or children
        set -euo pipefail

        # define handlers to be run when shell complets.
        # if succesfull we touch /tmp/shared/setup-success, if faile
        trap 'rc=$?; if test "${rc}" -eq 0; then touch /tmp/shared/setup-success; else touch /tmp/shared/exit /tmp/shared/setup-failed; fi; exit "${rc}"' EXIT
        trap 'CHILDREN=$(jobs -p); if test -n "${CHILDREN}"; then kill ${CHILDREN} && wait; fi' TERM

        # We have to truncate cluster name to 14 chars, because there is a limitation in the install-config
        # Now it looks like "ci-op-rl6z646h-65230".
        # We will remove "ci-op-" prefix from there to keep just last 14 characters.
        export CLUSTER_NAME=${CLUSTER_NAME:${#CLUSTER_NAME}<14?0:-14}

        GATHER_BOOTSTRAP_ARGS=
        function gather_bootstrap_and_fail() {
          if test -n "${GATHER_BOOTSTRAP_ARGS}"; then
            openshift-install --dir=/tmp/artifacts/installer gather bootstrap --key "${SSH_PRIVATE_KEY_PATH}" ${GATHER_BOOTSTRAP_ARGS}
          fi
          return 1
        }

        # copy active openshift-install binary to /tmp
        cp "$(command -v openshift-install)" /tmp
        mkdir "/tmp/artifacts/installer"

        #Pick release image to use
        if [[ -n "${INSTALL_INITIAL_RELEASE}" && -n "${RELEASE_IMAGE_INITIAL}" ]]; then
        echo "Installing from initial release ${RELEASE_IMAGE_INITIAL}"
        OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE="${RELEASE_IMAGE_INITIAL}"
        else
        echo "Installing from release ${RELEASE_IMAGE_LATEST}"
        fi

        # set expiration date, ssh pub key and openshift secret
        export EXPIRATION_DATE=$(date -d '4 hours' --iso=minutes --utc)
        export SSH_PUB_KEY=$(cat "${SSH_PUB_KEY_PATH}")
        export PULL_SECRET=$(cat "${PULL_SECRET_PATH}")

        # move private key to ~/.ssh/ so that installer can use it to gather logs on bootstrap failure
        mkdir -p ~/.ssh
        cp "${SSH_PRIVATE_KEY_PATH}" ~/.ssh/id_rsa
        chmod 0600 ~/.ssh/id_rsa

        # create api and ingress FIPS
        LB_FIP_AND_ID=$(openstack floating ip create --description api.$CLUSTER_NAME.$BASE_DOMAIN $OPENSTACK_EXTERNAL_NETWORK --format value -c 'floating_ip_address' -c 'id')
        LB_FIP=$(echo $LB_FIP_AND_ID |awk '{print $1}')
        LB_FIP_UID=$(echo $LB_FIP_AND_ID |awk '{print $2}')
        echo $LB_FIP_UID > /tmp/shared/LB_FIP_UID

        INGRESS_FIP_AND_ID=$(openstack floating ip create --description ingress.$CLUSTER_NAME.$BASE_DOMAIN $OPENSTACK_EXTERNAL_NETWORK --format value -c 'floating_ip_address' -c 'id')
        INGRESS_FIP=$(echo $INGRESS_FIP_AND_ID |awk '{print $1}')
        INGRESS_FIP_UID=$(echo $INGRESS_FIP_AND_ID |awk '{print $2}')
        echo $INGRESS_FIP_UID > /tmp/shared/INGRESS_FIP_UID


        if [ -z "$DO_NOT_CREATE_DNS_RECORD" ]; then
        echo "Creating DNS record for api.$CLUSTER_NAME.$BASE_DOMAIN. -> $LB_FIP (${LB_FIP_UID})"
        cat > /tmp/artifacts/installer/api-record.json <<EOF
        {
        "Comment": "Create the public OpenShift API record",
        "Changes": [{
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "api.$CLUSTER_NAME.$BASE_DOMAIN.",
                  "Type": "A",
                  "TTL": 300,
                  "ResourceRecords": [{"Value": "$LB_FIP"}]
                }
        }]}
        EOF
        export HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name "shiftstack.devcluster.openshift.com" | python -c 'import json,sys;print json.load(sys.stdin)["HostedZones"][0]["Id"].split("/")[-1]')
        aws route53 change-resource-record-sets --hosted-zone-id "$HOSTED_ZONE_ID" --change-batch file:///tmp/artifacts/installer/api-record.json
        else
        echo "DNS record for api.$CLUSTER_NAME.$BASE_DOMAIN. -> $LB_FIP was NOT created!"
        fi


        echo "Creating install_config.yaml"
        # Create install-config.yaml.bkk to use as install-config.yaml
        # Some of the next steps will delete the install-config.yaml thus we create a permanent one.
        base_domain="${BASE_DOMAIN:-origin-ci-int-gce.dev.openshift.com}"
        cat > /tmp/artifacts/installer/install-config.yaml.bkk << EOF
        apiVersion: v1
        baseDomain: ${BASE_DOMAIN}
        controlPlane:
        name: master
        metadata:
          name: ${CLUSTER_NAME}
        platform:
          openstack:
            cloud:            ${OS_CLOUD}
            externalNetwork:  ${OPENSTACK_EXTERNAL_NETWORK}
            computeFlavor:    ${OPENSTACK_FLAVOR}
            region:           ${OPENSTACK_REGION}
            lbFloatingIP:     ${LB_FIP}
        pullSecret: >
          ${PULL_SECRET}
        sshKey: |
          ${SSH_PUB_KEY}
        EOF

        # Create and edit manifest files
        echo "Creating manifest files"
        cp /tmp/artifacts/installer/install-config.yaml.bkk /tmp/artifacts/installer/install-config.yaml
        openshift-install --dir=/tmp/artifacts/installer create manifests
        #Remove Machines from manifests
        rm -f /tmp/artifacts/installer/openshift/99_openshift-cluster-api_master-machines-*.yaml
        #Remove MachineSets
        rm -f /tmp/artifacts/installer/openshift/99_openshift-cluster-api_worker-machineset-*.yaml
        #Make control-plane nodes unscheduable
        sed -i "s;mastersSchedulable: true;mastersSchedulable: false;g" /tmp/artifacts/installer/manifests/cluster-scheduler-02-config.yml

        # Create ignition files
        echo "Creating ignition configs"
        cp /tmp/artifacts/installer/install-config.yaml.bkk /tmp/artifacts/installer/install-config.yaml
        openshift-install --dir=/tmp/artifacts/installer create ignition-configs &
        wait "$!"

        # begin bootstrapping
        cp /tmp/artifacts/installer/bootstrap.ign /tmp/sif
        BOOTSTRAP_URI="https://${JOB_NAME_SAFE}-bootstrap-exporter-${NAMESPACE}.svc.ci.openshift.org/bootstrap.ign"



        # begin bootstrapping
        export UPI_DIR="${INSTALLER_SOURCE_PATH}/upi/${CLUSTER_TYPE}"
        echo "OpenStack UPI directory: '$UPI_DIR'"

        #prepair inventory.yaml
        cp ${UPI_DIR}/inventory.yaml ${UPI_DIR}/inventory.yaml.bkk
        sed -i "s/os_flavor_master.*/os_flavor_master: \'${OPENSTACK_FLAVOR}\'/g" ${UPI_DIR}/inventory.yaml
        sed -i "s/os_flavor_worker.*/os_flavor_worker: \'${OPENSTACK_FLAVOR}\'/g" ${UPI_DIR}/inventory.yaml
        sed -i "s/os_image_rhcos.*/os_image_rhcos: \'${OPENSTACK_IMAGE}\'/g" ${UPI_DIR}/inventory.yaml
        sed -i "s/os_external_network.*/os_external_network: \'${OPENSTACK_EXTERNAL_NETWORK}\'/g" ${UPI_DIR}/inventory.yaml
        sed -i "s/os_api_fip.*/os_api_fip: \'${LB_FIP}\'/g" ${UPI_DIR}/inventory.yaml
        sed -i "s/os_ingress_fip.*/os_ingress_fip: \'${INGRESS_FIP}\'/g" ${UPI_DIR}/inventory.yaml
        sed -i "s/os_region_name.*/os_region_name: \'${OPENSTACK_REGION}\'/g" ${UPI_DIR}/inventory.yaml


        # The metadata.json file needs to be in the same directory as playbooks
        cp /tmp/artifacts/installer/metadata.json ${UPI_DIR}/

        # We first do a dry run with --list-tasks to catch any configuration errors right up front
        # before we start the full run.
        ansible-playbook -vvv -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/01_security-groups.yaml" --list-tasks
        ansible-playbook -vvv -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/02_network.yaml" --list-tasks
        ansible-playbook -vvv -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/03_bootstrap.yaml" --list-tasks
        ansible-playbook -vvv -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/04_control-plane.yaml" --list-tasks
        ansible-playbook -vvv -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/05_compute-nodes.yaml" --list-tasks



        # Now we do the real run
        ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/01_security-groups.yaml"
        ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/02_network.yaml"
        ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/03_bootstrap.yaml"
        ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/04_control-plane.yaml"
        ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/05_compute-nodes.yaml"

        echo "Waiting for bootstrap to complete"
        openshift-install --dir=/tmp/artifacts/installer wait-for bootstrap-complete &
        wait "$!" || gather_bootstrap_and_fail

        echo "Bootstrap complete, destroying bootstrap resources"
        echo "TODO: OpenStack: Delete the bootstrap resources"

        function approve_csrs() {
          while true; do
          if [[ ! -f /tmp/install-complete ]]; then
          oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs --no-run-if-empty oc adm certificate approve
          sleep 15 & wait
          continue
          else
          break
          fi
          done
        }

        function update_image_registry() {
         while true; do
          sleep 10;
          oc get configs.imageregistry.operator.openshift.io/cluster > /dev/null && break
         done
         oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed","storage":{"emptyDir":{}}}}'
         }

         echo "Approving pending CSRs"
         export KUBECONFIG=/tmp/artifacts/installer/auth/kubeconfig
         approve_csrs &

         echo "Completing UPI setup"
         openshift-install --dir=/tmp/artifacts/installer wait-for install-complete 2>&1 | grep -v password &
         wait "$!"
         touch /tmp/install-complete

    # Once the cluster is up, executes shared tests
    - name: test
      image: ${IMAGE_OPENSTACK_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      resources:
        requests:
          cpu: 3
          memory: 600Mi
        limits:
          memory: 4Gi
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-profile
        mountPath: /tmp/cluster-profile
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
        - name: OS_CLOUD
          value: ${OS_CLOUD}
        - name: OS_CLIENT_CONFIG_FILE
          value: ${OS_CLIENT_CONFIG_FILE}
        - name: ARTIFACT_DIR
        value: /tmp/artifacts
      - name: HOME
        value: /tmp/home
      - name: KUBECONFIG
        value: /tmp/artifacts/installer/auth/kubeconfig
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        export PATH=/tmp/shared:/usr/libexec/origin:$PATH

        trap 'touch /tmp/shared/exit' EXIT ERR
        trap 'jobs -p | xargs -r kill || true; exit 0' TERM

        mkdir -p "${HOME}"

        # wait for the API to come up
        while true; do
          echo "waiting for setup container to finish"
          if [[ -f /tmp/shared/setup-failed ]]; then
            echo "Setup reported a failure, do not report test failure" 2>&1
            exit 0
          fi
          if [[ -f /tmp/shared/exit ]]; then
            echo "Another process exited" 2>&1
            exit 1
          fi
          if [[ ! -f /tmp/shared/setup-success ]]; then
            sleep 15 & wait
            continue
          fi
          # don't let clients impact the global kubeconfig
          cp "${KUBECONFIG}" /tmp/admin.kubeconfig
          export KUBECONFIG=/tmp/admin.kubeconfig
          break
        done

        # if the cluster profile included an insights secret, install it to the cluster to
        # report support data from the support-operator
        if [[ -f /tmp/cluster-profile/insights-live.yaml ]]; then
          oc create -f /tmp/cluster-profile/insights-live.yaml || true
        fi

        # set up env vars
        export KUBE_SSH_BASTION="$( oc --insecure-skip-tls-verify get node -l node-role.kubernetes.io/master -o 'jsonpath={.items[0].status.addresses[?(@.type=="ExternalIP")].address}' ):22"
        export KUBE_SSH_KEY_PATH=/tmp/cluster-profile/ssh-privatekey
        export KUBE_SSH_USER=core
        mkdir -p ~/.ssh
        cp /tmp/cluster-profile/ssh-privatekey ~/.ssh/kube_openstack_rsa || true
        export TEST_PROVIDER='{"type":"openstack"}'

        # set up openstack env vars for testing
        function get_clouds_param() {
          awk '/^\s+'$1':/ { print $2 }' /tmp/cluster-profile/clouds.yaml | sed -e 's/^"//' -e 's/"$//'
        }

        XTRACE_ENABLED=0
        if set -o | grep xtrace.*on &>/dev/null; then
          XTRACE_ENABLED=1
        fi

#OS_CLOUD and OS_CONFIG_FILE are set we don't need to look for the os environments
# set +x #make extra sure we aren't echo'ing these to stdout
# export OS_AUTH_URL="$(get_clouds_param 'auth_url')"
# export OS_PROJECT_ID="$(get_clouds_param 'project_id')"
# export OS_PROJECT_NAME="$(get_clouds_param 'project_name')"
# export OS_USERNAME="$(get_clouds_param 'username')"
# export OS_PASSWORD="$(get_clouds_param 'password')"
# export OS_REGION_NAME="$(get_clouds_param 'region_name')"
# export OS_ENDPOINT_TYPE="$(get_clouds_param 'interface')"
# export OS_IDENTITY_API_VERSION="$(get_clouds_param 'identity_api_version')"
# export OS_USER_DOMAIN_NAME="$(get_clouds_param 'user_domain_name')"
        if [[ "$XTRACE_ENABLED" == 1 ]]; then
          set -x
        fi

        mkdir -p /tmp/output
        cd /tmp/output

        function run-upgrade-tests() {
          openshift-tests run-upgrade "${TEST_SUITE}" --to-image "${RELEASE_IMAGE_LATEST}" \
            --options "${TEST_OPTIONS:-}" \
            --provider "${TEST_PROVIDER:-}" -o /tmp/artifacts/e2e.log --junit-dir /tmp/artifacts/junit
        }

        function run-tests() {
          openshift-tests run "${TEST_SUITE}" \
            --provider "${TEST_PROVIDER:-}" -o /tmp/artifacts/e2e.log --junit-dir /tmp/artifacts/junit
        }

        function run-minimal-tests() {
          # Only execute Smoke tests while the test infrastructure is getting
          # prepared to run the actual suite reliably.
          openshift-tests run openshift/conformance/parallel --dry-run |
            grep 'Smoke' |
          openshift-tests run -o /tmp/artifacts/e2e.log \
            --junit-dir /tmp/artifacts/junit -f -
          return 0
        }

        function run-no-tests() {
          # This can be used if we just want to check the installer exits 0
          echo "WARNING: No tests were run against the installed cluster"
          return 0
        }

        ${TEST_COMMAND}


    # teardown container performs cleanup of all created resources
    - name: teardown
      image: ${IMAGE_OPENSTACK_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-profile
        mountPath: /tmp/cluster-profile
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: CLUSTER_TYPE
        value: ${CLUSTER_TYPE}
      - name: CLUSTER_NAME
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: AWS_SHARED_CREDENTIALS_FILE
        value: /tmp/cluster-profile/.awscred
      - name: AWS_DEFAULT_REGION
        value: us-east-1
      - name: AWS_DEFAULT_OUTPUT
        value: json
      - name: AWS_PROFILE
        value: openshift-ci-infra
      - name: KUBECONFIG
        value: /tmp/artifacts/installer/auth/kubeconfig
      - name: OS_CLOUD
        value: ${OS_CLOUD}
      - name: OS_CLIENT_CONFIG_FILE
        value: ${OS_CLIENT_CONFIG_FILE}
      - name: SSH_PRIVATE_KEY_PATH
        value: /tmp/cluster-profile/ssh-privatekey
      - name: DO_NOT_CREATE_DNS_RECORD
        value: ${DO_NOT_CREATE_DNS_RECORD}
      - name: USER
        value: test
      - name: HOME
        value: /tmp
      command:
      - /bin/sh
      - -c
      - |
        #!/bin/bash -x
        set -eo pipefail

        function queue() {
          local TARGET="${1}"
          echo target: $TARGET
          shift
          local LIVE="$(jobs | wc -l)"
          echo live $LIVE
          while [[ "${LIVE}" -ge 45 ]]; do
            sleep 1
            LIVE="$(jobs | wc -l)"
          done
          echo "${@}"
          if [[ -n "${FILTER:-}" ]]; then
            "${@}" | "${FILTER}" >"${TARGET}" &
          else
            "${@}" >"${TARGET}" &
          fi
        }

        function teardown() {
          set +e
          echo teardown has been called.
          touch /tmp/shared/exit
          export PATH=$PATH:/tmp/shared


          # collect logs from the proxy
          if [ -f "/tmp/artifacts/installer/proxyip" ]
          then
            proxy_ip="$(cat /tmp/artifacts/installer/proxyip)"
            mkdir -p /tmp/artifacts/proxy

            if ! whoami &> /dev/null; then
              if [ -w /etc/passwd ]; then
                echo "${USER_NAME:-default}:x:$(id -u):0:${USER_NAME:-default} user:${HOME}:/sbin/nologin" >> /etc/passwd
              fi
            fi
            eval $(ssh-agent)
            ssh-add /etc/openshift-installer/ssh-privatekey
            ssh -A -o PreferredAuthentications=publickey -o StrictHostKeyChecking=false -o UserKnownHostsFile=/dev/null core@${proxy_ip} 'journalctl -u squid' > /tmp/artifacts/proxy/squid.service

          fi

          echo "Gathering artifacts ..."
          mkdir -p /tmp/artifacts/pods /tmp/artifacts/nodes /tmp/artifacts/metrics /tmp/artifacts/bootstrap /tmp/artifacts/network

          echo "Gathering openstack server list"
          openstack server list | grep $CLUSTER_NAME >/tmp/artifacts/openstack_nodes.log

          echo "Gathering openstack server details"
          for server in $(openstack server list -c Name -f value | grep $CLUSTER_NAME | sort); do
              echo -e "\n$ openstack server show $server" >>/tmp/artifacts/openstack_nodes.log
              openstack server show $server >>/tmp/artifacts/openstack_nodes.log
          done

          # Get bootstrap nova logs
          # NOTE(shadower): The server names are in the form
          # `$CLUSTER_NAME-fmszv-bootstrap`. I could not find how to
          # get the middle part (`fmszv`) (it's not in the shell
          # environment here) so we'll list all the servers and look
          # the bootstrap name up that way.
          # (adduarte) I think the fmszv is the ${JOB_NAME_SAFE} from the pod
          echo "Gathering openstack server logs"
          echo "CLUSTER_NAME: ${CLUSTER_NAME}"
          local BOOTSTRAP_NAME=$(openstack server list --format value --column Name | grep "${CLUSTER_NAME}-.*-bootstrap")
          if [ -n "$BOOTSTRAP_NAME" ]; then
              openstack console log show "$BOOTSTRAP_NAME" &>/tmp/artifacts/bootstrap/nova.log
          fi

          echo "Gathering openshift nodes"
          oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o jsonpath --template '{range .items[*]}{.metadata.name}{"\n"}{end}' > /tmp/nodes
          echo "Gathering openshift pods"
          oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces --template '{{ range .items }}{{ $name := .metadata.name }}{{ $ns := .metadata.namespace }}{{ range .spec.containers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ "\n" }}{{ end }}{{ range .spec.initContainers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ "\n" }}{{ end }}{{ end }}' > /tmp/containers
          oc --insecure-skip-tls-verify --request-timeout=5s get pods -l openshift.io/component=api --all-namespaces --template '{{ range .items }}-n {{ .metadata.namespace }} {{ .metadata.name }}{{ "\n" }}{{ end }}' > /tmp/pods-api

          queue /tmp/artifacts/config-resources.json oc --insecure-skip-tls-verify --request-timeout=5s get apiserver.config.openshift.io authentication.config.openshift.io build.config.openshift.io console.config.openshift.io dns.config.openshift.io featuregate.config.openshift.io image.config.openshift.io infrastructure.config.openshift.io ingress.config.openshift.io network.config.openshift.io oauth.config.openshift.io project.config.openshift.io scheduler.config.openshift.io -o json
          queue /tmp/artifacts/apiservices.json oc --insecure-skip-tls-verify --request-timeout=5s get apiservices -o json
          queue /tmp/artifacts/clusteroperators.json oc --insecure-skip-tls-verify --request-timeout=5s get clusteroperators -o json
          queue /tmp/artifacts/clusterversion.json oc --insecure-skip-tls-verify --request-timeout=5s get clusterversion -o json
          queue /tmp/artifacts/configmaps.json oc --insecure-skip-tls-verify --request-timeout=5s get configmaps --all-namespaces -o json
          queue /tmp/artifacts/credentialsrequests.json oc --insecure-skip-tls-verify --request-timeout=5s get credentialsrequests --all-namespaces -o json
          queue /tmp/artifacts/csr.json oc --insecure-skip-tls-verify --request-timeout=5s get csr -o json
          queue /tmp/artifacts/endpoints.json oc --insecure-skip-tls-verify --request-timeout=5s get endpoints --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/deployments.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get deployments --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/daemonsets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get daemonsets --all-namespaces -o json
          queue /tmp/artifacts/events.json oc --insecure-skip-tls-verify --request-timeout=5s get events --all-namespaces -o json
          queue /tmp/artifacts/kubeapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get kubeapiserver -o json
          queue /tmp/artifacts/kubecontrollermanager.json oc --insecure-skip-tls-verify --request-timeout=5s get kubecontrollermanager -o json
          queue /tmp/artifacts/machineconfigpools.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigpools -o json
          queue /tmp/artifacts/machineconfigs.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigs -o json
          queue /tmp/artifacts/machinesets.json oc --insecure-skip-tls-verify --request-timeout=5s get machinesets -A -o json
          queue /tmp/artifacts/machines.json oc --insecure-skip-tls-verify --request-timeout=5s get machines -A -o json
          queue /tmp/artifacts/namespaces.json oc --insecure-skip-tls-verify --request-timeout=5s get namespaces -o json
          queue /tmp/artifacts/nodes.json oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o json
          queue /tmp/artifacts/openshiftapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get openshiftapiserver -o json
          queue /tmp/artifacts/pods.json oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces -o json
          queue /tmp/artifacts/persistentvolumes.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumes --all-namespaces -o json
          queue /tmp/artifacts/persistentvolumeclaims.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumeclaims --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/replicasets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get replicasets --all-namespaces -o json
          queue /tmp/artifacts/rolebindings.json oc --insecure-skip-tls-verify --request-timeout=5s get rolebindings --all-namespaces -o json
          queue /tmp/artifacts/roles.json oc --insecure-skip-tls-verify --request-timeout=5s get roles --all-namespaces -o json
          queue /tmp/artifacts/services.json oc --insecure-skip-tls-verify --request-timeout=5s get services --all-namespaces -o json
          FILTER=gzip queue /tmp/artifacts/statefulsets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get statefulsets --all-namespaces -o json

          FILTER=gzip queue /tmp/artifacts/openapi.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get --raw /openapi/v2

          # gather nodes first in parallel since they may contain the most relevant debugging info
          while IFS= read -r i; do
            mkdir -p /tmp/artifacts/nodes/$i
            queue /tmp/artifacts/nodes/$i/nova.log openstack console log show $i
            queue /tmp/artifacts/nodes/$i/heap oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/debug/pprof/heap
          done < /tmp/nodes

          FILTER=gzip queue /tmp/artifacts/nodes/masters-journal.gz oc --insecure-skip-tls-verify adm node-logs --role=master --unify=false
          FILTER=gzip queue /tmp/artifacts/nodes/workers-journal.gz oc --insecure-skip-tls-verify adm node-logs --role=worker --unify=false

          # Snapshot iptables-save on each node for debugging possible kube-proxy issues
          oc --insecure-skip-tls-verify get --request-timeout=20s -n openshift-sdn -l app=sdn pods --template '{{ range .items }}{{ .metadata.name }}{{ "\n" }}{{ end }}' > /tmp/sdn-pods
          while IFS= read -r i; do
            queue /tmp/artifacts/network/iptables-save-$i oc --insecure-skip-tls-verify rsh --timeout=20 -n openshift-sdn -c sdn $i iptables-save -c
          done < /tmp/sdn-pods

          while IFS= read -r i; do
            file="$( echo "$i" | cut -d ' ' -f 3 | tr -s ' ' '_' )"
            queue /tmp/artifacts/metrics/${file}-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server "https://$( hostname ):8443" --config /etc/origin/master/admin.kubeconfig'
            queue /tmp/artifacts/metrics/${file}-controllers-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server "https://$( hostname ):8444" --config /etc/origin/master/admin.kubeconfig'
          done < /tmp/pods-api

          while IFS= read -r i; do
            file="$( echo "$i" | cut -d ' ' -f 2,3,5 | tr -s ' ' '_' )"
            FILTER=gzip queue /tmp/artifacts/pods/${file}.log.gz oc --insecure-skip-tls-verify logs --request-timeout=20s $i
            FILTER=gzip queue /tmp/artifacts/pods/${file}_previous.log.gz oc --insecure-skip-tls-verify logs --request-timeout=20s -p $i
          done < /tmp/containers

          echo "Snapshotting prometheus (may take 15s) ..."
          queue /tmp/artifacts/metrics/prometheus.tar.gz oc --insecure-skip-tls-verify exec -n openshift-monitoring prometheus-k8s-0 -- tar cvzf - -C /prometheus .

          # move private key to ~/.ssh/ so that installer can use it to gather logs
          mkdir -p ~/.ssh
          cp "${SSH_PRIVATE_KEY_PATH}" ~/.ssh/id_rsa
          chmod 0600 ~/.ssh/id_rsa

          echo "Running must-gather..."
          mkdir -p /tmp/artifacts/must-gather
          queue /tmp/artifacts/must-gather/must-gather.log oc --insecure-skip-tls-verify adm must-gather --dest-dir /tmp/artifacts/must-gather

          echo "Waiting for logs ..."
          wait


          echo "Deprovisioning openstack cluster ..."
          if [ -z "$DO_NOT_CREATE_DNS_RECORD" ]; then
          echo "Removing entries from DNS ..."
          export HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name "shiftstack.devcluster.openshift.com" | python -c 'import json,sys;print json.load(sys.stdin)["HostedZones"][0]["Id"].split("/")[-1]')
          sed -e's/UPSERT/DELETE/g' /tmp/artifacts/installer/api-record.json > /tmp/artifacts/installer/delete-api-record.json
          aws route53 change-resource-record-sets --hosted-zone-id "$HOSTED_ZONE_ID" --change-batch file:///tmp/artifacts/installer/delete-api-record.json
          sed -e's/UPSERT/DELETE/g' /tmp/artifacts/installer/ingress-record.json > /tmp/artifacts/installer/delete-ingress-record.json
          aws route53 change-resource-record-sets --hosted-zone-id "$HOSTED_ZONE_ID" --change-batch file:///tmp/artifacts/installer/delete-ingress-record.json
          else
          echo "There are no DNS entries to remove"
          fi

          LB_FIP_UID=`cat /tmp/shared/LB_FIP_UID`
          echo "Deleting api FIP ... for ${CLUSTER_NAME} with UID: ${LB_FIP_UID}"
          openstack floating ip delete $LB_FIP_UID

          INGRESS_FIP_UID=`cat /tmp/shared/INGRESS_FIP_UID`
          echo "Deleting ingress FIP using UID: ${INGRESS_FIP_UID}"
          openstack floating ip delete $INGRESS_FIP_UID

          #openshift-install --dir /tmp/artifacts/installer destroy cluster

          #run teardown playbooks for upi
          inventory.yaml is not defined. localhost is the implied host? we need to test.
          ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/down-06_load-balancers.yaml"
          ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/down-05_compute-nodes.yaml"
          ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/down-04_control-plane.yaml"
          ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/down-03_bootstrap.yaml"
          ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/down-02_network.yaml"
          ansible-playbook -i "${UPI_DIR}/inventory.yaml" "${UPI_DIR}/down-01_security-groups.yaml"
          verify_openstack_resources_where_destroyed
          echo "Teardown completed succesfully"
        }

        function verify_openstack_resources_where_destroyed() {
            echo "TODO: verify_openstack_resoruces_where_destroyed has not been implemented."
        }

        #start of teardown
        # We have to truncate cluster name to 14 chars, because there is a limitation in the install-config
        # Now it looks like "ci-op-rl6z646h-65230".
        # We will remove "ci-op-" prefix from there to keep just last 14 characters.
        export CLUSTER_NAME=${CLUSTER_NAME:${#CLUSTER_NAME}<14?0:-14}


        trap 'teardown' EXIT
        trap 'jobs -p | xargs -r kill || true; exit 0' TERM

        # we wait for one of the containers to flag a /tmp/shared/exit, then exit (triggering teardown)
        for i in $(seq 1 220); do
          echo Waiting for /tmp/shared/exit
          if [[ -f /tmp/shared/exit ]]; then
            exit 0
          fi
          sleep 60 & wait
        done