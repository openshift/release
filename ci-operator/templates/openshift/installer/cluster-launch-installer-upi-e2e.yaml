kind: Template
apiVersion: template.openshift.io/v1

parameters:
- name: JOB_NAME
  required: true
- name: JOB_NAME_SAFE
  required: true
- name: JOB_NAME_HASH
  required: true
- name: NAMESPACE
  required: true
- name: IMAGE_FORMAT
- name: IMAGE_TESTS
  required: true
- name: IMAGE_UPI_INSTALLER
  required: true
- name: CLUSTER_TYPE
  required: true
- name: TEST_COMMAND
  required: true
- name: RELEASE_IMAGE_LATEST
  required: true
- name: BASE_DOMAIN
- name: BUILD_ID
  required: false
- name: CLUSTER_VARIANT
- name: PROXY_IMAGE
  value: registry.ci.openshift.org/origin/4.2:egress-http-proxy
- name: USE_LEASE_CLIENT

objects:

# We want the cluster to be able to access these images
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-image-puller
    namespace: ${NAMESPACE}
  roleRef:
    name: system:image-puller
  subjects:
  - kind: SystemGroup
    name: system:unauthenticated
  - kind: SystemGroup
    name: system:authenticated

# Give admin access to a known bot
- kind: RoleBinding
  apiVersion: authorization.openshift.io/v1
  metadata:
    name: ${JOB_NAME_SAFE}-namespace-admins
    namespace: ${NAMESPACE}
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    namespace: ci
    name: ci-chat-bot

# Route for boostrap ignition file
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${JOB_NAME_SAFE}-bootstrap-exporter
    namespace: ${NAMESPACE}
  spec:
    host: ${JOB_NAME_SAFE}-bootstrap-exporter-${NAMESPACE}.svc.ci.openshift.org
    to:
      name: ${JOB_NAME_SAFE}-bootstrap-exporter
    tls:
      termination: Edge
      insecureEdgeTerminationPolicy: Redirect

# Service for ignition file
- apiVersion: v1
  kind: Service
  metadata:
    name: ${JOB_NAME_SAFE}-bootstrap-exporter
    namespace: ${NAMESPACE}
  spec:
    selector:
      app: ${JOB_NAME_SAFE}-bootstrap-exporter
    ports:
    - port: 80
      targetPort: 8080

# The e2e pod spins up a cluster, runs e2e tests, and then cleans up the cluster.
- kind: Pod
  apiVersion: v1
  metadata:
    name: ${JOB_NAME_SAFE}
    namespace: ${NAMESPACE}
    annotations:
      # we want to gather the teardown logs no matter what
      ci-operator.openshift.io/wait-for-container-artifacts: teardown
      ci-operator.openshift.io/save-container-logs: "true"
      ci-operator.openshift.io/container-sub-tests: "setup,test,teardown"
    labels:
      app: ${JOB_NAME_SAFE}-bootstrap-exporter
  spec:
    restartPolicy: Never
    activeDeadlineSeconds: 21600
    terminationGracePeriodSeconds: 900
    volumes:
    - name: shared-ignition-files
      emptyDir: {}
    - name: artifacts
      emptyDir: {}
    - name: shared-tmp
      emptyDir: {}
    - name: cluster-profile
      secret:
        secretName: ${JOB_NAME_SAFE}-cluster-profile

    containers:
    - name: ignition-exporter
      image: registry.ci.openshift.org/openshift/origin-v4.0:artifacts
      volumeMounts:
      - name: shared-ignition-files
        mountPath: /srv
      - name: shared-tmp
        mountPath: /tmp/shared
      workingDir: /srv
      command:
      - /bin/bash
      - -c
      args:
      - |
        #!/bin/bash
        set -euo pipefail
        cat <<END >>/tmp/serve.py
        import os, SocketServer, SimpleHTTPServer

        addr = ('', 8080)
        httpd = SocketServer.TCPServer(addr, SimpleHTTPServer.SimpleHTTPRequestHandler)
        while not os.path.isfile("/tmp/shared/exit"):
            httpd.handle_request()
        END
        python /tmp/serve.py
      ports:
      - containerPort: 8080
        protocol: TCP
      livenessProbe:
        httpGet:
          path: /
          port: 8080
          scheme: HTTP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8080
          scheme: HTTP
      resources:
        requests:
          cpu: 50m
          memory: 50Mi

    # Once the cluster is up, executes shared tests
    - name: test
      image: ${IMAGE_TESTS}
      terminationMessagePolicy: FallbackToLogsOnError
      resources:
        requests:
          cpu: 1
          memory: 600Mi
        limits:
          memory: 4Gi
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-profile
        mountPath: /tmp/cluster
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: AWS_REGION
        value: us-east-1
      - name: AWS_SHARED_CREDENTIALS_FILE
        value: /tmp/cluster/.awscred
      - name: AZURE_AUTH_LOCATION
        value: /tmp/cluster/osServicePrincipal.json
      - name: GCP_SHARED_CREDENTIALS_FILE
        value: /tmp/cluster/gce.json
      - name: ARTIFACT_DIR
        value: /tmp/artifacts
      - name: HOME
        value: /tmp/home
      - name: IMAGE_FORMAT
        value: ${IMAGE_FORMAT}
      - name: KUBECONFIG
        value: /tmp/artifacts/installer/auth/kubeconfig
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        export PATH=/usr/libexec/origin:$PATH

        trap 'touch /tmp/shared/exit' EXIT
        trap 'jobs -p | xargs -r kill || true; exit 0' TERM

        mkdir -p "${HOME}"

        # Share oc with other containers
        cp "$(command -v oc)" /tmp/shared

        # wait for the API to come up
        while true; do
          if [[ -f /tmp/shared/setup-failed ]]; then
            echo "Setup reported a failure, do not report test failure" 2>&1
            exit 0
          fi
          if [[ -f /tmp/shared/exit ]]; then
            echo "Another process exited" 2>&1
            exit 1
          fi
          if [[ ! -f /tmp/shared/setup-success ]]; then
            sleep 15 & wait
            continue
          fi
          # don't let clients impact the global kubeconfig
          cp "${KUBECONFIG}" /tmp/admin.kubeconfig
          export KUBECONFIG=/tmp/admin.kubeconfig
          break
        done

        # if the cluster profile included an insights secret, install it to the cluster to
        # report support data from the support-operator
        if [[ -f /tmp/cluster/insights-live.yaml ]]; then
          oc create -f /tmp/cluster/insights-live.yaml || true
        fi

        function setup-google-cloud-sdk() {
          pushd /tmp
          curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-256.0.0-linux-x86_64.tar.gz
          tar -xzf google-cloud-sdk-256.0.0-linux-x86_64.tar.gz
          export PATH=$PATH:/tmp/google-cloud-sdk/bin
          mkdir gcloudconfig
          export CLOUDSDK_CONFIG=/tmp/gcloudconfig
          gcloud auth activate-service-account --key-file="${GCP_SHARED_CREDENTIALS_FILE}"
          gcloud config set project openshift-gce-devel-ci
          popd
        }

        # set up cloud-provider-specific env vars
        export KUBE_SSH_BASTION="$( oc --insecure-skip-tls-verify get node -l node-role.kubernetes.io/master -o 'jsonpath={.items[0].status.addresses[?(@.type=="ExternalIP")].address}' ):22"
        export KUBE_SSH_KEY_PATH=/tmp/cluster/ssh-privatekey
        if [[ "${CLUSTER_TYPE}" == "gcp" ]]; then
          export GOOGLE_APPLICATION_CREDENTIALS="${GCP_SHARED_CREDENTIALS_FILE}"
          export KUBE_SSH_USER=core
          mkdir -p ~/.ssh
          cp /tmp/cluster/ssh-privatekey ~/.ssh/google_compute_engine || true
          export TEST_PROVIDER='{"type":"gce","region":"us-east1","multizone": true,"multimaster":true,"projectid":"openshift-gce-devel-ci"}'
        elif [[ "${CLUSTER_TYPE}" == "aws" ]]; then
          mkdir -p ~/.ssh
          cp /tmp/cluster/ssh-privatekey ~/.ssh/kube_aws_rsa || true
          export PROVIDER_ARGS="-provider=aws -gce-zone=us-east-1"
          # TODO: make openshift-tests auto-discover this from cluster config
          REGION="$(oc get -o jsonpath='{.status.platformStatus.aws.region}' infrastructure cluster)"
          ZONE="$(oc get -o jsonpath='{.items[0].metadata.labels.failure-domain\.beta\.kubernetes\.io/zone}' nodes)"
          export TEST_PROVIDER="{\"type\":\"aws\",\"region\":\"${REGION}\",\"zone\":\"${ZONE}\",\"multizone\":true,\"multimaster\":true}"
          export KUBE_SSH_USER=core
        elif [[ "${CLUSTER_TYPE}" == "azure4" ]]; then
          export TEST_PROVIDER='azure'
        elif [[ "${CLUSTER_TYPE}" == "openstack" ]]; then
          mkdir -p ~/.ssh
          cp /tmp/cluster/ssh-privatekey ~/.ssh/kube_openstack_rsa || true
        fi

        if [[ "${CLUSTER_TYPE}" == "gcp" ]]; then
          setup-google-cloud-sdk
        fi

        mkdir -p /tmp/output
        cd /tmp/output

        function run-upgrade-tests() {
          openshift-tests run-upgrade "${TEST_SUITE}" --to-image "${IMAGE:-${RELEASE_IMAGE_LATEST}}" \
            --options "${TEST_UPGRADE_OPTIONS:-}" \
            --provider "${TEST_PROVIDER:-}" -o ${ARTIFACT_DIR}/e2e.log --junit-dir ${ARTIFACT_DIR}/junit
        }

        function run-tests() {
          openshift-tests run "${TEST_SUITE}" \
            --provider "${TEST_PROVIDER:-}" -o ${ARTIFACT_DIR}/e2e.log --junit-dir ${ARTIFACT_DIR}/junit
        }

        ${TEST_COMMAND}

    # Runs an install
    - name: setup
      image: ${IMAGE_UPI_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp
      - name: shared-ignition-files
        mountPath: /srv
      - name: cluster-profile
        mountPath: /etc/openshift-installer
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: ARTIFACT_DIR
        value: /tmp/artifacts
      - name: TYPE
        value: ${CLUSTER_TYPE}
      - name: AWS_SHARED_CREDENTIALS_FILE
        value: /etc/openshift-installer/.awscred
      - name: AZURE_AUTH_LOCATION
        value: /etc/openshift-installer/osServicePrincipal.json
      - name: AWS_REGION
        value: us-east-1
      - name: CLUSTER_NAME
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: BASE_DOMAIN
        value: ${BASE_DOMAIN}
      - name: GCP_PROJECT
        value: openshift-gce-devel-ci
      - name: GCP_REGION
        value: us-east1
      - name: GOOGLE_CLOUD_KEYFILE_JSON
        value: /etc/openshift-installer/gce.json
      - name: SSH_PUB_KEY_PATH
        value: /etc/openshift-installer/ssh-publickey
      - name: SSH_PRIVATE_KEY_PATH
        value: /etc/openshift-installer/ssh-privatekey
      - name: PULL_SECRET_PATH
        value: /etc/openshift-installer/pull-secret
      - name: TFVARS_PATH
        value: /etc/openshift-installer/vmc.secret.auto.tfvars
      - name: OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE
        value: ${RELEASE_IMAGE_LATEST}
      - name: OPENSHIFT_INSTALL_INVOKER
        value: openshift-internal-ci/${JOB_NAME}/${BUILD_ID}
      - name: USER
        value: test
      - name: HOME
        value: /tmp
      - name: INSTALL_INITIAL_RELEASE
      - name: RELEASE_IMAGE_INITIAL
      command:
      - /bin/sh
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        trap 'rc=$?; if test "${rc}" -eq 0; then touch /tmp/setup-success; else touch /tmp/exit /tmp/setup-failed; fi; exit "${rc}"' EXIT
        trap 'CHILDREN=$(jobs -p); if test -n "${CHILDREN}"; then kill ${CHILDREN} && wait; fi' TERM

        # The oc binary is placed in the shared-tmp by the test container and we want to use
        # that oc for all actions.
        export PATH=/tmp:${PATH}

        function backoff() {
            local attempt=0
            local failed=0
            while true; do
                "$@" && failed=0 || failed=1
                if [[ $failed -eq 0 ]]; then
                    break
                fi
                attempt=$(( attempt + 1 ))
                if [[ $attempt -gt 5 ]]; then
                    break
                fi
                echo "command failed, retrying in $(( 2 ** $attempt )) seconds"
                sleep $(( 2 ** $attempt ))
            done
            return $failed
        }

        GATHER_BOOTSTRAP_ARGS=

        function gather_bootstrap_and_fail() {
          if [[ "${CLUSTER_TYPE}" == "vsphere" ]]; then
            set +e
            # list all the virtual machines in the folder/rp
            clustervms=$(govc ls "/${GOVC_DATACENTER}/vm/${CLUSTER_NAME}")
            for ipath in $clustervms; do
              # split on /
              IFS=/ read -a ipath_array <<< "$ipath";
              hostname=${ipath_array[-1]}

              # create png of the current console to determine if a virtual machine has a problem
              govc vm.console -vm.ipath=$ipath -capture ${ARTIFACT_DIR}/installer/${hostname}.png

              # based on the virtual machine name create variable for each
              # with ip addresses as the value
              declare "${hostname//-/_}_ip"=$(govc vm.ip -a -vm.ipath=$ipath | awk -F',' '{print $1}')
            done

            GATHER_BOOTSTRAP_ARGS="${GATHER_BOOTSTRAP_ARGS} --bootstrap ${bootstrap_0_ip}"
            GATHER_BOOTSTRAP_ARGS="${GATHER_BOOTSTRAP_ARGS} --master ${control_plane_0_ip} --master ${control_plane_1_ip} --master ${control_plane_2_ip}"

            set -e
          fi
          if test -n "${GATHER_BOOTSTRAP_ARGS}"; then
            openshift-install --dir=${ARTIFACT_DIR}/installer gather bootstrap --key "${SSH_PRIVATE_KEY_PATH}" ${GATHER_BOOTSTRAP_ARGS}
          fi

          return 1
        }
        function generate_proxy_certs() {

          ROOTCA=/tmp/CA
          INTERMEDIATE=${ROOTCA}/INTERMEDIATE

          mkdir ${ROOTCA}
          pushd ${ROOTCA}
          mkdir certs crl newcerts private
          chmod 700 private
          touch index.txt
          echo 1000 > serial

          cat > ${ROOTCA}/openssl.cnf << EOF
        [ ca ]
        default_ca = CA_default
        [ CA_default ]
        # Directory and file locations.
        dir               = ${ROOTCA}
        certs             = \$dir/certs
        crl_dir           = \$dir/crl
        new_certs_dir     = \$dir/newcerts
        database          = \$dir/index.txt
        serial            = \$dir/serial
        RANDFILE          = \$dir/private/.rand
        # The root key and root certificate.
        private_key       = \$dir/private/ca.key.pem
        certificate       = \$dir/certs/ca.cert.pem
        # For certificate revocation lists.
        crlnumber         = \$dir/crlnumber
        crl               = \$dir/crl/ca.crl.pem
        crl_extensions    = crl_ext
        copy_extensions   = copy
        default_crl_days  = 30
        # SHA-1 is deprecated, so use SHA-2 instead.
        default_md        = sha256
        name_opt          = ca_default
        cert_opt          = ca_default
        default_days      = 375
        preserve          = no
        policy            = policy_loose
        [ policy_strict ]
        # The root CA should only sign intermediate certificates that match.
        countryName             = match
        stateOrProvinceName     = match
        organizationName        = match
        organizationalUnitName  = optional
        commonName              = supplied
        emailAddress            = optional
        [ policy_loose ]
        # Allow the intermediate CA to sign a more diverse range of certificates.
        countryName             = optional
        stateOrProvinceName     = optional
        localityName            = optional
        organizationName        = optional
        organizationalUnitName  = optional
        commonName              = supplied
        emailAddress            = optional
        [ req ]
        default_bits        = 2048
        distinguished_name  = ca_dn
        string_mask         = utf8only
        # SHA-1 is deprecated, so use SHA-2 instead.
        default_md          = sha256
        # Extension to add when the -x509 option is used.
        x509_extensions     = v3_ca
        prompt              = no
        [ ca_dn ]
        0.domainComponent       = "io"
        1.domainComponent       = "openshift"
        organizationName        = "OpenShift Origin"
        organizationalUnitName  = "Proxy CI Signing CA"
        commonName              = "Proxy CI Signing CA"
        [ v3_ca ]
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid:always,issuer
        basicConstraints = critical, CA:true
        keyUsage = critical, digitalSignature, cRLSign, keyCertSign
        [ v3_intermediate_ca ]
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid:always,issuer
        basicConstraints = critical, CA:true, pathlen:0
        keyUsage = critical, digitalSignature, cRLSign, keyCertSign
        [ usr_cert ]
        basicConstraints = CA:FALSE
        nsCertType = client, email
        nsComment = "OpenSSL Generated Client Certificate"
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid,issuer
        keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
        extendedKeyUsage = clientAuth, emailProtection
        [ server_cert ]
        basicConstraints = CA:FALSE
        nsCertType = server
        nsComment = "OpenSSL Generated Server Certificate"
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid,issuer:always
        keyUsage = critical, digitalSignature, keyEncipherment
        extendedKeyUsage = serverAuth
        [ crl_ext ]
        authorityKeyIdentifier=keyid:always
        [ ocsp ]
        basicConstraints = CA:FALSE
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid,issuer
        keyUsage = critical, digitalSignature
        extendedKeyUsage = critical, OCSPSigning
        EOF

          # create root key
          uuidgen | sha256sum | cut -b -32 > capassfile

          openssl genrsa -aes256 -out private/ca.key.pem -passout file:capassfile 4096 2>/dev/null
          chmod 400 private/ca.key.pem

          # create root certificate

          openssl req -config openssl.cnf \
              -key private/ca.key.pem \
              -passin file:capassfile \
              -new -x509 -days 7300 -sha256 -extensions v3_ca \
              -out certs/ca.cert.pem 2>/dev/null

          chmod 444 certs/ca.cert.pem

          mkdir ${INTERMEDIATE}
          pushd ${INTERMEDIATE}

          mkdir certs crl csr newcerts private
          chmod 700 private
          touch index.txt
          echo 1000 > serial

          echo 1000 > ${INTERMEDIATE}/crlnumber

          cat > ${INTERMEDIATE}/openssl.cnf << EOF
        [ ca ]
        default_ca = CA_default
        [ CA_default ]
        # Directory and file locations.
        dir               = ${INTERMEDIATE}
        certs             = \$dir/certs
        crl_dir           = \$dir/crl
        new_certs_dir     = \$dir/newcerts
        database          = \$dir/index.txt
        serial            = \$dir/serial
        RANDFILE          = \$dir/private/.rand
        # The root key and root certificate.
        private_key       = \$dir/private/intermediate.key.pem
        certificate       = \$dir/certs/intermediate.cert.pem
        # For certificate revocation lists.
        crlnumber         = \$dir/crlnumber
        crl               = \$dir/crl/intermediate.crl.pem
        crl_extensions    = crl_ext
        default_crl_days  = 30
        # SHA-1 is deprecated, so use SHA-2 instead.
        default_md        = sha256
        name_opt          = ca_default
        cert_opt          = ca_default
        default_days      = 375
        preserve          = no
        policy            = policy_loose
        [ policy_strict ]
        # The root CA should only sign intermediate certificates that match.
        countryName             = match
        stateOrProvinceName     = match
        organizationName        = match
        organizationalUnitName  = optional
        commonName              = supplied
        emailAddress            = optional
        [ policy_loose ]
        # Allow the intermediate CA to sign a more diverse range of certificates.
        countryName             = optional
        stateOrProvinceName     = optional
        localityName            = optional
        organizationName        = optional
        organizationalUnitName  = optional
        commonName              = supplied
        emailAddress            = optional
        [ req ]
        default_bits        = 2048
        distinguished_name  = req_distinguished_name
        prompt              = no
        string_mask         = utf8only
        # SHA-1 is deprecated, so use SHA-2 instead.
        default_md          = sha256
        # Extension to add when the -x509 option is used.
        x509_extensions     = v3_ca
        req_extensions      = req_ext
        [ req_distinguished_name ]
        0.domainComponent       = "io"
        1.domainComponent       = "openshift"
        organizationName        = "OpenShift Origin"
        organizationalUnitName  = "CI Proxy"
        commonName              = "CI Proxy"
        [ req_ext ]
        subjectAltName          = "DNS.1:*.compute-1.amazonaws.com"
        [ v3_ca ]
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid:always,issuer
        basicConstraints = critical, CA:true
        keyUsage = critical, digitalSignature, cRLSign, keyCertSign
        [ v3_intermediate_ca ]
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid:always,issuer
        basicConstraints = critical, CA:true, pathlen:0
        keyUsage = critical, digitalSignature, cRLSign, keyCertSign
        [ usr_cert ]
        basicConstraints = CA:FALSE
        nsCertType = client, email
        nsComment = "OpenSSL Generated Client Certificate"
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid,issuer
        keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
        extendedKeyUsage = clientAuth, emailProtection
        [ server_cert ]
        basicConstraints = CA:FALSE
        nsCertType = server
        nsComment = "OpenSSL Generated Server Certificate"
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid,issuer:always
        keyUsage = critical, digitalSignature, keyEncipherment
        extendedKeyUsage = serverAuth
        [ crl_ext ]
        authorityKeyIdentifier=keyid:always
        [ ocsp ]
        basicConstraints = CA:FALSE
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid,issuer
        keyUsage = critical, digitalSignature
        extendedKeyUsage = critical, OCSPSigning
        EOF

          popd
          uuidgen | sha256sum | cut -b -32 > intpassfile

          openssl genrsa -aes256 \
              -out ${INTERMEDIATE}/private/intermediate.key.pem \
              -passout file:intpassfile 4096 2>/dev/null

          chmod 400 ${INTERMEDIATE}/private/intermediate.key.pem

          openssl req -config ${INTERMEDIATE}/openssl.cnf -new -sha256 \
              -key ${INTERMEDIATE}/private/intermediate.key.pem \
              -passin file:intpassfile \
              -out ${INTERMEDIATE}/csr/intermediate.csr.pem 2>/dev/null

          openssl ca -config openssl.cnf -extensions v3_intermediate_ca \
              -days 3650 -notext -md sha256 \
              -batch \
              -in ${INTERMEDIATE}/csr/intermediate.csr.pem \
              -passin file:capassfile \
              -out ${INTERMEDIATE}/certs/intermediate.cert.pem 2>/dev/null

          chmod 444 ${INTERMEDIATE}/certs/intermediate.cert.pem

          openssl verify -CAfile certs/ca.cert.pem \
              ${INTERMEDIATE}/certs/intermediate.cert.pem

          cat ${INTERMEDIATE}/certs/intermediate.cert.pem \
              certs/ca.cert.pem > ${INTERMEDIATE}/certs/ca-chain.cert.pem

          chmod 444 ${INTERMEDIATE}/certs/ca-chain.cert.pem
          popd
        }

        function generate_proxy_ignition() {
          cat > /srv/proxy.ign << EOF
        {
          "ignition": {
            "config": {},
            "security": {
              "tls": {}
            },
            "timeouts": {},
            "version": "2.2.0"
          },
          "passwd": {
            "users": [
              {
                "name": "core",
                "sshAuthorizedKeys": [
                  "${SSH_PUB_KEY}"
                ]
              }
            ]
          },
          "storage": {
            "files": [
              {
                "filesystem": "root",
                "path": "/tmp/squid/passwords",
                "user": {
                  "name": "root"
                },
                "contents": {
                  "source": "data:text/plain;base64,${HTPASSWD_CONTENTS}"
                },
                "mode": 420
              },
              {
                "filesystem": "root",
                "path": "/tmp/squid/tls.crt",
                "user": {
                  "name": "root"
                },
                "contents": {
                  "source": "data:text/plain;base64,${PROXY_CERT}"
                },
                "mode": 420
              },
              {
                "filesystem": "root",
                "path": "/tmp/squid/tls.key",
                "user": {
                  "name": "root"
                },
                "contents": {
                  "source": "data:text/plain;base64,${PROXY_KEY}"
                },
                "mode": 420
              },
              {
                "filesystem": "root",
                "path": "/tmp/squid/ca-chain.pem",
                "user": {
                  "name": "root"
                },
                "contents": {
                  "source": "data:text/plain;base64,${CA_CHAIN}"
                },
                "mode": 420
              },
              {
                "filesystem": "root",
                "path": "/tmp/squid/squid.conf",
                "user": {
                  "name": "root"
                },
                "contents": {
                  "source": "data:text/plain;base64,${SQUID_CONFIG}"
                },
                "mode": 420
              },
              {
                "filesystem": "root",
                "path": "/tmp/squid.sh",
                "user": {
                  "name": "root"
                },
                "contents": {
                  "source": "data:text/plain;base64,${SQUID_SH}"
                },
                "mode": 420
              },
              {
                "filesystem": "root",
                "path": "/tmp/squid/proxy.sh",
                "user": {
                  "name": "root"
                },
                "contents": {
                  "source": "data:text/plain;base64,${PROXY_SH}"
                },
                "mode": 420
              },
              {
                "filesystem": "root",
                "path": "/tmp/squid/passwd.sh",
                "user": {
                  "name": "root"
                },
                "contents": {
                  "source": "data:text/plain;base64,${KEY_PASSWORD}"
                },
                "mode": 493
              }
            ]
          },
          "systemd": {
            "units": [
              {
                "contents": "[Service]\n\nExecStart=bash /tmp/squid.sh\n\n[Install]\nWantedBy=multi-user.target\n",
                "enabled": true,
                "name": "squid.service"
              },
              {
                "dropins": [
                  {
                    "contents": "[Service]\nExecStart=\nExecStart=/usr/lib/systemd/systemd-journal-gatewayd \\\n  --key=/opt/openshift/tls/journal-gatewayd.key \\\n  --cert=/opt/openshift/tls/journal-gatewayd.crt \\\n  --trust=/opt/openshift/tls/root-ca.crt\n",
                    "name": "certs.conf"
                  }
                ],
                "name": "systemd-journal-gatewayd.service"
              },
              {
                "enabled": true,
                "name": "systemd-journal-gatewayd.socket"
              }
            ]
          }
        }
        EOF
        }

        function generate_proxy_template() {
        cat > /tmp/04_cluster_proxy.yaml << EOF
        AWSTemplateFormatVersion: 2010-09-09
        Description: Template for OpenShift Cluster Proxy (EC2 Instance, Security Groups and IAM)

        Parameters:
          InfrastructureName:
            AllowedPattern: ^([a-zA-Z][a-zA-Z0-9\-]{0,26})$
            MaxLength: 27
            MinLength: 1
            ConstraintDescription: Infrastructure name must be alphanumeric, start with a letter, and have a maximum of 27 characters.
            Description: A short, unique cluster ID used to tag cloud resources and identify items owned or used by the cluster.
            Type: String
          RhcosAmi:
            Description: Current Red Hat Enterprise Linux CoreOS AMI to use for proxy.
            Type: AWS::EC2::Image::Id
          AllowedProxyCidr:
            AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|1[0-9]|2[0-9]|3[0-2]))$
            ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-32.
            Default: 0.0.0.0/0
            Description: CIDR block to allow access to the proxy node.
            Type: String
          PrivateHostedZoneId:
            Description: The Route53 private zone ID to register the etcd targets with, such as Z21IXYZABCZ2A4.
            Type: String
          PrivateHostedZoneName:
            Description: The Route53 zone to register the targets with, such as cluster.example.com. Omit the trailing period.
            Type: String
          ClusterName:
            Description: The cluster name used to uniquely identify the proxy load balancer
            Type: String
          PublicSubnet:
            Description: The public subnet to launch the proxy node into.
            Type: AWS::EC2::Subnet::Id
          MasterSecurityGroupId:
            Description: The master security group ID for registering temporary rules.
            Type: AWS::EC2::SecurityGroup::Id
          VpcId:
            Description: The VPC-scoped resources will belong to this VPC.
            Type: AWS::EC2::VPC::Id
          PrivateSubnets:
            Description: The internal subnets.
            Type: List<AWS::EC2::Subnet::Id>
          ProxyIgnitionLocation:
            Default: s3://my-s3-bucket/proxy.ign
            Description: Ignition config file location.
            Type: String
          AutoRegisterDNS:
            Default: "yes"
            AllowedValues:
            - "yes"
            - "no"
            Description: Do you want to invoke DNS etcd registration, which requires Hosted Zone information?
            Type: String
          AutoRegisterELB:
            Default: "yes"
            AllowedValues:
            - "yes"
            - "no"
            Description: Do you want to invoke NLB registration, which requires a Lambda ARN parameter?
            Type: String
          RegisterNlbIpTargetsLambdaArn:
            Description: ARN for NLB IP target registration lambda.
            Type: String
          ExternalApiTargetGroupArn:
            Description: ARN for external API load balancer target group.
            Type: String
          InternalApiTargetGroupArn:
            Description: ARN for internal API load balancer target group.
            Type: String
          InternalServiceTargetGroupArn:
            Description: ARN for internal service load balancer target group.
            Type: String

        Metadata:
          AWS::CloudFormation::Interface:
            ParameterGroups:
            - Label:
                default: "Cluster Information"
              Parameters:
              - InfrastructureName
            - Label:
                default: "Host Information"
              Parameters:
              - RhcosAmi
              - ProxyIgnitionLocation
              - MasterSecurityGroupId
            - Label:
                default: "Network Configuration"
              Parameters:
              - VpcId
              - AllowedProxyCidr
              - PublicSubnet
              - PrivateSubnets
              - ClusterName
            - Label:
                default: "DNS"
              Parameters:
              - AutoRegisterDNS
              - PrivateHostedZoneId
              - PrivateHostedZoneName
            - Label:
                default: "Load Balancer Automation"
              Parameters:
              - AutoRegisterELB
              - RegisterNlbIpTargetsLambdaArn
              - ExternalApiTargetGroupArn
              - InternalApiTargetGroupArn
              - InternalServiceTargetGroupArn
            ParameterLabels:
              InfrastructureName:
                default: "Infrastructure Name"
              VpcId:
                default: "VPC ID"
              AllowedProxyCidr:
                default: "Allowed ingress Source"
              PublicSubnet:
                default: "Public Subnet"
              PrivateSubnets:
                default: "Private Subnets"
              RhcosAmi:
                default: "Red Hat Enterprise Linux CoreOS AMI ID"
              ProxyIgnitionLocation:
                default: "Bootstrap Ignition Source"
              MasterSecurityGroupId:
                default: "Master Security Group ID"
              AutoRegisterDNS:
                default: "Use Provided DNS Automation"
              AutoRegisterELB:
                default: "Use Provided ELB Automation"
              PrivateHostedZoneName:
                default: "Private Hosted Zone Name"
              PrivateHostedZoneId:
                default: "Private Hosted Zone ID"
              ClusterName:
                default: "Cluster name"

        Conditions:
          DoRegistration: !Equals ["yes", !Ref AutoRegisterELB]
          DoDns: !Equals ["yes", !Ref AutoRegisterDNS]

        Resources:
          ProxyIamRole:
            Type: AWS::IAM::Role
            Properties:
              AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: "Allow"
                  Principal:
                    Service:
                    - "ec2.amazonaws.com"
                  Action:
                  - "sts:AssumeRole"
              Path: "/"
              Policies:
              - PolicyName: !Join ["-", [!Ref InfrastructureName, "proxy", "policy"]]
                PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                  - Effect: "Allow"
                    Action: "ec2:Describe*"
                    Resource: "*"

          ProxyInstanceProfile:
            Type: "AWS::IAM::InstanceProfile"
            Properties:
              Path: "/"
              Roles:
              - Ref: "ProxyIamRole"

          ProxySecurityGroup:
            Type: AWS::EC2::SecurityGroup
            Properties:
              GroupDescription: Cluster Proxy Security Group
              SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
              - IpProtocol: tcp
                ToPort: 3128
                FromPort: 3128
                CidrIp: !Ref AllowedProxyCidr
              - IpProtocol: tcp
                ToPort: 3130
                FromPort: 3130
                CidrIp: !Ref AllowedProxyCidr
              - IpProtocol: tcp
                ToPort: 19531
                FromPort: 19531
                CidrIp: !Ref AllowedProxyCidr
              VpcId: !Ref VpcId

          ProxyInstance:
            Type: AWS::EC2::Instance
            Properties:
              ImageId: !Ref RhcosAmi
              IamInstanceProfile: !Ref ProxyInstanceProfile
              InstanceType: "i3.large"
              NetworkInterfaces:
              - AssociatePublicIpAddress: "true"
                DeviceIndex: "0"
                GroupSet:
                - !Ref "ProxySecurityGroup"
                - !Ref "MasterSecurityGroupId"
                SubnetId: !Ref "PublicSubnet"
              UserData:
                Fn::Base64: !Sub
                - '{"ignition":{"config":{"replace":{"source":"\${IgnitionLocation}","verification":{}}},"timeouts":{},"version":"2.1.0"},"networkd":{},"passwd":{},"storage":{},"systemd":{}}'
                - {
                  IgnitionLocation: !Ref ProxyIgnitionLocation
                }

          ProxyRecord:
            Condition: DoDns
            Type: AWS::Route53::RecordSet
            Properties:
              HostedZoneId: !Ref PrivateHostedZoneId
              Name: !Join [".", ["squid", !Ref PrivateHostedZoneName]]
              ResourceRecords:
              - !GetAtt ProxyInstance.PublicIp
              TTL: 60
              Type: A

        Outputs:
          ProxyPublicIp:
            Description: The proxy node public IP address.
            Value: !GetAtt ProxyInstance.PublicIp
        EOF
        }

        cp "$(command -v openshift-install)" /tmp
        mkdir ${ARTIFACT_DIR}/installer

        if [[ -n "${INSTALL_INITIAL_RELEASE}" && -n "${RELEASE_IMAGE_INITIAL}" ]]; then
          echo "Installing from initial release ${RELEASE_IMAGE_INITIAL}"
          OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE="${RELEASE_IMAGE_INITIAL}"
        else
          echo "Installing from release ${RELEASE_IMAGE_LATEST}"
        fi

        export EXPIRATION_DATE=$(date -d '4 hours' --iso=minutes --utc)
        export SSH_PUB_KEY=$(cat "${SSH_PUB_KEY_PATH}")
        export PULL_SECRET=$(cat "${PULL_SECRET_PATH}")

        if [[ "${CLUSTER_TYPE}" == "aws" ]]; then
          base_domain="${BASE_DOMAIN:-origin-ci-int-aws.dev.rhcloud.com}"
          MACHINE_CIDR=10.0.0.0/16
          cat > ${ARTIFACT_DIR}/installer/install-config.yaml << EOF
        apiVersion: v1
        baseDomain: ${base_domain}
        metadata:
          name: ${CLUSTER_NAME}
        controlPlane:
          name: master
          replicas: 3
          platform:
            aws:
              zones:
              - ${AWS_REGION}a
              - ${AWS_REGION}b
              - ${AWS_REGION}c
        compute:
        - name: worker
          replicas: 0
          platform:
            aws:
              zones:
              - ${AWS_REGION}a
              - ${AWS_REGION}b
              - ${AWS_REGION}c
        networking:
          machineCIDR: ${MACHINE_CIDR}
        platform:
          aws:
            region: ${AWS_REGION}
            userTags:
              expirationDate: ${EXPIRATION_DATE}
        pullSecret: >
          ${PULL_SECRET}
        sshKey: |
          ${SSH_PUB_KEY}
        EOF

          # Add proxy info to install-config.yaml
          if [[ "${CLUSTER_VARIANT}" =~ "proxy" ]]; then

            # create and sign a cert
            generate_proxy_certs
            ROOTCA=/tmp/CA
            INTERMEDIATE=${ROOTCA}/INTERMEDIATE

            # load in certs here
            PROXY_CERT="$(base64 -w0 ${INTERMEDIATE}/certs/intermediate.cert.pem)"
            PROXY_KEY="$(base64 -w0 ${INTERMEDIATE}/private/intermediate.key.pem)"
            PROXY_KEY_PASSWORD="$(cat ${ROOTCA}/intpassfile)"

            CA_CHAIN="$(base64 -w0 ${INTERMEDIATE}/certs/ca-chain.cert.pem)"

            # create random uname and pw
            USER_NAME="${CLUSTER_NAME}"
            PASSWORD="$(uuidgen | sha256sum | cut -b -32)"

            HTPASSWD_CONTENTS="${USER_NAME}:"$(openssl passwd -apr1 ${PASSWORD})""
            HTPASSWD_CONTENTS="$(echo -e ${HTPASSWD_CONTENTS} | base64 -w0)"

            KEY_PASSWORD="$(base64 -w0 << EOF
        #!/bin/sh
        echo ${PROXY_KEY_PASSWORD}
        EOF
        )"

            PROXY_DNS="squid.${CLUSTER_NAME}.${base_domain}"

            export PROXY_URL="http://${USER_NAME}:${PASSWORD}@${PROXY_DNS}:3128/"
            export TLS_PROXY_URL="https://${USER_NAME}:${PASSWORD}@${PROXY_DNS}:3130/"

            # TODO:
            # restore using "httpsProxy: ${TLS_PROXY_URL}"
            # once we have a squid image with at least version 4.x so that we can do a TLS 1.3 handshake.
            # Currently 3.5 only does up to 1.2 which podman fails to do a handshake with  https://github.com/containers/image/issues/699

            cat >> ${ARTIFACT_DIR}/installer/install-config.yaml << EOF
        proxy:
          httpsProxy: ${PROXY_URL}
          httpProxy: ${PROXY_URL}
        additionalTrustBundle: |
        $(cat ${INTERMEDIATE}/certs/ca-chain.cert.pem | awk '{print "  "$0}')
        EOF
          fi

          openshift-install --dir=${ARTIFACT_DIR}/installer create manifests
          sed -i '/^  channel:/d' ${ARTIFACT_DIR}/installer/manifests/cvo-overrides.yaml
          rm -f ${ARTIFACT_DIR}/installer/openshift/99_openshift-cluster-api_master-machines-*.yaml
          rm -f ${ARTIFACT_DIR}/installer/openshift/99_openshift-cluster-api_worker-machineset-*.yaml
          sed -i "s;mastersSchedulable: true;mastersSchedulable: false;g" ${ARTIFACT_DIR}/installer/manifests/cluster-scheduler-02-config.yml
        elif [[ "${CLUSTER_TYPE}" == "gcp" ]]; then
          base_domain="${BASE_DOMAIN:-origin-ci-int-gce.dev.openshift.com}"
          cat > ${ARTIFACT_DIR}/installer/install-config.yaml << EOF
        apiVersion: v1
        baseDomain: ${base_domain}
        metadata:
          name: ${CLUSTER_NAME}
        controlPlane:
          name: master
          replicas: 3
        compute:
        - name: worker
          replicas: 0
        platform:
          gcp:
            projectID: ${GCP_PROJECT}
            region: ${GCP_REGION}
        pullSecret: >
          ${PULL_SECRET}
        sshKey: |
          ${SSH_PUB_KEY}
        EOF

          openshift-install --dir=${ARTIFACT_DIR}/installer create manifests
          sed -i '/^  channel:/d' ${ARTIFACT_DIR}/installer/manifests/cvo-overrides.yaml
          rm -f ${ARTIFACT_DIR}/installer/openshift/99_openshift-cluster-api_master-machines-*.yaml
          rm -f ${ARTIFACT_DIR}/installer/openshift/99_openshift-cluster-api_worker-machineset-*.yaml
          sed -i "s;mastersSchedulable: true;mastersSchedulable: false;g" ${ARTIFACT_DIR}/installer/manifests/cluster-scheduler-02-config.yml
        elif [[ "${CLUSTER_TYPE}" == "vsphere" ]]; then
            base_domain="${BASE_DOMAIN:-origin-ci-int-aws.dev.rhcloud.com}"
            # Get user and password from TFVARS_PATH
            export VSPHERE_USER=$(grep -oP 'vsphere_user\s*=\s*"\K[^"]+' ${TFVARS_PATH})
            export VSPHERE_PASSWORD=$(grep -oP 'vsphere_password\s*=\s*"\K[^"]+' ${TFVARS_PATH})
            export OVA_URL="$(jq -r '.baseURI + .images["vmware"].path' /var/lib/openshift-install/rhcos.json)"
            export VM_TEMPLATE="${OVA_URL##*/}"
            mkdir /tmp/rhcos

            cat > /tmp/rhcos/rhcos.json << EOF
        {
           "DiskProvisioning": "thin",
           "MarkAsTemplate": false,
           "PowerOn": false,
           "InjectOvfEnv": false,
           "WaitForIP": false,
           "Name": "${VM_TEMPLATE}"
        }
        EOF
            cat > ${ARTIFACT_DIR}/installer/install-config.yaml << EOF
        apiVersion: v1
        baseDomain: ${base_domain}
        compute:
        - name: worker
          replicas: 0
        metadata:
          name: ${CLUSTER_NAME}
        networking:
          machineCIDR: 139.178.94.128/25
        platform:
          vsphere:
            vCenter: vcsa-ci.vmware.devcluster.openshift.com
            username: "${VSPHERE_USER}"
            password: "${VSPHERE_PASSWORD}"
            datacenter: dc1
            defaultDatastore: vsanDatastore
            folder: "/dc1/vm/${CLUSTER_NAME}"
        pullSecret: >
          ${PULL_SECRET}
        sshKey: |
          ${SSH_PUB_KEY}
        EOF
            export GOVC_URL=vcsa-ci.vmware.devcluster.openshift.com
            export GOVC_USERNAME="${VSPHERE_USER}"
            export GOVC_PASSWORD="${VSPHERE_PASSWORD}"
            export GOVC_INSECURE=1
            export GOVC_DATACENTER=dc1
            export GOVC_DATASTORE=vsanDatastore

            if [[ "$(govc vm.info ${VM_TEMPLATE} | wc -c)" -eq 0 ]]
            then
                echo "Creating a template for the VMs from ${OVA_URL}..."
                curl -L -o /tmp/rhcos/rhcos.ova "${OVA_URL}"
                govc import.ova -options=/tmp/rhcos/rhcos.json /tmp/rhcos/rhcos.ova
            fi

            openshift-install --dir=${ARTIFACT_DIR}/installer create manifests
            sed -i '/^  channel:/d' ${ARTIFACT_DIR}/installer/manifests/cvo-overrides.yaml
            rm -f ${ARTIFACT_DIR}/installer/openshift/99_openshift-cluster-api_master-machines-*.yaml
            rm -f ${ARTIFACT_DIR}/installer/openshift/99_openshift-cluster-api_worker-machineset-*.yaml
            sed -i "s;mastersSchedulable: true;mastersSchedulable: false;g" ${ARTIFACT_DIR}/installer/manifests/cluster-scheduler-02-config.yml

        elif [[ "${CLUSTER_TYPE}" == "azure4" ]]; then
            case $((RANDOM % 8)) in
            0) AZURE_REGION=centralus;;
            1) AZURE_REGION=centralus;;
            2) AZURE_REGION=centralus;;
            3) AZURE_REGION=centralus;;
            4) AZURE_REGION=centralus;;
            5) AZURE_REGION=centralus;;
            6) AZURE_REGION=eastus2;;
            7) AZURE_REGION=westus;;
            *) echo >&2 "invalid Azure region index"; exit 1;;
            esac
            echo "Azure region: ${AZURE_REGION}"

            export BASE_DOMAIN_RESOURCE_GROUP="os4-common"
            base_domain="${BASE_DOMAIN:-ci.azure.devcluster.openshift.com}"
            echo "Base domain: ${base_domain}"

            cat > ${ARTIFACT_DIR}/installer/install-config.yaml << EOF
        apiVersion: v1
        baseDomain: ${base_domain}
        metadata:
          name: ${CLUSTER_NAME}
        controlPlane:
          name: master
          replicas: 3
        compute:
        - name: worker
          replicas: 0
        platform:
          azure:
            baseDomainResourceGroupName: ${BASE_DOMAIN_RESOURCE_GROUP}
            region: ${AZURE_REGION}
        pullSecret: >
          ${PULL_SECRET}
        sshKey: |
          ${SSH_PUB_KEY}
        EOF
            export PATH=${HOME}/.local/bin:${PATH}

            echo "Creating manifests"
            openshift-install --dir=${ARTIFACT_DIR}/installer create manifests

            pushd ${ARTIFACT_DIR}/installer

            echo "Editing manifests"
            sed -i '/^  channel:/d' manifests/cvo-overrides.yaml
            rm -f openshift/99_openshift-cluster-api_master-machines-*.yaml
            rm -f openshift/99_openshift-cluster-api_worker-machineset-*.yaml
            sed -i "s;mastersSchedulable: true;mastersSchedulable: false;g" manifests/cluster-scheduler-02-config.yml
            sed -i "/publicZone/,+1d" manifests/cluster-dns-02-config.yml
            sed -i "/privateZone/,+1d" manifests/cluster-dns-02-config.yml

            popd
        else
            echo "Unsupported cluster type '${CLUSTER_TYPE}'"
            exit 1
        fi

        echo "Creating ignition configs"
        openshift-install --dir=${ARTIFACT_DIR}/installer create ignition-configs &
        wait "$!"

        cp ${ARTIFACT_DIR}/installer/bootstrap.ign /srv
        BOOTSTRAP_URI="https://${JOB_NAME_SAFE}-bootstrap-exporter-${NAMESPACE}.svc.ci.openshift.org/bootstrap.ign"

        # begin bootstrapping
        if [[ "${CLUSTER_TYPE}" == "aws" ]]; then
          RHCOS_AMI="$(jq -r .amis[\"${AWS_REGION}\"].hvm /var/lib/openshift-install/rhcos.json)"

          # FIXME: get epel-release or otherwise add awscli to our UPI image
          export PATH="${HOME}/.local/bin:${PATH}"
          easy_install --user 'pip<21'  # our Python 2.7.5 is even too old for ensurepip
          pip install --user awscli

          export AWS_DEFAULT_REGION="${AWS_REGION}"  # CLI prefers the former

          INFRA_ID="$(jq -r .infraID ${ARTIFACT_DIR}/installer/metadata.json)"
          TAGS="Key=expirationDate,Value=${EXPIRATION_DATE}"
          IGNITION_CA="$(jq '.ignition.security.tls.certificateAuthorities[0].source' ${ARTIFACT_DIR}/installer/master.ign)"  # explicitly keeping wrapping quotes

          HOSTED_ZONE="$(aws route53 list-hosted-zones-by-name \
            --dns-name "${base_domain}" \
            --query "HostedZones[? Config.PrivateZone != \`true\` && Name == \`${base_domain}.\`].Id" \
            --output text)"

          # If we are using a proxy, create a 'black-hole' private subnet vpc TODO
          # For now this is just a placeholder...
          if [[ "${CLUSTER_VARIANT}" =~ "proxy" ]]; then
            aws cloudformation create-stack  --stack-name "${CLUSTER_NAME}-vpc" \
              --template-body "$(cat "/var/lib/openshift-install/upi/${CLUSTER_TYPE}/cloudformation/01_vpc.yaml")" \
              --tags "${TAGS}" \
              --parameters \
                ParameterKey=AvailabilityZoneCount,ParameterValue=3 &
            wait "$!"
          else
            aws cloudformation create-stack  --stack-name "${CLUSTER_NAME}-vpc" \
              --template-body "$(cat "/var/lib/openshift-install/upi/${CLUSTER_TYPE}/cloudformation/01_vpc.yaml")" \
              --tags "${TAGS}" \
              --parameters \
                ParameterKey=AvailabilityZoneCount,ParameterValue=3 &
            wait "$!"
          fi

          aws cloudformation wait stack-create-complete --stack-name "${CLUSTER_NAME}-vpc" &
          wait "$!"

          VPC_JSON="$(aws cloudformation describe-stacks --stack-name "${CLUSTER_NAME}-vpc" \
            --query 'Stacks[].Outputs[]' --output json)"
          VPC_ID="$(echo "${VPC_JSON}" | jq -r '.[] | select(.OutputKey == "VpcId").OutputValue')"
          PRIVATE_SUBNETS="$(echo "${VPC_JSON}" | jq '.[] | select(.OutputKey == "PrivateSubnetIds").OutputValue')"  # explicitly keeping wrapping quotes
          PRIVATE_SUBNET_0="$(echo "${PRIVATE_SUBNETS}" | sed 's/"//g' | cut -d, -f1)"
          PRIVATE_SUBNET_1="$(echo "${PRIVATE_SUBNETS}" | sed 's/"//g' | cut -d, -f2)"
          PRIVATE_SUBNET_2="$(echo "${PRIVATE_SUBNETS}" | sed 's/"//g' | cut -d, -f3)"
          PUBLIC_SUBNETS="$(echo "${VPC_JSON}" | jq '.[] | select(.OutputKey == "PublicSubnetIds").OutputValue')"  # explicitly keeping wrapping quotes

          aws cloudformation create-stack \
            --stack-name "${CLUSTER_NAME}-infra" \
            --template-body "$(cat "/var/lib/openshift-install/upi/${CLUSTER_TYPE}/cloudformation/02_cluster_infra.yaml")" \
            --tags "${TAGS}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters \
              ParameterKey=ClusterName,ParameterValue="${CLUSTER_NAME}" \
              ParameterKey=InfrastructureName,ParameterValue="${INFRA_ID}" \
              ParameterKey=HostedZoneId,ParameterValue="${HOSTED_ZONE}" \
              ParameterKey=HostedZoneName,ParameterValue="${base_domain}" \
              ParameterKey=VpcId,ParameterValue="${VPC_ID}" \
              ParameterKey=PrivateSubnets,ParameterValue="${PRIVATE_SUBNETS}" \
              ParameterKey=PublicSubnets,ParameterValue="${PUBLIC_SUBNETS}" &
          wait "$!"

          aws cloudformation wait stack-create-complete --stack-name "${CLUSTER_NAME}-infra" &
          wait "$!"

          INFRA_JSON="$(aws cloudformation describe-stacks --stack-name "${CLUSTER_NAME}-infra" \
            --query 'Stacks[].Outputs[]' --output json)"
          NLB_IP_TARGETS_LAMBDA="$(echo "${INFRA_JSON}" | jq -r '.[] | select(.OutputKey == "RegisterNlbIpTargetsLambda").OutputValue')"
          EXTERNAL_API_TARGET_GROUP="$(echo "${INFRA_JSON}" | jq -r '.[] | select(.OutputKey == "ExternalApiTargetGroupArn").OutputValue')"
          INTERNAL_API_TARGET_GROUP="$(echo "${INFRA_JSON}" | jq -r '.[] | select(.OutputKey == "InternalApiTargetGroupArn").OutputValue')"
          INTERNAL_SERVICE_TARGET_GROUP="$(echo "${INFRA_JSON}" | jq -r '.[] | select(.OutputKey == "InternalServiceTargetGroupArn").OutputValue')"
          PRIVATE_HOSTED_ZONE="$(echo "${INFRA_JSON}" | jq -r '.[] | select(.OutputKey == "PrivateHostedZoneId").OutputValue')"

          aws cloudformation create-stack \
            --stack-name "${CLUSTER_NAME}-security" \
            --template-body "$(cat "/var/lib/openshift-install/upi/${CLUSTER_TYPE}/cloudformation/03_cluster_security.yaml")" \
            --tags "${TAGS}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters \
              ParameterKey=InfrastructureName,ParameterValue="${INFRA_ID}" \
              ParameterKey=VpcCidr,ParameterValue="${MACHINE_CIDR}" \
              ParameterKey=VpcId,ParameterValue="${VPC_ID}" \
              ParameterKey=PrivateSubnets,ParameterValue="${PRIVATE_SUBNETS}" &
          wait "$!"

          aws cloudformation wait stack-create-complete --stack-name "${CLUSTER_NAME}-security" &
          wait "$!"

          SECURITY_JSON="$(aws cloudformation describe-stacks --stack-name "${CLUSTER_NAME}-security" \
            --query 'Stacks[].Outputs[]' --output json)"
          MASTER_SECURITY_GROUP="$(echo "${SECURITY_JSON}" | jq -r '.[] | select(.OutputKey == "MasterSecurityGroupId").OutputValue')"
          MASTER_INSTANCE_PROFILE="$(echo "${SECURITY_JSON}" | jq -r '.[] | select(.OutputKey == "MasterInstanceProfile").OutputValue')"
          WORKER_SECURITY_GROUP="$(echo "${SECURITY_JSON}" | jq -r '.[] | select(.OutputKey == "WorkerSecurityGroupId").OutputValue')"
          WORKER_INSTANCE_PROFILE="$(echo "${SECURITY_JSON}" | jq -r '.[] | select(.OutputKey == "WorkerInstanceProfile").OutputValue')"

          if [[ "${CLUSTER_VARIANT}" =~ "proxy" ]]; then
            echo "creating proxy..."

            # define squid config
            SQUID_CONFIG="$(base64 -w0 << EOF
        http_port 3128
        sslpassword_program /squid/passwd.sh
        https_port 3130 cert=/squid/tls.crt key=/squid/tls.key cafile=/squid/ca-chain.pem
        cache deny all
        access_log stdio:/tmp/squid-access.log all
        debug_options ALL,1
        shutdown_lifetime 0
        auth_param basic program /usr/lib64/squid/basic_ncsa_auth /squid/passwords
        auth_param basic realm proxy
        acl authenticated proxy_auth REQUIRED
        http_access allow authenticated
        pid_filename /tmp/proxy-setup
        EOF
        )"

            # define squid.sh
            SQUID_SH="$(base64 -w0 << EOF
        #!/bin/bash
        podman run --entrypoint='["bash", "/squid/proxy.sh"]' --expose=3128 --net host --volume /tmp/squid:/squid:Z ${PROXY_IMAGE}
        EOF
        )"

            # define proxy.sh
            PROXY_SH="$(base64 -w0 << EOF
        #!/bin/bash
        function print_logs() {
          while [[ ! -f /tmp/squid-access.log ]]; do
            sleep 5
          done
          tail -f /tmp/squid-access.log
        }
        print_logs &
        squid -N -f /squid/squid.conf
        EOF
        )"

            # create ignition entries for certs and script to start squid and systemd unit entry
            # create the proxy stack and then get its IP
            generate_proxy_ignition
            generate_proxy_template

            PROXY_URI="https://${JOB_NAME_SAFE}-bootstrap-exporter-${NAMESPACE}.svc.ci.openshift.org/proxy.ign"

            aws cloudformation create-stack \
              --stack-name "${CLUSTER_NAME}-proxy" \
              --template-body "$(cat "/tmp/04_cluster_proxy.yaml")" \
              --tags "${TAGS}" \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameters \
                ParameterKey=InfrastructureName,ParameterValue="${INFRA_ID}" \
                ParameterKey=RhcosAmi,ParameterValue="${RHCOS_AMI}" \
                ParameterKey=PrivateHostedZoneId,ParameterValue="${PRIVATE_HOSTED_ZONE}" \
                ParameterKey=PrivateHostedZoneName,ParameterValue="${CLUSTER_NAME}.${base_domain}" \
                ParameterKey=ClusterName,ParameterValue="${CLUSTER_NAME}" \
                ParameterKey=VpcId,ParameterValue="${VPC_ID}" \
                ParameterKey=PublicSubnet,ParameterValue="${PUBLIC_SUBNETS%%,*}\"" \
                ParameterKey=MasterSecurityGroupId,ParameterValue="${MASTER_SECURITY_GROUP}" \
                ParameterKey=ProxyIgnitionLocation,ParameterValue="${PROXY_URI}" \
                ParameterKey=PrivateSubnets,ParameterValue="${PRIVATE_SUBNETS}" \
                ParameterKey=RegisterNlbIpTargetsLambdaArn,ParameterValue="${NLB_IP_TARGETS_LAMBDA}" \
                ParameterKey=ExternalApiTargetGroupArn,ParameterValue="${EXTERNAL_API_TARGET_GROUP}" \
                ParameterKey=InternalApiTargetGroupArn,ParameterValue="${INTERNAL_API_TARGET_GROUP}" \
                ParameterKey=InternalServiceTargetGroupArn,ParameterValue="${INTERNAL_SERVICE_TARGET_GROUP}" &
            wait "$!"

            aws cloudformation wait stack-create-complete --stack-name "${CLUSTER_NAME}-proxy" &
            wait "$!"

            PROXY_IP="$(aws cloudformation describe-stacks --stack-name "${CLUSTER_NAME}-proxy" \
              --query 'Stacks[].Outputs[?OutputKey == `ProxyPublicIp`].OutputValue' --output text)"

            echo "Proxy is available at ${PROXY_URL}"
            echo "TLS Proxy is available at ${TLS_PROXY_URL}"

            echo ${PROXY_IP} > ${ARTIFACT_DIR}/installer/proxyip
          fi

          aws cloudformation create-stack \
            --stack-name "${CLUSTER_NAME}-bootstrap" \
            --template-body "$(cat "/var/lib/openshift-install/upi/${CLUSTER_TYPE}/cloudformation/04_cluster_bootstrap.yaml")" \
            --tags "${TAGS}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters \
              ParameterKey=InfrastructureName,ParameterValue="${INFRA_ID}" \
              ParameterKey=RhcosAmi,ParameterValue="${RHCOS_AMI}" \
              ParameterKey=VpcId,ParameterValue="${VPC_ID}" \
              ParameterKey=PublicSubnet,ParameterValue="${PUBLIC_SUBNETS%%,*}\"" \
              ParameterKey=MasterSecurityGroupId,ParameterValue="${MASTER_SECURITY_GROUP}" \
              ParameterKey=VpcId,ParameterValue="${VPC_ID}" \
              ParameterKey=BootstrapIgnitionLocation,ParameterValue="${BOOTSTRAP_URI}" \
              ParameterKey=RegisterNlbIpTargetsLambdaArn,ParameterValue="${NLB_IP_TARGETS_LAMBDA}" \
              ParameterKey=ExternalApiTargetGroupArn,ParameterValue="${EXTERNAL_API_TARGET_GROUP}" \
              ParameterKey=InternalApiTargetGroupArn,ParameterValue="${INTERNAL_API_TARGET_GROUP}" \
              ParameterKey=InternalServiceTargetGroupArn,ParameterValue="${INTERNAL_SERVICE_TARGET_GROUP}" &
          wait "$!"

          aws cloudformation wait stack-create-complete --stack-name "${CLUSTER_NAME}-bootstrap" &
          wait "$!"

          BOOTSTRAP_IP="$(aws cloudformation describe-stacks --stack-name "${CLUSTER_NAME}-bootstrap" \
            --query 'Stacks[].Outputs[?OutputKey == `BootstrapPublicIp`].OutputValue' --output text)"
          GATHER_BOOTSTRAP_ARGS="${GATHER_BOOTSTRAP_ARGS} --bootstrap ${BOOTSTRAP_IP}"

          aws cloudformation create-stack \
            --stack-name "${CLUSTER_NAME}-control-plane" \
            --template-body "$(cat "/var/lib/openshift-install/upi/${CLUSTER_TYPE}/cloudformation/05_cluster_master_nodes.yaml")" \
            --tags "${TAGS}" \
            --parameters \
              ParameterKey=InfrastructureName,ParameterValue="${INFRA_ID}" \
              ParameterKey=RhcosAmi,ParameterValue="${RHCOS_AMI}" \
              ParameterKey=PrivateHostedZoneId,ParameterValue="${PRIVATE_HOSTED_ZONE}" \
              ParameterKey=PrivateHostedZoneName,ParameterValue="${CLUSTER_NAME}.${base_domain}" \
              ParameterKey=Master0Subnet,ParameterValue="${PRIVATE_SUBNET_0}" \
              ParameterKey=Master1Subnet,ParameterValue="${PRIVATE_SUBNET_1}" \
              ParameterKey=Master2Subnet,ParameterValue="${PRIVATE_SUBNET_2}" \
              ParameterKey=MasterSecurityGroupId,ParameterValue="${MASTER_SECURITY_GROUP}" \
              ParameterKey=IgnitionLocation,ParameterValue="https://api-int.${CLUSTER_NAME}.${base_domain}:22623/config/master" \
              ParameterKey=CertificateAuthorities,ParameterValue="${IGNITION_CA}" \
              ParameterKey=MasterInstanceProfileName,ParameterValue="${MASTER_INSTANCE_PROFILE}" \
              ParameterKey=RegisterNlbIpTargetsLambdaArn,ParameterValue="${NLB_IP_TARGETS_LAMBDA}" \
              ParameterKey=ExternalApiTargetGroupArn,ParameterValue="${EXTERNAL_API_TARGET_GROUP}" \
              ParameterKey=InternalApiTargetGroupArn,ParameterValue="${INTERNAL_API_TARGET_GROUP}" \
              ParameterKey=InternalServiceTargetGroupArn,ParameterValue="${INTERNAL_SERVICE_TARGET_GROUP}" &
          wait "$!"

          aws cloudformation wait stack-create-complete --stack-name "${CLUSTER_NAME}-control-plane" &
          wait "$!"

          aws cloudformation wait stack-create-complete --stack-name "${CLUSTER_NAME}-control-plane"
          CONTROL_PLANE_IPS="$(aws cloudformation describe-stacks --stack-name "${CLUSTER_NAME}-control-plane" --query 'Stacks[].Outputs[?OutputKey == `PrivateIPs`].OutputValue' --output text)"
          CONTROL_PLANE_0_IP="$(echo "${CONTROL_PLANE_IPS}" | cut -d, -f1)"
          CONTROL_PLANE_1_IP="$(echo "${CONTROL_PLANE_IPS}" | cut -d, -f2)"
          CONTROL_PLANE_2_IP="$(echo "${CONTROL_PLANE_IPS}" | cut -d, -f3)"
          GATHER_BOOTSTRAP_ARGS="${GATHER_BOOTSTRAP_ARGS} --master ${CONTROL_PLANE_0_IP} --master ${CONTROL_PLANE_1_IP} --master ${CONTROL_PLANE_2_IP}"

          for INDEX in 0 1 2
          do
            SUBNET="PRIVATE_SUBNET_${INDEX}"
            aws cloudformation create-stack \
              --stack-name "${CLUSTER_NAME}-compute-${INDEX}" \
              --template-body "$(cat "/var/lib/openshift-install/upi/${CLUSTER_TYPE}/cloudformation/06_cluster_worker_node.yaml")" \
              --tags "${TAGS}" \
              --parameters \
                ParameterKey=InfrastructureName,ParameterValue="${INFRA_ID}" \
                ParameterKey=RhcosAmi,ParameterValue="${RHCOS_AMI}" \
                ParameterKey=Subnet,ParameterValue="${!SUBNET}" \
                ParameterKey=WorkerSecurityGroupId,ParameterValue="${WORKER_SECURITY_GROUP}" \
                ParameterKey=IgnitionLocation,ParameterValue="https://api-int.${CLUSTER_NAME}.${base_domain}:22623/config/worker" \
                ParameterKey=CertificateAuthorities,ParameterValue="${IGNITION_CA}" \
                ParameterKey=WorkerInstanceType,ParameterValue=m4.xlarge \
                ParameterKey=WorkerInstanceProfileName,ParameterValue="${WORKER_INSTANCE_PROFILE}" &
            wait "$!"

            aws cloudformation wait stack-create-complete --stack-name "${CLUSTER_NAME}-compute-${INDEX}" &
            wait "$!"

            COMPUTE_VAR="COMPUTE_${INDEX}_IP"
            COMPUTE_IP="$(aws cloudformation describe-stacks --stack-name "${CLUSTER_NAME}-compute-${INDEX}" --query 'Stacks[].Outputs[?OutputKey == `PrivateIP`].OutputValue' --output text)"
            eval "${COMPUTE_VAR}=\${COMPUTE_IP}"
          done

          echo "bootstrap: ${BOOTSTRAP_IP} control-plane: ${CONTROL_PLANE_0_IP} ${CONTROL_PLANE_1_IP} ${CONTROL_PLANE_2_IP} compute: ${COMPUTE_0_IP} ${COMPUTE_1_IP}"
        elif [[ "${CLUSTER_TYPE}" == "gcp" ]]; then
          mkdir -p ${HOME}/gcp

          # Copy sample UPI files
          cp -r /var/lib/openshift-install/upi/${CLUSTER_TYPE}/* ${HOME}/gcp

          # Download, install, and configure gcloud
          pushd ${HOME}
          curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-256.0.0-linux-x86_64.tar.gz
          tar -xzf google-cloud-sdk-256.0.0-linux-x86_64.tar.gz
          export PATH=${HOME}/google-cloud-sdk/bin:${PATH}
          popd
          mkdir -p ${HOME}/gcloudconfig
          export CLOUDSDK_CONFIG=${HOME}/gcloudconfig
          gcloud auth activate-service-account --key-file="${GOOGLE_CLOUD_KEYFILE_JSON}"
          gcloud config set project openshift-gce-devel-ci

          # Install pyopenssl
          export PATH=${HOME}/.local/bin:${PATH}
          easy_install --user 'pip<21'
          pip install --user pyopenssl

          export BASE_DOMAIN_ZONE_NAME=$(gcloud dns managed-zones list --filter "DNS_NAME=${base_domain}." --format json | jq -r .[0].name)
          export NETWORK_CIDR='10.0.0.0/16'
          export MASTER_SUBNET_CIDR='10.0.0.0/19'
          export WORKER_SUBNET_CIDR='10.0.32.0/19'

          export KUBECONFIG=${HOME}/artifacts/installer/auth/kubeconfig
          export CLUSTER_NAME=$(jq -r .clusterName ${HOME}/artifacts/installer/metadata.json)
          export INFRA_ID=$(jq -r .infraID ${HOME}/artifacts/installer/metadata.json)
          export PROJECT_NAME=$(jq -r .gcp.projectID ${HOME}/artifacts/installer/metadata.json)
          export REGION=$(jq -r .gcp.region ${HOME}/artifacts/installer/metadata.json)
          export ZONE_0=$(gcloud compute regions describe ${REGION} --format=json | jq -r .zones[0] | cut -d "/" -f9)
          export ZONE_1=$(gcloud compute regions describe ${REGION} --format=json | jq -r .zones[1] | cut -d "/" -f9)
          export ZONE_2=$(gcloud compute regions describe ${REGION} --format=json | jq -r .zones[2] | cut -d "/" -f9)

          export MASTER_IGNITION=$(cat ${HOME}/artifacts/installer/master.ign)
          export WORKER_IGNITION=$(cat ${HOME}/artifacts/installer/worker.ign)

          pushd ${HOME}/gcp

          # Deploy vpc
          cat <<EOF > 01_vpc.yaml
        imports:
        - path: 01_vpc.py
        resources:
        - name: cluster-vpc
          type: 01_vpc.py
          properties:
            infra_id: '${INFRA_ID}'
            region: '${REGION}'
            master_subnet_cidr: '${MASTER_SUBNET_CIDR}'
            worker_subnet_cidr: '${WORKER_SUBNET_CIDR}'
        EOF

          gcloud deployment-manager deployments create ${CLUSTER_NAME}-vpc --config 01_vpc.yaml

          export CLUSTER_NETWORK=$(gcloud compute networks describe ${INFRA_ID}-network --format json | jq -r .selfLink)
          export CONTROL_SUBNET=$(gcloud compute networks subnets describe ${INFRA_ID}-master-subnet --region=${REGION} --format json | jq -r .selfLink)
          export COMPUTE_SUBNET=$(gcloud compute networks subnets describe ${INFRA_ID}-worker-subnet --region=${REGION} --format json | jq -r .selfLink)

          # Deploy infra
          if [ -f 02_lb_int.py ]; then # for internal lb workflow using 02_lb_int.py
            cat <<EOF > 02_infra.yaml
        imports:
        - path: 02_dns.py
        - path: 02_lb_ext.py
        - path: 02_lb_int.py
        resources:
        - name: cluster-dns
          type: 02_dns.py
          properties:
            infra_id: '${INFRA_ID}'
            cluster_domain: '${CLUSTER_NAME}.${base_domain}'
            cluster_network: '${CLUSTER_NETWORK}'
        - name: cluster-lb-ext
          type: 02_lb_ext.py
          properties:
            infra_id: '${INFRA_ID}'
            region: '${REGION}'
        - name: cluster-lb-int
          type: 02_lb_int.py
          properties:
            cluster_network: '${CLUSTER_NETWORK}'
            control_subnet: '${CONTROL_SUBNET}'
            infra_id: '${INFRA_ID}'
            region: '${REGION}'
            zones:
            - '${ZONE_0}'
            - '${ZONE_1}'
            - '${ZONE_2}'
        EOF
          elif [ -f 02_dns.py ]; then # for broken up workflow using 02_dns.py
            cat <<EOF > 02_infra.yaml
        imports:
        - path: 02_dns.py
        - path: 02_lb_ext.py
        resources:
        - name: cluster-dns
          type: 02_dns.py
          properties:
            infra_id: '${INFRA_ID}'
            cluster_domain: '${CLUSTER_NAME}.${base_domain}'
            cluster_network: '${CLUSTER_NETWORK}'
        - name: cluster-lb-ext
          type: 02_lb_ext.py
          properties:
            infra_id: '${INFRA_ID}'
            region: '${REGION}'
        EOF
          else # for older workflow not using 02_dns.py
            cat <<EOF > 02_infra.yaml
        imports:
        - path: 02_infra.py
        resources:
        - name: cluster-infra
          type: 02_infra.py
          properties:
            infra_id: '${INFRA_ID}'
            region: '${REGION}'
            cluster_domain: '${CLUSTER_NAME}.${base_domain}'
            cluster_network: '${CLUSTER_NETWORK}'
        EOF
          fi

          gcloud deployment-manager deployments create ${CLUSTER_NAME}-infra --config 02_infra.yaml

          if [ -f 02_lb_int.py ]; then # for internal lb workflow using 02_lb_int.py
            export CLUSTER_IP=$(gcloud compute addresses describe ${INFRA_ID}-cluster-ip --region=${REGION} --format json | jq -r .address)
          else # for older workflow
            export CLUSTER_IP=$(gcloud compute addresses describe ${INFRA_ID}-cluster-public-ip --region=${REGION} --format json | jq -r .address)
          fi
          export CLUSTER_PUBLIC_IP=$(gcloud compute addresses describe ${INFRA_ID}-cluster-public-ip --region=${REGION} --format json | jq -r .address)

          # Add internal DNS entries
          if [ -f transaction.yaml ]; then rm transaction.yaml; fi
          gcloud dns record-sets transaction start --zone ${INFRA_ID}-private-zone
          gcloud dns record-sets transaction add ${CLUSTER_IP} --name api.${CLUSTER_NAME}.${base_domain}. --ttl 60 --type A --zone ${INFRA_ID}-private-zone
          gcloud dns record-sets transaction add ${CLUSTER_IP} --name api-int.${CLUSTER_NAME}.${base_domain}. --ttl 60 --type A --zone ${INFRA_ID}-private-zone
          gcloud dns record-sets transaction execute --zone ${INFRA_ID}-private-zone

          # Add external DNS entries
          if [ -f transaction.yaml ]; then rm transaction.yaml; fi
          gcloud dns record-sets transaction start --zone ${BASE_DOMAIN_ZONE_NAME}
          gcloud dns record-sets transaction add ${CLUSTER_PUBLIC_IP} --name api.${CLUSTER_NAME}.${base_domain}. --ttl 60 --type A --zone ${BASE_DOMAIN_ZONE_NAME}
          gcloud dns record-sets transaction execute --zone ${BASE_DOMAIN_ZONE_NAME}

          # Deploy security
          if [ -f 02_lb_int.py ]; then # for internal lb workflow using 02_lb_int.py
            cat <<EOF > 03_security.yaml
        imports:
        - path: 03_firewall.py
        - path: 03_iam.py
        resources:
        - name: cluster-firewall
          type: 03_firewall.py
          properties:
            allowed_external_cidr: '0.0.0.0/0'
            infra_id: '${INFRA_ID}'
            cluster_network: '${CLUSTER_NETWORK}'
            network_cidr: '${NETWORK_CIDR}'
        - name: cluster-iam
          type: 03_iam.py
          properties:
            infra_id: '${INFRA_ID}'
        EOF
          elif [ -f 03_firewall.py ]; then # for broken up workflow using 03_firewall.py
            export MASTER_NAT_IP=$(gcloud compute addresses describe ${INFRA_ID}-master-nat-ip --region ${REGION} --format json | jq -r .address)
            export WORKER_NAT_IP=$(gcloud compute addresses describe ${INFRA_ID}-worker-nat-ip --region ${REGION} --format json | jq -r .address)
            cat <<EOF > 03_security.yaml
        imports:
        - path: 03_firewall.py
        - path: 03_iam.py
        resources:
        - name: cluster-firewall
          type: 03_firewall.py
          properties:
            infra_id: '${INFRA_ID}'
            cluster_network: '${CLUSTER_NETWORK}'
            network_cidr: '${NETWORK_CIDR}'
            master_nat_ip: '${MASTER_NAT_IP}'
            worker_nat_ip: '${WORKER_NAT_IP}'
        - name: cluster-iam
          type: 03_iam.py
          properties:
            infra_id: '${INFRA_ID}'
        EOF
          else # for older workflow not using 03_firewall.py
            export MASTER_NAT_IP=$(gcloud compute addresses describe ${INFRA_ID}-master-nat-ip --region ${REGION} --format json | jq -r .address)
            export WORKER_NAT_IP=$(gcloud compute addresses describe ${INFRA_ID}-worker-nat-ip --region ${REGION} --format json | jq -r .address)
            cat <<EOF > 03_security.yaml
        imports:
        - path: 03_security.py
        resources:
        - name: cluster-security
          type: 03_security.py
          properties:
            infra_id: '${INFRA_ID}'
            cluster_network: '${CLUSTER_NETWORK}'
            network_cidr: '${NETWORK_CIDR}'
            master_nat_ip: '${MASTER_NAT_IP}'
            worker_nat_ip: '${WORKER_NAT_IP}'
        EOF
          fi

          gcloud deployment-manager deployments create ${CLUSTER_NAME}-security --config 03_security.yaml

          export MASTER_SERVICE_ACCOUNT=$(gcloud iam service-accounts list --filter "email~^${INFRA_ID}-m@${PROJECT_NAME}." --format json | jq -r '.[0].email')
          export WORKER_SERVICE_ACCOUNT=$(gcloud iam service-accounts list --filter "email~^${INFRA_ID}-w@${PROJECT_NAME}." --format json | jq -r '.[0].email')

          backoff gcloud projects add-iam-policy-binding ${PROJECT_NAME} --member "serviceAccount:${MASTER_SERVICE_ACCOUNT}" --role "roles/compute.instanceAdmin"
          backoff gcloud projects add-iam-policy-binding ${PROJECT_NAME} --member "serviceAccount:${MASTER_SERVICE_ACCOUNT}" --role "roles/compute.networkAdmin"
          backoff gcloud projects add-iam-policy-binding ${PROJECT_NAME} --member "serviceAccount:${MASTER_SERVICE_ACCOUNT}" --role "roles/compute.securityAdmin"
          backoff gcloud projects add-iam-policy-binding ${PROJECT_NAME} --member "serviceAccount:${MASTER_SERVICE_ACCOUNT}" --role "roles/iam.serviceAccountUser"
          backoff gcloud projects add-iam-policy-binding ${PROJECT_NAME} --member "serviceAccount:${MASTER_SERVICE_ACCOUNT}" --role "roles/storage.admin"

          backoff gcloud projects add-iam-policy-binding ${PROJECT_NAME} --member "serviceAccount:${WORKER_SERVICE_ACCOUNT}" --role "roles/compute.viewer"
          backoff gcloud projects add-iam-policy-binding ${PROJECT_NAME} --member "serviceAccount:${WORKER_SERVICE_ACCOUNT}" --role "roles/storage.admin"

          gcloud iam service-accounts keys create service-account-key.json --iam-account=${MASTER_SERVICE_ACCOUNT}

          # Deploy bootstrap
          export IMAGE_SOURCE=$(cat /var/lib/openshift-install/rhcos.json | jq -r .gcp.url)
          gcloud compute images create "${INFRA_ID}-rhcos-image" --source-uri="${IMAGE_SOURCE}"
          export CLUSTER_IMAGE=$(gcloud compute images describe ${INFRA_ID}-rhcos-image --format json | jq -r .selfLink)

          gsutil mb gs://${INFRA_ID}-bootstrap-ignition
          gsutil cp ${HOME}/artifacts/installer/bootstrap.ign gs://${INFRA_ID}-bootstrap-ignition/

          export BOOTSTRAP_IGN=$(gsutil signurl -d 1h service-account-key.json gs://${INFRA_ID}-bootstrap-ignition/bootstrap.ign | grep "^gs:" | awk '{print $5}')

          cat <<EOF > 04_bootstrap.yaml
        imports:
        - path: 04_bootstrap.py
        resources:
        - name: cluster-bootstrap
          type: 04_bootstrap.py
          properties:
            infra_id: '${INFRA_ID}'
            region: '${REGION}'
            zone: '${ZONE_0}'
            cluster_network: '${CLUSTER_NETWORK}'
            control_subnet: '${CONTROL_SUBNET}'
            image: '${CLUSTER_IMAGE}'
            machine_type: 'n1-standard-4'
            root_volume_size: '128'
            bootstrap_ign: '${BOOTSTRAP_IGN}'
        EOF

          gcloud deployment-manager deployments create ${CLUSTER_NAME}-bootstrap --config 04_bootstrap.yaml

          if [ -f 02_lb_int.py ]; then # for internal lb workflow using 02_lb_int.py
            gcloud compute instance-groups unmanaged add-instances ${INFRA_ID}-bootstrap-instance-group --zone=${ZONE_0} --instances=${INFRA_ID}-bootstrap
            gcloud compute backend-services add-backend ${INFRA_ID}-api-internal-backend-service --region=${REGION} --instance-group=${INFRA_ID}-bootstrap-instance-group --instance-group-zone=${ZONE_0}
          else # for older workflow
            gcloud compute target-pools add-instances ${INFRA_ID}-ign-target-pool --instances-zone="${ZONE_0}" --instances=${INFRA_ID}-bootstrap
            gcloud compute target-pools add-instances ${INFRA_ID}-api-target-pool --instances-zone=${ZONE_0} --instances=${INFRA_ID}-bootstrap
          fi

          BOOTSTRAP_IP=$(gcloud compute instances describe ${INFRA_ID}-bootstrap --zone ${ZONE_0} --format json | jq -r .networkInterfaces[0].networkIP)
          GATHER_BOOTSTRAP_ARGS="${GATHER_BOOTSTRAP_ARGS} --bootstrap ${BOOTSTRAP_IP}"

          # Deploy control plane
          cat <<EOF > 05_control_plane.yaml
        imports:
        - path: 05_control_plane.py
        resources:
        - name: cluster-control-plane
          type: 05_control_plane.py
          properties:
            infra_id: '${INFRA_ID}'
            zones:
            - '${ZONE_0}'
            - '${ZONE_1}'
            - '${ZONE_2}'
            control_subnet: '${CONTROL_SUBNET}'
            image: '${CLUSTER_IMAGE}'
            machine_type: 'n1-standard-4'
            root_volume_size: '128'
            service_account_email: '${MASTER_SERVICE_ACCOUNT}'
            ignition: '${MASTER_IGNITION}'
        EOF

          gcloud deployment-manager deployments create ${CLUSTER_NAME}-control-plane --config 05_control_plane.yaml

          export MASTER0_IP=$(gcloud compute instances describe ${INFRA_ID}-m-0 --zone ${ZONE_0} --format json | jq -r .networkInterfaces[0].networkIP)
          export MASTER1_IP=$(gcloud compute instances describe ${INFRA_ID}-m-1 --zone ${ZONE_1} --format json | jq -r .networkInterfaces[0].networkIP)
          export MASTER2_IP=$(gcloud compute instances describe ${INFRA_ID}-m-2 --zone ${ZONE_2} --format json | jq -r .networkInterfaces[0].networkIP)

          if [ -f transaction.yaml ]; then rm transaction.yaml; fi
          gcloud dns record-sets transaction start --zone ${INFRA_ID}-private-zone
          gcloud dns record-sets transaction add ${MASTER0_IP} --name etcd-0.${CLUSTER_NAME}.${base_domain}. --ttl 60 --type A --zone ${INFRA_ID}-private-zone
          gcloud dns record-sets transaction add ${MASTER1_IP} --name etcd-1.${CLUSTER_NAME}.${base_domain}. --ttl 60 --type A --zone ${INFRA_ID}-private-zone
          gcloud dns record-sets transaction add ${MASTER2_IP} --name etcd-2.${CLUSTER_NAME}.${base_domain}. --ttl 60 --type A --zone ${INFRA_ID}-private-zone
          gcloud dns record-sets transaction add \
            "0 10 2380 etcd-0.${CLUSTER_NAME}.${base_domain}." \
            "0 10 2380 etcd-1.${CLUSTER_NAME}.${base_domain}." \
            "0 10 2380 etcd-2.${CLUSTER_NAME}.${base_domain}." \
            --name _etcd-server-ssl._tcp.${CLUSTER_NAME}.${base_domain}. --ttl 60 --type SRV --zone ${INFRA_ID}-private-zone
          gcloud dns record-sets transaction execute --zone ${INFRA_ID}-private-zone

          if [ -f 02_lb_int.py ]; then # for internal lb workflow using 02_lb_int.py
            gcloud compute instance-groups unmanaged add-instances ${INFRA_ID}-master-${ZONE_0}-instance-group --zone=${ZONE_0} --instances=${INFRA_ID}-m-0
            gcloud compute instance-groups unmanaged add-instances ${INFRA_ID}-master-${ZONE_1}-instance-group --zone=${ZONE_1} --instances=${INFRA_ID}-m-1
            gcloud compute instance-groups unmanaged add-instances ${INFRA_ID}-master-${ZONE_2}-instance-group --zone=${ZONE_2} --instances=${INFRA_ID}-m-2
          else # for older workflow
            gcloud compute target-pools add-instances ${INFRA_ID}-ign-target-pool --instances-zone="${ZONE_0}" --instances=${INFRA_ID}-m-0
            gcloud compute target-pools add-instances ${INFRA_ID}-ign-target-pool --instances-zone="${ZONE_1}" --instances=${INFRA_ID}-m-1
            gcloud compute target-pools add-instances ${INFRA_ID}-ign-target-pool --instances-zone="${ZONE_2}" --instances=${INFRA_ID}-m-2
          fi

          gcloud compute target-pools add-instances ${INFRA_ID}-api-target-pool --instances-zone="${ZONE_0}" --instances=${INFRA_ID}-m-0
          gcloud compute target-pools add-instances ${INFRA_ID}-api-target-pool --instances-zone="${ZONE_1}" --instances=${INFRA_ID}-m-1
          gcloud compute target-pools add-instances ${INFRA_ID}-api-target-pool --instances-zone="${ZONE_2}" --instances=${INFRA_ID}-m-2

          GATHER_BOOTSTRAP_ARGS="${GATHER_BOOTSTRAP_ARGS} --master ${MASTER0_IP} --master ${MASTER1_IP} --master ${MASTER2_IP}"

          # Deploy compute
          export ZONES=($(gcloud compute regions describe ${REGION} --format=json | jq -r .zones[] | cut -d '/' -f9))
          cat <<EOF > 06_worker.yaml
        imports:
        - path: 06_worker.py
        resources:
        EOF

          for compute in {0..2}; do
          cat <<EOF >> 06_worker.yaml
        - name: 'w-${compute}'
          type: 06_worker.py
          properties:
            infra_id: '${INFRA_ID}'
            zone: '${ZONES[(( $compute % ${#ZONES[@]} ))]}'
            compute_subnet: '${COMPUTE_SUBNET}'
            image: '${CLUSTER_IMAGE}'
            machine_type: 'n1-standard-4'
            root_volume_size: '128'
            service_account_email: '${WORKER_SERVICE_ACCOUNT}'
            ignition: '${WORKER_IGNITION}'
        EOF
          done;

          gcloud deployment-manager deployments create ${CLUSTER_NAME}-worker --config 06_worker.yaml

          popd

        elif [[ "${CLUSTER_TYPE}" == "vsphere" ]]; then
          mkdir -p /tmp/tf

          # Copy sample UPI files
          cp -r /var/lib/openshift-install/upi/${CLUSTER_TYPE}/* /tmp/tf

          # Copy Ignition to terraform directory
          cp ${ARTIFACT_DIR}/installer/*.ign /tmp/tf

          # Create terraform.tfvars
          export MASTER_IGN=$(cat ${ARTIFACT_DIR}/installer/master.ign)
          export WORKER_IGN=$(cat ${ARTIFACT_DIR}/installer/worker.ign)

          cat > /tmp/tf/terraform.tfvars <<-EOF
          machine_cidr = "139.178.94.128/25"

          vm_template = "${VM_TEMPLATE}"

          vsphere_cluster = "devel"

          vsphere_datacenter = "dc1"

          vsphere_datastore = "vsanDatastore"

          vsphere_server = "vcsa-ci.vmware.devcluster.openshift.com"

          ipam = "139.178.89.254"

          cluster_id = "${CLUSTER_NAME}"

          base_domain = "${base_domain}"

          cluster_domain = "${CLUSTER_NAME}.${base_domain}"

          bootstrap_ignition_url = "${BOOTSTRAP_URI}"

          // Ignition config for the control plane machines. You should copy the contents of the master.ign generated by the installer.
          control_plane_ignition = <<END_OF_MASTER_IGNITION
          ${MASTER_IGN}
          END_OF_MASTER_IGNITION

          // Ignition config for the compute machines. You should copy the contents of the worker.ign generated by the installer.
          compute_ignition = <<END_OF_WORKER_IGNITION
          ${WORKER_IGN}
          END_OF_WORKER_IGNITION

          ssh_public_key_path = "${SSH_PUB_KEY_PATH}"

          compute_memory = "16384"
          compute_num_cpus = "4"
        EOF

          # Copy secret tfvars
          cp ${TFVARS_PATH} /tmp/tf

          cd /tmp/tf
          echo "Creating infra"
          terraform init -input=false -no-color &
          wait "$!"

          terraform apply -auto-approve -no-color &
          wait "$!"

        elif [[ "${CLUSTER_TYPE}" == "azure4" ]]; then
          mkdir -p /tmp/azure

          # Copy sample UPI files
          cp -r /var/lib/openshift-install/upi/azure/* /tmp/azure

          echo "az version:"
          az version

          echo "Logging in with az"
          AZURE_AUTH_CLIENT_ID=$(cat $AZURE_AUTH_LOCATION | jq -r .clientId)
          AZURE_AUTH_CLIENT_SECRET=$(cat $AZURE_AUTH_LOCATION | jq -r .clientSecret)
          AZURE_AUTH_TENANT_ID=$(cat $AZURE_AUTH_LOCATION | jq -r .tenantId)
          az login --service-principal -u $AZURE_AUTH_CLIENT_ID -p "$AZURE_AUTH_CLIENT_SECRET" --tenant $AZURE_AUTH_TENANT_ID

          INFRA_ID="$(jq -r .infraID ${ARTIFACT_DIR}/installer/metadata.json)"
          RESOURCE_GROUP="${INFRA_ID}-rg"
          echo "Infra ID: ${INFRA_ID}"

          echo "Creating resource group ${RESOURCE_GROUP}"
          az group create --name $RESOURCE_GROUP --location $AZURE_REGION

          echo "Creating identity"
          az identity create -g $RESOURCE_GROUP -n ${INFRA_ID}-identity

          ACCOUNT_NAME=$(echo ${CLUSTER_NAME}sa | tr -cd '[:alnum:]')

          echo "Creating storage account"
          az storage account create -g $RESOURCE_GROUP --location $AZURE_REGION --name $ACCOUNT_NAME --kind Storage --sku Standard_LRS
          ACCOUNT_KEY=$(az storage account keys list -g $RESOURCE_GROUP --account-name $ACCOUNT_NAME --query "[0].value" -o tsv)

          VHD_URL="$(cat /var/lib/openshift-install/rhcos.json | jq -r .azure.url)"

          echo "Copying VHD image from ${VHD_URL}"
          az storage container create --name vhd --account-name $ACCOUNT_NAME --auth-mode login

          status="false"
          while [ "$status" == "false" ]
          do
            status=$(az storage container exists --account-name $ACCOUNT_NAME --name vhd --auth-mode login -o tsv --query exists)
          done

          az storage blob copy start --account-name $ACCOUNT_NAME --account-key $ACCOUNT_KEY --destination-container vhd --destination-blob "rhcos.vhd" --source-uri "$VHD_URL"
          status="false"
          while [ "$status" == "false" ]
          do
            status=$(az storage blob exists --account-name $ACCOUNT_NAME --account-key $ACCOUNT_KEY --container-name vhd --name "rhcos.vhd" -o tsv --query exists)
          done

          status="pending"
          while [ "$status" == "pending" ]
          do
            status=$(az storage blob show --account-name $ACCOUNT_NAME --account-key $ACCOUNT_KEY --container-name vhd --name "rhcos.vhd" -o tsv --query properties.copy.status)
          done
          if [[ "$status" != "success" ]]; then
            echo "Error copying VHD image ${VHD_URL}"
            exit 1
          fi

          echo "Uploading bootstrap.ign"
          az storage container create --name files --account-name $ACCOUNT_NAME --public-access blob
          az storage blob upload --account-name $ACCOUNT_NAME --account-key $ACCOUNT_KEY -c "files" -f "${ARTIFACT_DIR}/installer/bootstrap.ign" -n "bootstrap.ign"

          echo "Creating private DNS zone"
          az network private-dns zone create -g $RESOURCE_GROUP -n ${CLUSTER_NAME}.${base_domain}

          PRINCIPAL_ID=$(az identity show -g $RESOURCE_GROUP -n ${INFRA_ID}-identity --query principalId --out tsv)
          echo "Assigning 'Contributor' role to principal ID ${PRINCIPAL_ID}"
          RESOURCE_GROUP_ID=$(az group show -g $RESOURCE_GROUP --query id --out tsv)
          az role assignment create --assignee "$PRINCIPAL_ID" --role 'Contributor' --scope "$RESOURCE_GROUP_ID"

          pushd /tmp/azure

          echo "Deploying 01_vnet"
          az deployment group create -g $RESOURCE_GROUP \
            --template-file "01_vnet.json" \
            --parameters baseName="$INFRA_ID"

          echo "Linking VNet to private DNS zone"
          az network private-dns link vnet create -g $RESOURCE_GROUP -z ${CLUSTER_NAME}.${base_domain} -n ${INFRA_ID}-network-link -v "${INFRA_ID}-vnet" -e false

          echo "Deploying 02_storage"
          VHD_BLOB_URL=$(az storage blob url --account-name $ACCOUNT_NAME --account-key $ACCOUNT_KEY -c vhd -n "rhcos.vhd" -o tsv)
          az deployment group create -g $RESOURCE_GROUP \
            --template-file "02_storage.json" \
            --parameters vhdBlobURL="${VHD_BLOB_URL}" \
            --parameters baseName="$INFRA_ID"

          echo "Deploying 03_infra"
          az deployment group create -g $RESOURCE_GROUP \
            --template-file "03_infra.json" \
            --parameters privateDNSZoneName="${CLUSTER_NAME}.${base_domain}" \
            --parameters baseName="$INFRA_ID"

          PUBLIC_IP=$(az network public-ip list -g $RESOURCE_GROUP --query "[?name=='${INFRA_ID}-master-pip'] | [0].ipAddress" -o tsv)
          echo "Creating 'api' record in public zone for IP ${PUBLIC_IP}"
          az network dns record-set a add-record -g $BASE_DOMAIN_RESOURCE_GROUP -z ${base_domain} -n api.${CLUSTER_NAME} -a $PUBLIC_IP --ttl 60

          echo "Deploying 04_bootstrap"
          BOOTSTRAP_URL=$(az storage blob url --account-name $ACCOUNT_NAME --account-key $ACCOUNT_KEY -c "files" -n "bootstrap.ign" -o tsv)
          IGNITION_VERSION=$(jq -r .ignition.version ${ARTIFACT_DIR}/installer/bootstrap.ign)
          BOOTSTRAP_IGNITION=$(jq -rcnM --arg v "${IGNITION_VERSION}" --arg url $BOOTSTRAP_URL '{ignition:{version:$v,config:{replace:{source:$url}}}}' | base64 -w0)
          az deployment group create -g $RESOURCE_GROUP \
            --template-file "04_bootstrap.json" \
            --parameters bootstrapIgnition="$BOOTSTRAP_IGNITION" \
            --parameters sshKeyData="$SSH_PUB_KEY" \
            --parameters baseName="$INFRA_ID"

          BOOTSTRAP_PUBLIC_IP=$(az network public-ip list -g $RESOURCE_GROUP --query "[?name=='${INFRA_ID}-bootstrap-ssh-pip'] | [0].ipAddress" -o tsv)
          GATHER_BOOTSTRAP_ARGS="${GATHER_BOOTSTRAP_ARGS} --bootstrap ${BOOTSTRAP_PUBLIC_IP}"

          echo "Deploying 05_masters"
          MASTER_IGNITION=$(cat ${ARTIFACT_DIR}/installer/master.ign | base64 -w0)
          az deployment group create -g $RESOURCE_GROUP \
            --template-file "05_masters.json" \
            --parameters masterIgnition="$MASTER_IGNITION" \
            --parameters sshKeyData="$SSH_PUB_KEY" \
            --parameters privateDNSZoneName="${CLUSTER_NAME}.${base_domain}" \
            --parameters baseName="$INFRA_ID"

          MASTER0_IP=$(az network nic ip-config show -g $RESOURCE_GROUP --nic-name ${INFRA_ID}-master-0-nic --name pipConfig --query "privateIpAddress" -o tsv)
          MASTER1_IP=$(az network nic ip-config show -g $RESOURCE_GROUP --nic-name ${INFRA_ID}-master-1-nic --name pipConfig --query "privateIpAddress" -o tsv)
          MASTER2_IP=$(az network nic ip-config show -g $RESOURCE_GROUP --nic-name ${INFRA_ID}-master-2-nic --name pipConfig --query "privateIpAddress" -o tsv)
          GATHER_BOOTSTRAP_ARGS="${GATHER_BOOTSTRAP_ARGS} --master ${MASTER0_IP} --master ${MASTER1_IP} --master ${MASTER2_IP}"

          echo "Deploying 06_workers"
          export WORKER_IGNITION=$(cat ${ARTIFACT_DIR}/installer/worker.ign | base64 -w0)
          az deployment group create -g $RESOURCE_GROUP \
            --template-file "06_workers.json" \
            --parameters workerIgnition="$WORKER_IGNITION" \
            --parameters sshKeyData="$SSH_PUB_KEY" \
            --parameters baseName="$INFRA_ID"

          popd
        fi

        echo "Waiting for bootstrap to complete"
        openshift-install --dir=${ARTIFACT_DIR}/installer wait-for bootstrap-complete &
        wait "$!" || gather_bootstrap_and_fail

        echo "Bootstrap complete, destroying bootstrap resources"
        if [[ "${CLUSTER_TYPE}" == "aws" ]]; then
          aws cloudformation delete-stack --stack-name "${CLUSTER_NAME}-bootstrap" &
          wait "$!"

          aws cloudformation wait stack-delete-complete --stack-name "${CLUSTER_NAME}-bootstrap" &
          wait "$!"
        elif [[ "${CLUSTER_TYPE}" == "gcp" ]]; then
          if [ -f ${HOME}/gcp/02_lb_int.py ]; then # for internal lb workflow using 02_lb_int.py
            gcloud compute backend-services remove-backend ${INFRA_ID}-api-internal-backend-service --region=${REGION} --instance-group=${INFRA_ID}-bootstrap-instance-group --instance-group-zone=${ZONE_0}
          else # for older workflow
            gcloud compute target-pools remove-instances ${INFRA_ID}-ign-target-pool --instances-zone="${ZONE_0}" --instances=${INFRA_ID}-bootstrap
            gcloud compute target-pools remove-instances ${INFRA_ID}-api-target-pool --instances-zone="${ZONE_0}" --instances=${INFRA_ID}-bootstrap
          fi
          gsutil rm gs://${INFRA_ID}-bootstrap-ignition/bootstrap.ign
          gsutil rb gs://${INFRA_ID}-bootstrap-ignition
          gcloud deployment-manager deployments delete -q ${CLUSTER_NAME}-bootstrap
        elif [[ "${CLUSTER_TYPE}" == "vsphere" ]]; then
          # To ease debugging of ip address use
          host -t A "api.${CLUSTER_NAME}.${base_domain}"
          # Bootstrap is removed and the IPAM entry is also removed.  DNS is not updated.
          # Since the ip address has been released it will be used in another cluster.
          # Until an alternative solution can be found do not delete bootstrap.
          #terraform destroy -auto-approve -target module.bootstrap -no-color &
        elif [[ "${CLUSTER_TYPE}" == "azure4" ]]; then
          az network nsg rule delete -g $RESOURCE_GROUP --nsg-name ${INFRA_ID}-nsg --name bootstrap_ssh_in
          az vm stop -g $RESOURCE_GROUP --name ${INFRA_ID}-bootstrap
          az vm deallocate -g $RESOURCE_GROUP --name ${INFRA_ID}-bootstrap
          az vm delete -g $RESOURCE_GROUP --name ${INFRA_ID}-bootstrap --yes
          az disk delete -g $RESOURCE_GROUP --name ${INFRA_ID}-bootstrap_OSDisk --no-wait --yes
          az network nic delete -g $RESOURCE_GROUP --name ${INFRA_ID}-bootstrap-nic --no-wait
          az storage blob delete --account-key $ACCOUNT_KEY --account-name $ACCOUNT_NAME --container-name files --name bootstrap.ign
          az network public-ip delete -g $RESOURCE_GROUP --name ${INFRA_ID}-bootstrap-ssh-pip
        fi

        if [[ "${CLUSTER_TYPE}" == "azure4" ]]; then
          echo "Adding ingress DNS records"

          export KUBECONFIG=${ARTIFACT_DIR}/installer/auth/kubeconfig

          public_ip_router="<pending>"
          while [[ $public_ip_router =~ "pending" ]]
          do
            public_ip_router=$(oc -n openshift-ingress get service router-default --no-headers | awk '{print $4}')
            echo $public_ip_router
          done

          az network dns record-set a add-record -g $BASE_DOMAIN_RESOURCE_GROUP -z ${base_domain} -n *.apps.${CLUSTER_NAME} -a $public_ip_router --ttl 300

          az network private-dns record-set a create -g $RESOURCE_GROUP -z ${CLUSTER_NAME}.${base_domain} -n *.apps --ttl 300
          az network private-dns record-set a add-record -g $RESOURCE_GROUP -z ${CLUSTER_NAME}.${base_domain} -n *.apps -a $public_ip_router
        fi

        function approve_csrs() {
          oc version --client
          while true; do
            if [[ ! -f /tmp/install-complete ]]; then
              # even if oc get csr fails continue
              oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs --no-run-if-empty oc adm certificate approve || true
              sleep 15 & wait
              continue
            else
              break
            fi
          done
        }

        function update_image_registry() {
          while true; do
            sleep 10;
            oc get configs.imageregistry.operator.openshift.io/cluster > /dev/null && break
          done
          oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed","storage":{"emptyDir":{}}}}'
        }

        echo "Approving pending CSRs"
        export KUBECONFIG=${ARTIFACT_DIR}/installer/auth/kubeconfig
        approve_csrs &

        if [[ "${CLUSTER_TYPE}" == "vsphere" ]]; then
          update_image_registry &
        fi

        set +x
        echo "Completing UPI setup"
        openshift-install --dir=${ARTIFACT_DIR}/installer wait-for install-complete 2>&1 | grep --line-buffered -v password &
        wait "$!"

        # Password for the cluster gets leaked in the installer logs and hence removing them.
        sed -i 's/password: .*/password: REDACTED"/g' ${ARTIFACT_DIR}/installer/.openshift_install.log
        # The image registry in some instances the config object
        # is not properly configured. Rerun patching
        # after cluster complete
        if [[ "${CLUSTER_TYPE}" == "vsphere" ]]; then
          update_image_registry
        fi
        touch /tmp/install-complete

    # Performs cleanup of all created resources
    - name: teardown
      image: ${IMAGE_UPI_INSTALLER}
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - name: shared-tmp
        mountPath: /tmp/shared
      - name: cluster-profile
        mountPath: /etc/openshift-installer
      - name: artifacts
        mountPath: /tmp/artifacts
      env:
      - name: ARTIFACT_DIR
        value: /tmp/artifacts
      - name: CLUSTER_NAME
        value: ${NAMESPACE}-${JOB_NAME_HASH}
      - name: TYPE
        value: ${CLUSTER_TYPE}
      - name: KUBECONFIG
        value: /tmp/artifacts/installer/auth/kubeconfig
      - name: AWS_SHARED_CREDENTIALS_FILE
        value: /etc/openshift-installer/.awscred
      - name: AZURE_AUTH_LOCATION
        value: /etc/openshift-installer/osServicePrincipal.json
      - name: TFVARS_PATH
        value: /etc/openshift-installer/vmc.secret.auto.tfvars
      - name: AWS_REGION
        value: us-east-1
      - name: GOOGLE_CLOUD_KEYFILE_JSON
        value: /etc/openshift-installer/gce.json
      - name: USER
        value: test
      - name: HOME
        value: /tmp
      - name: LC_ALL
        value: en_US.UTF-8
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -eo pipefail

        function queue() {
          local TARGET="${1}"
          shift
          local LIVE="$(jobs | wc -l)"
          while [[ "${LIVE}" -ge 45 ]]; do
            sleep 1
            LIVE="$(jobs | wc -l)"
          done
          echo "${@}"
          if [[ -n "${FILTER}" ]]; then
            "${@}" | "${FILTER}" >"${TARGET}" &
          else
            "${@}" >"${TARGET}" &
          fi
        }

        function teardown() {
          set +e
          touch /tmp/shared/exit
          export PATH=$PATH:/tmp/shared

          echo "Gathering artifacts ..."
          mkdir -p ${ARTIFACT_DIR}/pods ${ARTIFACT_DIR}/nodes ${ARTIFACT_DIR}/metrics ${ARTIFACT_DIR}/bootstrap ${ARTIFACT_DIR}/network

          if [ -f ${ARTIFACT_DIR}/installer/.openshift_install_state.json ]
          then
              # Remove VSPHERE_USER and VSPHERE_PASSWORD from install state json
              export VSPHERE_USER=$(grep -oP 'vsphere_user\s*=\s*"\K[^"]+' ${TFVARS_PATH})
              export VSPHERE_PASSWORD=$(grep -oP 'vsphere_password\s*=\s*"\K[^"]+' ${TFVARS_PATH})
              sed -i "s;${VSPHERE_USER};REDACTED;g" ${ARTIFACT_DIR}/installer/.openshift_install_state.json
              sed -i "s;${VSPHERE_PASSWORD};REDACTED;g" ${ARTIFACT_DIR}/installer/.openshift_install_state.json

              # bootstrap.ign also contains passwords
              rm -rf ${ARTIFACT_DIR}/installer/bootstrap.ign
              jq -r '."*bootstrap.Bootstrap" |= {"Config": "REDACTED"}' ${ARTIFACT_DIR}/installer/.openshift_install_state.json > ${ARTIFACT_DIR}/installer/openshift_install_state_updated.json
              mv ${ARTIFACT_DIR}/installer/openshift_install_state_updated.json ${ARTIFACT_DIR}/installer/.openshift_install_state.json
          fi

          # collect logs from the proxy
          if [ -f "${ARTIFACT_DIR}/installer/proxyip" ]
          then
            proxy_ip="$(cat ${ARTIFACT_DIR}/installer/proxyip)"
            mkdir -p ${ARTIFACT_DIR}/proxy

            if ! whoami &> /dev/null; then
              if [ -w /etc/passwd ]; then
                echo "${USER_NAME:-default}:x:$(id -u):0:${USER_NAME:-default} user:${HOME}:/sbin/nologin" >> /etc/passwd
              fi
            fi
            eval $(ssh-agent)
            ssh-add /etc/openshift-installer/ssh-privatekey
            ssh -A -o PreferredAuthentications=publickey -o StrictHostKeyChecking=false -o UserKnownHostsFile=/dev/null core@${proxy_ip} 'journalctl -u squid' > ${ARTIFACT_DIR}/proxy/squid.service

          fi

          oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o jsonpath --template '{range .items[*]}{.metadata.name}{"\n"}{end}' > /tmp/nodes
          oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces --template '{{ range .items }}{{ $name := .metadata.name }}{{ $ns := .metadata.namespace }}{{ range .spec.containers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ "\n" }}{{ end }}{{ range .spec.initContainers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ "\n" }}{{ end }}{{ end }}' > /tmp/containers
          oc --insecure-skip-tls-verify --request-timeout=5s get pods -l openshift.io/component=api --all-namespaces --template '{{ range .items }}-n {{ .metadata.namespace }} {{ .metadata.name }}{{ "\n" }}{{ end }}' > /tmp/pods-api

          queue ${ARTIFACT_DIR}/config-resources.json oc --insecure-skip-tls-verify --request-timeout=5s get apiserver.config.openshift.io authentication.config.openshift.io build.config.openshift.io console.config.openshift.io dns.config.openshift.io featuregate.config.openshift.io image.config.openshift.io infrastructure.config.openshift.io ingress.config.openshift.io network.config.openshift.io oauth.config.openshift.io project.config.openshift.io scheduler.config.openshift.io -o json
          queue ${ARTIFACT_DIR}/apiservices.json oc --insecure-skip-tls-verify --request-timeout=5s get apiservices -o json
          queue ${ARTIFACT_DIR}/apiservices.json oc --insecure-skip-tls-verify --request-timeout=5s get apiservices -o json
          queue ${ARTIFACT_DIR}/clusteroperators.json oc --insecure-skip-tls-verify --request-timeout=5s get clusteroperators -o json
          queue ${ARTIFACT_DIR}/clusterversion.json oc --insecure-skip-tls-verify --request-timeout=5s get clusterversion -o json
          queue ${ARTIFACT_DIR}/configmaps.json oc --insecure-skip-tls-verify --request-timeout=5s get configmaps --all-namespaces -o json
          queue ${ARTIFACT_DIR}/csr.json oc --insecure-skip-tls-verify --request-timeout=5s get csr -o json
          queue ${ARTIFACT_DIR}/endpoints.json oc --insecure-skip-tls-verify --request-timeout=5s get endpoints --all-namespaces -o json
          queue ${ARTIFACT_DIR}/events.json oc --insecure-skip-tls-verify --request-timeout=5s get events --all-namespaces -o json
          queue ${ARTIFACT_DIR}/kubeapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get kubeapiserver -o json
          queue ${ARTIFACT_DIR}/kubecontrollermanager.json oc --insecure-skip-tls-verify --request-timeout=5s get kubecontrollermanager -o json
          queue ${ARTIFACT_DIR}/machineconfigpools.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigpools -o json
          queue ${ARTIFACT_DIR}/machineconfigs.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigs -o json
          queue ${ARTIFACT_DIR}/machinesets.json oc --insecure-skip-tls-verify --request-timeout=5s get machinesets -A -o json
          queue ${ARTIFACT_DIR}/machines.json oc --insecure-skip-tls-verify --request-timeout=5s get machines -A -o json
          queue ${ARTIFACT_DIR}/namespaces.json oc --insecure-skip-tls-verify --request-timeout=5s get namespaces -o json
          queue ${ARTIFACT_DIR}/nodes.json oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o json
          queue ${ARTIFACT_DIR}/openshiftapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get openshiftapiserver -o json
          queue ${ARTIFACT_DIR}/pods.json oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces -o json
          queue ${ARTIFACT_DIR}/persistentvolumes.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumes --all-namespaces -o json
          queue ${ARTIFACT_DIR}/persistentvolumeclaims.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumeclaims --all-namespaces -o json
          queue ${ARTIFACT_DIR}/rolebindings.json oc --insecure-skip-tls-verify --request-timeout=5s get rolebindings --all-namespaces -o json
          queue ${ARTIFACT_DIR}/roles.json oc --insecure-skip-tls-verify --request-timeout=5s get roles --all-namespaces -o json
          queue ${ARTIFACT_DIR}/services.json oc --insecure-skip-tls-verify --request-timeout=5s get services --all-namespaces -o json

          FILTER=gzip queue ${ARTIFACT_DIR}/openapi.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get --raw /openapi/v2

          # gather nodes first in parallel since they may contain the most relevant debugging info
          while IFS= read -r i; do
            mkdir -p ${ARTIFACT_DIR}/nodes/$i
            queue ${ARTIFACT_DIR}/nodes/$i/heap oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/debug/pprof/heap
            FILTER=gzip queue ${ARTIFACT_DIR}/nodes/$i/journal.gz oc --insecure-skip-tls-verify adm node-logs $i --unify=false
            FILTER=gzip queue ${ARTIFACT_DIR}/nodes/$i/journal-previous.gz oc --insecure-skip-tls-verify adm node-logs $i --unify=false --boot=-1
          done < /tmp/nodes

          # Snapshot iptables-save on each node for debugging possible kube-proxy issues
          oc --insecure-skip-tls-verify get --request-timeout=20s -n openshift-sdn -l app=sdn pods --template '{{ range .items }}{{ .metadata.name }}{{ "\n" }}{{ end }}' > /tmp/sdn-pods
          while IFS= read -r i; do
            queue ${ARTIFACT_DIR}/network/iptables-save-$i oc --insecure-skip-tls-verify rsh --timeout=20 -n openshift-sdn -c sdn $i iptables-save -c
          done < /tmp/sdn-pods

          while IFS= read -r i; do
            file="$( echo "$i" | cut -d ' ' -f 3 | tr -s ' ' '_' )"
            queue ${ARTIFACT_DIR}/metrics/${file}-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server "https://$( hostname ):8443" --config /etc/origin/master/admin.kubeconfig'
            queue ${ARTIFACT_DIR}/metrics/${file}-controllers-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server "https://$( hostname ):8444" --config /etc/origin/master/admin.kubeconfig'
          done < /tmp/pods-api

          while IFS= read -r i; do
            file="$( echo "$i" | cut -d ' ' -f 2,3,5 | tr -s ' ' '_' )"
            FILTER=gzip queue ${ARTIFACT_DIR}/pods/${file}.log.gz oc --insecure-skip-tls-verify logs --request-timeout=20s $i
            FILTER=gzip queue ${ARTIFACT_DIR}/pods/${file}_previous.log.gz oc --insecure-skip-tls-verify logs --request-timeout=20s -p $i
          done < /tmp/containers

          echo "Snapshotting prometheus (may take 15s) ..."
          queue ${ARTIFACT_DIR}/metrics/prometheus.tar.gz oc --insecure-skip-tls-verify exec -n openshift-monitoring prometheus-k8s-0 -- tar cvzf - -C /prometheus .

          echo "Running must-gather..."
          mkdir -p ${ARTIFACT_DIR}/must-gather
          queue ${ARTIFACT_DIR}/must-gather/must-gather.log oc --insecure-skip-tls-verify adm must-gather --dest-dir ${ARTIFACT_DIR}/must-gather

          echo "Gathering audit logs..."
          mkdir -p ${ARTIFACT_DIR}/audit-logs
          queue ${ARTIFACT_DIR}/audit-logs/must-gather.log oc --insecure-skip-tls-verify adm must-gather --dest-dir ${ARTIFACT_DIR}/audit-logs -- /usr/bin/gather_audit_logs

          echo "Waiting for logs ..."
          wait

          # This is a temporary conversion of cluster operator status to JSON matching the upgrade - may be moved to code in the future
          mkdir -p ${ARTIFACT_DIR}/junit
          curl -sL https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 >/tmp/jq && chmod ug+x /tmp/jq
          <${ARTIFACT_DIR}/clusteroperators.json /tmp/jq -r 'def one(condition; t): t as $t | first([.[] | select(condition)] | map(.type=t)[]) // null; def msg: "Operator \(.type) (\(.reason)): \(.message)"; def xmlfailure: if .failure then "<failure message=\"\(.failure | @html)\">\(.failure | @html)</failure>" else "" end; def xmltest: "<testcase name=\"\(.name | @html)\">\( xmlfailure )</testcase>"; def withconditions: map({name: "operator conditions \(.metadata.name)"} + ((.status.conditions // [{type:"Available",status: "False",message:"operator is not reporting conditions"}]) | (one(.type=="Available" and .status!="True"; "unavailable") // one(.type=="Degraded" and .status=="True"; "degraded") // one(.type=="Progressing" and .status=="True"; "progressing") // null) | if . then {failure: .|msg} else null end)); .items | withconditions | "<testsuite name=\"Operator results\" tests=\"\( length )\" failures=\"\( [.[] | select(.failure)] | length )\">\n\( [.[] | xmltest] | join("\n"))\n</testsuite>"' >${ARTIFACT_DIR}/junit/junit_install_status.xml

          for artifact in must-gather audit-logs ; do
            tar -czC ${ARTIFACT_DIR}/${artifact} -f ${ARTIFACT_DIR}/${artifact}.tar.gz . &&
            rm -rf ${ARTIFACT_DIR}/${artifact}
          done

          echo "Deprovisioning cluster ..."
          if [[ "${CLUSTER_TYPE}" == "aws" ]]; then
            # FIXME: picking up awscli installed by the setup container
            export HOME=/tmp/shared
            export PATH="${HOME}/.local/bin:${PATH}"

            export AWS_DEFAULT_REGION="${AWS_REGION}"  # CLI prefers the former

            aws cloudformation describe-stack-resources --stack-name "${CLUSTER_NAME}-control-plane" \
              --query 'StackResources[?ResourceType==`AWS::EC2::Instance`].PhysicalResourceId' --output text | sed 's,\t,\n,g' > /tmp/node-provider-IDs
            for INDEX in 0 1 2
            do
              aws cloudformation describe-stack-resources --stack-name "${CLUSTER_NAME}-compute-${INDEX}" \
                --query 'StackResources[].PhysicalResourceId' --output text | cut -d, -f1 >> /tmp/node-provider-IDs
            done

            while IFS= read -r i; do
              mkdir -p "${ARTIFACT_DIR}/nodes/${i}"
              if [[ "${CLUSTER_TYPE}" = "aws" ]]; then
                queue ${ARTIFACT_DIR}/nodes/$i/console aws ec2 get-console-output --instance-id "${i}" --output text
              fi
            done < /tmp/node-provider-IDs

            for STACK_SUFFIX in compute-2 compute-1 compute-0 control-plane bootstrap proxy security infra vpc
            do
              aws cloudformation delete-stack --stack-name "${CLUSTER_NAME}-${STACK_SUFFIX}"
            done

            openshift-install --dir ${ARTIFACT_DIR}/installer destroy cluster

            for STACK_SUFFIX in compute-2 compute-1 compute-0 control-plane bootstrap proxy security infra vpc
            do
              aws cloudformation wait stack-delete-complete --stack-name "${CLUSTER_NAME}-${STACK_SUFFIX}"
            done
          elif [[ "${CLUSTER_TYPE}" == "gcp" ]]; then
            export PATH=${PATH}:${HOME}/shared/google-cloud-sdk/bin
            export CLOUDSDK_CONFIG=${HOME}/shared/gcloudconfig
            openshift-install --dir ${HOME}/artifacts/installer destroy cluster
            gcloud deployment-manager deployments delete -q ${CLUSTER_NAME}-{worker,control-plane,bootstrap,security,infra,vpc}
          elif [[ "${CLUSTER_TYPE}" == "azure4" ]]; then
            openshift-install --dir=${ARTIFACT_DIR}/installer destroy cluster
            if [[ -f ${ARTIFACT_DIR}/installer/metadata.json ]]; then
              INFRA_ID="$(jq -r .infraID ${ARTIFACT_DIR}/installer/metadata.json)"
              az group delete --name ${INFRA_ID}-rg --yes
            fi
          elif [[ "${CLUSTER_TYPE}" == "vsphere" ]]; then
            cd /tmp/shared/tf
            rm -rf .terraform
            terraform init -input=false -no-color
            # In some instances either the IPAM records or AWS DNS records
            # are removed before teardown is executed causing terraform destroy
            # to fail - this is causing resource leaks. Do not refresh the state.
            terraform destroy -refresh=false -auto-approve -no-color
          else
            cd /tmp/shared/tf
            rm -rf .terraform
            terraform init -input=false -no-color
            terraform destroy -auto-approve -no-color
          fi
        }

        trap 'teardown' EXIT
        trap 'jobs -p | xargs -r kill || true; exit 0' TERM

        for i in $(seq 1 220); do
          if [[ -f /tmp/shared/exit ]]; then
            exit 0
          fi
          sleep 60 & wait
        done
