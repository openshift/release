#!/bin/bash

set -o nounset
set -o errexit
set -o pipefail

CLUSTER_TYPE="${CLUSTER_TYPE_OVERRIDE:-$CLUSTER_TYPE}"

clouds_yaml="$(mktemp)"
cp "/var/run/cluster-secrets/${CLUSTER_TYPE}/clouds.yaml" "$clouds_yaml"
if [ -f "/var/run/cluster-secrets/${CLUSTER_TYPE}/osp-ca.crt" ]; then
	cp "/var/run/cluster-secrets/${CLUSTER_TYPE}/osp-ca.crt" "${SHARED_DIR}/osp-ca.crt"
	sed -i "s|cacert: .*|cacert: ${SHARED_DIR}/osp-ca.crt|" "$clouds_yaml"
fi

if [ -f "/var/run/cluster-secrets/${CLUSTER_TYPE}/squid-credentials.txt" ]; then
	cp "/var/run/cluster-secrets/${CLUSTER_TYPE}/squid-credentials.txt" "${SHARED_DIR}/squid-credentials.txt"
fi

is_openshift_version_gte() {
	declare release_image ocp_version
	release_image="$(openshift-install version | sed -n 's/^release image\s\+\(.*\)$/\1/p' | tr -d '\n')"
	ocp_version="$(oc adm release info "$release_image" -o json | jq -r '.metadata.version' | tr -d '\n')"
	echo "Detected OCP version: ${ocp_version}"
	printf '%s\n%s' "$1" "$ocp_version" | sort -C -V
}

# new_application_credentials creates a new application credential set and
# merges it to the provided clouds.yaml. All the credentials created here have
# an expiration; expired application credentials are pruned by the periodic
# cleanup job running on all OpenStack clouds.
new_application_credentials() {
	declare OS_CLIENT_CONFIG_FILE appcred_json
	OS_CLIENT_CONFIG_FILE="$1"
	export OS_CLIENT_CONFIG_FILE
	shift

	appcred_json="$(
		openstack application credential create \
			"${*:---restricted}" \
			--expiration "$(date -d "$APPLICATION_CREDENTIALS_EXPIRATION" +%Y-%m-%dT%H:%M:%S)" \
			--description "Generated by Prow job ${PROW_JOB_ID}" \
			--format json --column id --column secret \
			"prow-$(date +'%s%N')"
	)"

	yq --yml-output ".
		| del(.clouds.\"${OS_CLOUD}\".auth.username)
		| del(.clouds.\"${OS_CLOUD}\".auth.password)
		| del(.clouds.\"${OS_CLOUD}\".auth.user_domain_name)
		| del(.clouds.\"${OS_CLOUD}\".auth.project_id)
		| del(.clouds.\"${OS_CLOUD}\".auth.project_name)
		| del(.clouds.\"${OS_CLOUD}\".auth.project_domain_name)
		| .clouds.\"${OS_CLOUD}\".auth_type=\"v3applicationcredential\"
		| .clouds.\"${OS_CLOUD}\".auth.application_credential_id=\"$(jq -r '.id' <<< "$appcred_json")\"
		| .clouds.\"${OS_CLOUD}\".auth.application_credential_secret=\"$(jq -r '.secret' <<< "$appcred_json")\"
		" "$OS_CLIENT_CONFIG_FILE"
}

# Skip application credentials when testing old OpenShift versions, as appcreds
# are only supported in OCP v4.12+.
if ! is_openshift_version_gte "4.12"; then
	echo 'The detected version does not support application credentials.'
	OPENSTACK_AUTHENTICATION_METHOD='password'
fi

echo "The environment variable OPENSTACK_AUTHENTICATION_METHOD is set to '${OPENSTACK_AUTHENTICATION_METHOD}'."
case "$OPENSTACK_AUTHENTICATION_METHOD" in
	"application-credentials")
		new_application_credentials "$clouds_yaml" > "${SHARED_DIR}/clouds.yaml"
		declare appcreds_id
		appcreds_id="$(yq -r ".clouds.\"${OS_CLOUD}\".auth.application_credential_id" "${SHARED_DIR}/clouds.yaml")"
		echo "Generated application credentials with ID ${appcreds_id}"
		if [[ -n "$ROTATE_CLOUD_CREDENTIALS" ]]; then
			echo 'Environment variable ROTATE_CLOUD_CREDENTIALS detected. Generating a set of application credentials for the rotation.'
			new_application_credentials "$clouds_yaml" > "${SHARED_DIR}/clouds2.yaml"
			new_application_credentials "$clouds_yaml" --unrestricted > "${SHARED_DIR}/clouds-unrestricted.yaml"

			declare appcreds_id
			appcreds_id="$(yq -r ".clouds.\"${OS_CLOUD}\".auth.application_credential_id" "${SHARED_DIR}/clouds2.yaml")"
			echo "Generated additional application credentials with ID ${appcreds_id}"
		fi
		;;
	"password")
		if [[ "$(yq -r ".clouds.\"${OS_CLOUD}\".auth_type" "$clouds_yaml")" == 'v3applicationcredential' ]]; then
			echo 'The original clouds.yaml does not contain a password. Exiting.'
			exit 1
		fi
		echo 'Using password authentication with the original clouds.yaml'

		cp "$clouds_yaml" "${SHARED_DIR}/clouds.yaml"
		;;
	*)
		echo "Unknown authentication method '${OPENSTACK_AUTHENTICATION_METHOD}'."; exit 1 ;;
esac

