#!/bin/bash

set -o nounset
set -o errexit
set -o pipefail

CLUSTER_TYPE="${CLUSTER_TYPE_OVERRIDE:-$CLUSTER_TYPE}"

clouds_yaml="$(mktemp)"
cp "/var/run/cluster-secrets/${CLUSTER_TYPE}/clouds.yaml" "$clouds_yaml"
if [ -f "/var/run/cluster-secrets/${CLUSTER_TYPE}/osp-ca.crt" ]; then
	cp "/var/run/cluster-secrets/${CLUSTER_TYPE}/osp-ca.crt" "${SHARED_DIR}/osp-ca.crt"
	sed -i "s|cacert: .*|cacert: ${SHARED_DIR}/osp-ca.crt|" "$clouds_yaml"
fi

# new_clouds_yaml creates a new application credential and adds it to a new
# clouds.yaml file. All the credentials created here have an expiration;
# expired application credentials are pruned by the periodic cleanup job
# running on all OpenStack clouds.
new_clouds_yaml() {
	declare OS_CLIENT_CONFIG_FILE appcred_json
	OS_CLIENT_CONFIG_FILE="$1"
	export OS_CLIENT_CONFIG_FILE
	shift

	appcred_json="$(
		openstack application credential create \
			"${*:---restricted}" \
			--expiration "$(date -d "$APPLICATION_CREDENTIALS_EXPIRATION" +%Y-%m-%dT%H:%M:%S)" \
			--description 'Generated by Prow.' \
			--format json --column id --column secret \
			"prow-$(date +'%s%N')"
	)"

	yq --yml-output ".
		| del(.clouds.\"${OS_CLOUD}\".auth.username)
		| del(.clouds.\"${OS_CLOUD}\".auth.password)
		| del(.clouds.\"${OS_CLOUD}\".auth.user_domain_name)
		| del(.clouds.\"${OS_CLOUD}\".auth.project_id)
		| del(.clouds.\"${OS_CLOUD}\".auth.project_name)
		| del(.clouds.\"${OS_CLOUD}\".auth.project_domain_name)
		| .clouds.\"${OS_CLOUD}\".auth_type=\"v3applicationcredential\"
		| .clouds.\"${OS_CLOUD}\".auth.application_credential_id=\"$(jq -r '.id' <<< "$appcred_json")\"
		| .clouds.\"${OS_CLOUD}\".auth.application_credential_secret=\"$(jq -r '.secret' <<< "$appcred_json")\"
		" "$OS_CLIENT_CONFIG_FILE"
}

if [[ -n $APPLICATION_CREDENTIALS ]]; then
	echo 'Generating ephemeral application credentials'
	new_clouds_yaml "$clouds_yaml" > "${SHARED_DIR}/clouds.yaml"

	declare appcreds_id
	appcreds_id="$(yq -r ".clouds.\"${OS_CLOUD}\".auth.application_credential_id" "${SHARED_DIR}/clouds.yaml")"
	echo "Generated application credentials with ID ${appcreds_id}"
else
	echo 'The environment variable APPLICATION_CREDENTIALS is unset or empty.'
	if [[ "$(yq -r ".clouds.\"${OS_CLOUD}\".auth_type" "$clouds_yaml")" == 'v3applicationcredential' ]]; then
		echo 'Using application credentials as found in the original clouds.yaml'
	else
		echo 'Using password authentication as found in the original clouds.yaml'
	fi

	cp "$clouds_yaml" "${SHARED_DIR}/clouds.yaml"
fi

if [[ -n "$ROTATE_CLOUD_CREDENTIALS" ]]; then
	echo 'Environment variable ROTATE_CLOUD_CREDENTIALS detected. Generating a set of application credentials for the rotation.'
	new_clouds_yaml "$clouds_yaml" > "${SHARED_DIR}/clouds2.yaml"
	new_clouds_yaml "$clouds_yaml" --unrestricted > "${SHARED_DIR}/clouds-unrestricted.yaml"

	declare appcreds_id
	appcreds_id="$(yq -r ".clouds.\"${OS_CLOUD}\".auth.application_credential_id" "${SHARED_DIR}/clouds2.yaml")"
	echo "Generated additional application credentials with ID ${appcreds_id}"
fi

if [ -f "/var/run/cluster-secrets/${CLUSTER_TYPE}/squid-credentials.txt" ]; then
	cp "/var/run/cluster-secrets/${CLUSTER_TYPE}/squid-credentials.txt" "${SHARED_DIR}/squid-credentials.txt"
fi
