#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail
set -x

# Enable debug mode with environment variable
DEBUG_MODE="${DEBUG_MODE:-false}"
debug_echo() {
    if [[ "${DEBUG_MODE}" == "true" ]]; then
        echo "DEBUG: $*"
    fi
}
# example: debug_echo "assignment: '${REG_BRANCH}'"

REPO_NAME=${REPO_NAME:-}
PULL_NUMBER=${PULL_NUMBER:-}
BASTION="${BASTION:-}"
LAB_CLOUD="${LAB_CLOUD:-}"
LAB_CLOUD=$(cat ${CLUSTER_PROFILE_DIR}/lab_cloud)

if [ -z "${RUNLOCAL:-}" ]; then
  bastion=$(cat  /bm/address)
  SSH_ARGS="-i /bm/jh_priv_ssh_key -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
else
  bastion=$BASTION
  SSH_ARGS="-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
fi

regulus_repo="/root/REGULUS/regulus-${LAB_CLOUD}-$(date "+%Y-%m-%d-%H-%M-%S")"
install-regulus() {
  ssh ${SSH_ARGS} root@${bastion} "
    REG_PR='${REG_PR}' PULL_NUMBER='${PULL_NUMBER}' REPO_NAME='${REPO_NAME}' REG_BRANCH='${REG_BRANCH}'
    set -e
    set -o pipefail
    if [ -d ${regulus_repo} ] ; then
        rm -fr ${regulus_repo}
    fi
    dnf install -y bc
    git clone https://github.com/redhat-performance/regulus.git --depth=1 --branch=\${REG_BRANCH:-main} ${regulus_repo}
    cd ${regulus_repo}
    if [[ -n \"\${REG_PR}\" ]]; then
        git pull origin pull/\${REG_PR}/head:\${REG_PR} --rebase
        git switch \${REG_PR}
    elif [[ -n \"\${PULL_NUMBER}\" ]] && [[ \"\${REPO_NAME}\" == \"regulus\" ]]; then
        git pull origin pull/\${PULL_NUMBER}/head:\${PULL_NUMBER} --rebase
        git switch \${PULL_NUMBER}
    fi
    git branch
  "
}

# Bail out if Crucible does not exist
if ssh ${SSH_ARGS} root@${bastion} 'command -v crucible >/dev/null'; then
    debug_echo "crucible exists"
else
    echo "crucible not found"
    exit 1
fi

# Install fresh Regulus always
install-regulus 

# ─────────────────────────────────────────────────────────────────────────────
# Generate Regulus lab.config 
# ─────────────────────────────────────────────────────────────────────────────
vars=(
  KUBECONFIG
  REG_KNI_USER
  REG_OCPHOST
  REG_DP
  OCP_WORKER_0
  OCP_WORKER_1
  OCP_WORKER_2
  BM_HOSTS
  REG_SRIOV_NIC
  REG_SRIOV_MTU
  REG_SRIOV_NIC_MODEL
  REG_MACVLAN_NIC
  REG_MACVLAN_MTU
  REG_DPDK_NIC_1
  REG_DPDK_NIC_2
  REG_DPDK_NIC_MODEL
  TREX_HOSTS
  TREX_SRIOV_INTERFACE_1
  TREX_SRIOV_INTERFACE_2
  TREX_DPDK_NIC_MODEL
  REM_DPDK_CONFIG
)

if [ -e  /tmp/lab.config ]; then
    rm /tmp/lab.config
fi

cat > /tmp/lab.config <<EOF
# This file was generated by openshift-qe-installer-bm-day2-regulus-commands.sh
# It will be sourced by other Regulus scripts to import environment values.
EOF
for v in "${vars[@]}"; do
  # "${!v}" expands the variable whose name is in $v
  if [[ "$v" == "KUBECONFIG" ]]; then
    val=$KUBECONFIG_PATH
  elif [[ "$v" == "REG_OCPHOST" ]]; then
    val=$bastion
  else
    val="${!v:-}"
  fi

  # Expand tilda i.e. var=~/something to /root/something. Example  KUBECONFIG_PATH=~/mno/kubeconfig
  if [[ "$val" == ~* ]]; then
    val="${val/#\~\//\/root/}"
  fi

  # Escape any embedded double-quotes
  safe_val=${val//\"/\\\"}
  printf '%s="%s"\n' "$v" "$safe_val" >> /tmp/lab.config
done

# ───────────────────────────────────────────────────────────────────────────
# Launch Regulus (tests are listed in regulus_repo/jobs.config)
# ───────────────────────────────────────────────────────────────────────────
run-regulus() {
  echo scp -q ${SSH_ARGS} /tmp/lab.config  root@${bastion}:${regulus_repo}/ 
  scp -q ${SSH_ARGS} /tmp/lab.config  root@${bastion}:${regulus_repo}/ 
  ssh ${SSH_ARGS} root@${bastion} "
    set -e
    set -o pipefail
    cd ${regulus_repo}
    bash ./run_cpt.sh
  "
}

run-regulus

# EOF
