chain:
  as: hypershift-openstack-create
  steps:
  - as: create-hostedcluster
    cli: latest
    env:
    - name: HYPERSHIFT_NODE_COUNT
      default: "3"
      documentation: "The number nodes to automatically create and join to the cluster."
    - name: HYPERSHIFT_BASE_DOMAIN
      default: "origin-ci-int-aws.dev.rhcloud.com"
      documentation: "The cluster's FQDN will be a subdomain of the base domain."
    - name: EXTRA_ARGS
      default: ""
      documentation: "Extra args to pass to the create cluster openstack command"
    - name: ENABLE_ICSP
      default: "false"
      documentation: "if true, add image content sources config(path=${SHARED_DIR}/mgmt_icsp.yaml)"
    - name: HYPERSHIFT_HC_RELEASE_IMAGE
      default: ""
      documentation: "Release image used for the HostedCluster. Empty by default it will use release:latest"
    - name: HYPERSHIFT_CP_AVAILABILITY_POLICY
      default: "SingleReplica"
      documentation: "Availability policy for hosted cluster components. Supported options: SingleReplica, HighlyAvailable, default SingleReplica"
    - name: HYPERSHIFT_INFRA_AVAILABILITY_POLICY
      default: "SingleReplica"
      documentation: "Availability policy for infrastructure services in guest cluster. Supported options: SingleReplica, HighlyAvailable, default SingleReplica"
    - name: HYPERSHIFT_CREATE_CLUSTER_RENDER
      default: "false"
      documentation: "If true, render artifacts to ${SHARED_DIR}/hypershift_create_cluster_render.yaml"
    - name: RHCOS_IMAGE_NAME
      default: "rhcos-latest-hcp-nodepool"
    commands: |-
      set -euo pipefail
      
      RELEASE_IMAGE=${HYPERSHIFT_HC_RELEASE_IMAGE:-$RELEASE_IMAGE_LATEST}

      if [ -f "${SHARED_DIR}/osp-ca.crt" ]; then
        EXTRA_ARGS="${EXTRA_ARGS} --openstack-ca-cert-file ${SHARED_DIR}/osp-ca.crt"
      fi

      OPENSTACK_COMPUTE_FLAVOR=$(cat "${SHARED_DIR}/OPENSTACK_COMPUTE_FLAVOR")
      OPENSTACK_EXTERNAL_NETWORK_ID=$(cat "${SHARED_DIR}/OPENSTACK_EXTERNAL_NETWORK_ID")
      
      if [ ! -f "${SHARED_DIR}/clouds.yaml" ]; then
          >&2 echo clouds.yaml has not been generated
          exit 1
      fi

      # For disconnected or otherwise unreachable environments, we want to
      # have steps use an HTTP(S) proxy to reach the API server. This proxy
      # configuration file should export HTTP_PROXY, HTTPS_PROXY, and NO_PROXY
      # environment variables, as well as their lowercase equivalents (note
      # that libcurl doesn't recognize the uppercase variables).
      if test -f "${SHARED_DIR}/proxy-conf.sh"
      then
        # shellcheck disable=SC1090
        source "${SHARED_DIR}/proxy-conf.sh"
      fi

      CLUSTER_NAME="$(echo -n $PROW_JOB_ID|sha256sum|cut -c-20)"
      echo "$CLUSTER_NAME" > "${SHARED_DIR}/CLUSTER_NAME"
      echo "$(date) Creating HyperShift cluster ${CLUSTER_NAME}"
      COMMAND=(
        /usr/bin/hypershift create cluster openstack
        --name ${CLUSTER_NAME}
        --node-pool-replicas ${HYPERSHIFT_NODE_COUNT}
        --openstack-credentials-file ${SHARED_DIR}/clouds.yaml
        --openstack-external-network-id ${OPENSTACK_EXTERNAL_NETWORK_ID}
        --openstack-node-flavor ${OPENSTACK_COMPUTE_FLAVOR}
        --openstack-node-image-name ${RHCOS_IMAGE_NAME}
        --base-domain ${HYPERSHIFT_BASE_DOMAIN}
        --control-plane-availability-policy ${HYPERSHIFT_CP_AVAILABILITY_POLICY}
        --infra-availability-policy ${HYPERSHIFT_INFRA_AVAILABILITY_POLICY}
        --pull-secret=/etc/ci-pull-credentials/.dockerconfigjson
        --release-image ${RELEASE_IMAGE}
        --annotations=hypershift.openshift.io/skip-release-image-validation=true
      )
      
      if [[ $ENABLE_ICSP == "true" ]]; then
        COMMAND+=(--image-content-sources "${SHARED_DIR}/mgmt_icsp.yaml")
      fi
      
      if [[ -n $EXTRA_ARGS ]]; then
        COMMAND+=(${EXTRA_ARGS})
      fi
     
      if [[ $HYPERSHIFT_CREATE_CLUSTER_RENDER == "true" ]]; then
        "${COMMAND[@]}" --render > "${SHARED_DIR}/hypershift_create_cluster_render.yaml"
        exit 0
      fi
      
      "${COMMAND[@]}"

      export CLUSTER_NAME
      oc wait --timeout=30m --for=condition=Available --namespace=clusters hostedcluster/${CLUSTER_NAME}
      echo "Cluster became available, creating kubeconfig"
      bin/hypershift create kubeconfig --namespace=clusters --name=${CLUSTER_NAME} >${SHARED_DIR}/nested_kubeconfig

      export KUBECONFIG=${SHARED_DIR}/nested_kubeconfig
      timeout 25m bash -c '
        until [[ "$(oc -n openshift-ingress get service router-default -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" != "" ]]; do
            sleep 15
        done
      '
      INGRESS_IP=$(oc -n openshift-ingress get service router-default -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      if [[ -z "${INGRESS_IP}" ]]; then
        echo "Ingress IP was not found"
        exit 1
      fi
      echo ${INGRESS_IP} > ${SHARED_DIR}/INGRESS_IP
      echo "Ingress IP was found: ${INGRESS_IP}"
    from: hypershift-operator
    grace_period: 5m0s
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    timeout: 45m0s
    credentials:
    - mount_path: /etc/ci-pull-credentials
      name: ci-pull-credentials
      namespace: test-credentials
    dependencies:
    - name: "release:latest"
      env: RELEASE_IMAGE_LATEST
    - name: hypershift-operator
      env: HYPERSHIFT_RELEASE_LATEST
  - ref: openstack-provision-dnsrecords
  - as: hostedcluster-healthy
    cli: latest
    commands: |-
      set -euo pipefail
      
      # For disconnected or otherwise unreachable environments, we want to
      # have steps use an HTTP(S) proxy to reach the API server. This proxy
      # configuration file should export HTTP_PROXY, HTTPS_PROXY, and NO_PROXY
      # environment variables, as well as their lowercase equivalents (note
      # that libcurl doesn't recognize the uppercase variables).
      if test -f "${SHARED_DIR}/proxy-conf.sh"
      then
        # shellcheck disable=SC1090
        source "${SHARED_DIR}/proxy-conf.sh"
      fi

      CLUSTER_NAME="$(echo -n $PROW_JOB_ID|sha256sum|cut -c-20)"
      set +e
      export CLUSTER_NAME
      timeout 25m bash -c '
        until [[ "$(oc get -n clusters hostedcluster/${CLUSTER_NAME} -o jsonpath='"'"'{.status.version.history[?(@.state!="")].state}'"'"')" = "Completed" ]]; do
            sleep 15
        done
      '
      if [[ $? -ne 0 ]]; then
        cat << EOF > ${ARTIFACT_DIR}/junit_hosted_cluster.xml
      <?xml version="1.0" encoding="UTF-8"?>
      <testsuite name="hypershift install" tests="1" failures="1">
        <testcase name="hosted cluster version rollout succeeds">
          <failure message="hosted cluster version rollout never completed">
            <![CDATA[
      error: hosted cluster version rollout never completed, dumping relevant hosted cluster condition messages
      Degraded: $(oc get -n clusters hostedcluster/${CLUSTER_NAME} -o jsonpath='{.status.conditions[?(@.type=="Degraded")].message}')
      ClusterVersionSucceeding: $(oc get -n clusters hostedcluster/${CLUSTER_NAME} -o jsonpath='{.status.conditions[?(@.type=="ClusterVersionSucceeding")].message}')
            ]]>
          </failure>
        </testcase>
      </testsuite>
      EOF
        exit 1
      else
        cat << EOF > ${ARTIFACT_DIR}/junit_hosted_cluster.xml
      <?xml version="1.0" encoding="UTF-8"?>
      <testsuite name="hypershift install" tests="1" failures="0">
        <testcase name="hosted cluster version rollout succeeds">
          <system-out>
            <![CDATA[
      info: hosted cluster version rollout completed successfully
            ]]>
          </system-out>
        </testcase>
      </testsuite>
      EOF
      fi
      set -e
      echo "Hosted Cluster is healthy"
    from: hypershift-operator
    grace_period: 5m0s
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    timeout: 15m0s
    dependencies:
    - name: hypershift-operator
      env: HYPERSHIFT_RELEASE_LATEST
