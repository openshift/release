chain:
  as: hypershift-mce-aws-create
  steps:
    - as: create-hostedcluster
      cli: latest
      env:
        - name: MCE_VERSION
          default: "2.4"
          documentation: "version of the mce.(2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10)"
        - name: HYPERSHIFT_NODE_COUNT
          default: "3"
          documentation: "The number nodes to automatically create and join to the cluster."
        - name: HYPERSHIFT_BASE_DOMAIN
          default: "ci.hypershift.devcluster.openshift.com"
          documentation: "The cluster's FQDN will be a subdomain of the base domain."
        - name: HYPERSHIFT_CP_AVAILABILITY_POLICY
          default: "HighlyAvailable"
          documentation: "Availability policy for hosted cluster components. Supported options: SingleReplica, HighlyAvailable, default SingleReplica"
        - name: HYPERSHIFT_AWS_REGION
          default: "us-east-1"
          documentation: "The AWS region of the cluster."
        - name: ENABLE_ICSP
          default: "false"
          documentation: "if true, add image content sources config(path=${SHARED_DIR}/mgmt_icsp.yaml)"
        - name: HYPERSHIFT_INSTANCE_TYPE
          default: "m5.xlarge"
          documentation: "Instance type for the cluster nodes"
        - name: BREW_IMAGE_REGISTRY_USERNAME
          default: '|7820aea2-0d75-11e7-9259-28d244ea5a6d.hhav.f63e13'
        - name: BREW_IMAGE_REGISTRY_TOKEN_PATH
          default: /var/run/brew-pull-secret/token
        - name: PUBLIC_ONLY
          default: "false"
          documentation: "If true, only public subnets are created (requires release version 4.16 or higher)"
        - name: EXTRA_ARGS
          default: ""
          documentation: "Extra args to pass to the create cluster aws command"
      commands: |-
        set -exuo pipefail
        
        trap 'FRC=$?; [[ $FRC != 0 ]] && debug' EXIT TERM
        
        debug() {
          oc get --namespace=local-cluster hostedcluster/${CLUSTER_NAME} > $ARTIFACT_DIR/hostedcluster
          oc get pod -n local-cluster-${CLUSTER_NAME} > $ARTIFACT_DIR/hostedcluster_cp_pods
          oc get --namespace=local-cluster hostedcluster/${CLUSTER_NAME} -o yaml > $ARTIFACT_DIR/hostedcluster.yaml
          oc get pod -n local-cluster-${CLUSTER_NAME} -oyaml > $ARTIFACT_DIR/hostedcluster_cp_pods.yaml
          oc get managedcluster > $ARTIFACT_DIR/managedcluster
          oc get managedcluster -oyaml > $ARTIFACT_DIR/managedcluster.yaml
          oc logs -n hypershift -lapp=operator --tail=-1 -c operator | grep -v "info" > $ARTIFACT_DIR/hypershift-errorlog.txt
          export KUBECONFIG=${SHARED_DIR}/nested_kubeconfig
          oc get clusterversion/version > $ARTIFACT_DIR/guestcluster_clusterversion
          oc get clusterversion/version -oyaml > $ARTIFACT_DIR/guestcluster_clusterversion.yaml
          oc get clusteroperator > $ARTIFACT_DIR/guestcluster_clusteroperator
          oc get clusteroperator -oyaml > $ARTIFACT_DIR/guestcluster_clusteroperator.yaml
        }

        support_np_skew() {
          curl -L https://github.com/mikefarah/yq/releases/download/v4.31.2/yq_linux_amd64 -o /tmp/yq && chmod +x /tmp/yq
          local extra_flags=""
          if [[ -n "$HOSTEDCLUSTER_RELEASE_IMAGE_LATEST" && -n "$NODEPOOL_RELEASE_IMAGE_LATEST" ]]; then
            # >= 2.7: "--render-sensitive --render", else: "--render"
            if [[ "$(printf '%s\n' "2.7" "$MCE_VERSION" | sort -V | head -n1)" == "2.7" ]]; then
              extra_flags+="--render-sensitive --render > /tmp/hc.yaml "
            else
              extra_flags+="--render > /tmp/hc.yaml "
            fi
          fi
          extra_flags+="&& /tmp/yq e -i '(select(.kind == \"NodePool\").spec.release.image) = \"$NODEPOOL_RELEASE_IMAGE_LATEST\"' /tmp/hc.yaml "
          extra_flags+="&& oc apply -f /tmp/hc.yaml"
          echo "$extra_flags"
        }

        HCP_CLI=""
        echo "MCE version is greater than or equal to 2.4, need to extract HyperShift cli"
        mkdir /tmp/hs-cli
        HCP_CLI="/tmp/hs-cli/hypershift"
        # >= 2.9
        if [[ "$(printf '%s\n' "2.9" "$MCE_VERSION" | sort -V | head -n1)" == "2.9" ]]; then
          oc cp -n hypershift "$(oc get pod -n hypershift -l app=operator -o jsonpath='{.items[0].metadata.name}')":/usr/bin/hypershift /tmp/hs-cli/hypershift
        else
          set +x
          oc extract secret/pull-secret -n openshift-config --to=/tmp --confirm
          HO_IMAGE=$(oc get deployment -n hypershift operator -ojsonpath='{.spec.template.spec.containers[*].image}')
          brew_registry_auth=$(echo -n "${BREW_IMAGE_REGISTRY_USERNAME}:$(<$BREW_IMAGE_REGISTRY_TOKEN_PATH)" | base64 -w 0)
          echo '{}' | jq --arg auth "$brew_registry_auth" '.auths += {"brew.registry.redhat.io": {"auth": $auth}}' > /tmp/brew_configjson
          oc image extract "brew.${HO_IMAGE}" --path /usr/bin/hypershift-no-cgo:/tmp/hs-cli --registry-config=/tmp/brew_configjson
          HCP_CLI="/tmp/hs-cli/hypershift-no-cgo"
          set -x
        fi
        chmod +x "$HCP_CLI"

        HYPERSHIFT_NAME=hcp
        arch=$(arch)
        if [ "$arch" == "x86_64" ]; then
          downURL=$(oc get ConsoleCLIDownload ${HYPERSHIFT_NAME}-cli-download -o json | jq -r '.spec.links[] | select(.text | test("Linux for x86_64")).href') && curl -k --output /tmp/${HYPERSHIFT_NAME}.tar.gz ${downURL}
          cd /tmp && tar -xvf /tmp/${HYPERSHIFT_NAME}.tar.gz
          chmod +x /tmp/${HYPERSHIFT_NAME}
          cd -
        fi

        export CLUSTER_NAME="$(echo -n $PROW_JOB_ID|sha256sum|cut -c-20)"
        echo "$(date) Creating HyperShift cluster ${CLUSTER_NAME}"

        PULL_SECRET_PATH="/etc/ci-pull-credentials/.dockerconfigjson"
        ICSP_COMMAND=""
        if [[ $ENABLE_ICSP == "true" ]]; then
          ICSP_COMMAND=$(echo "--image-content-sources ${SHARED_DIR}/mgmt_icsp.yaml")
          echo "extract secret/pull-secret"
          oc extract secret/pull-secret -n openshift-config --to=/tmp --confirm
          PULL_SECRET_PATH="/tmp/.dockerconfigjson"
        fi
        
        if [[ -z "$HYPERSHIFT_AWS_REGION" ]]; then
          HYPERSHIFT_AWS_REGION="$(oc get node -ojsonpath='{.items[].metadata.labels.topology\.kubernetes\.io/region}')"
        fi
        
        AWS_GUEST_INFRA_CREDENTIALS_FILE="${CLUSTER_PROFILE_DIR}/.awscred"
        if [[ $HYPERSHIFT_BASE_DOMAIN == "ci.hypershift.devcluster.openshift.com" ]]; then
          AWS_GUEST_INFRA_CREDENTIALS_FILE="/etc/hypershift-ci-jobs-awscreds/credentials"
        fi
        
        CRED_COMMAND=""
        if [[ "$(printf '%s\n' "2.6" "$MCE_VERSION" | sort -V | head -n1)" == "2.6" ]]; then
          set +x
          export AWS_SHARED_CREDENTIALS_FILE="${AWS_GUEST_INFRA_CREDENTIALS_FILE}"
          export AWS_REGION=${HYPERSHIFT_AWS_REGION}
          "${HCP_CLI}" create iam cli-role --name ${CLUSTER_NAME} --aws-creds ${AWS_SHARED_CREDENTIALS_FILE}
          aws sts get-session-token --output json > ${SHARED_DIR}/sts-creds.json
          ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
          echo "arn:aws:iam::$ACCOUNT:role/$CLUSTER_NAME" > ${SHARED_DIR}/hcp-role-arn
          set -x
          CRED_COMMAND=$(echo "--role-arn $(cat ${SHARED_DIR}/hcp-role-arn) --sts-creds ${SHARED_DIR}/sts-creds.json")  
          sleep 60
        else
          echo "MCE version is less than 2.6, use --aws-creds command"
          CRED_COMMAND=$(echo "--aws-creds ${AWS_GUEST_INFRA_CREDENTIALS_FILE}")
        fi
        
        if [[ $PUBLIC_ONLY == "true" ]]; then
          EXTRA_ARGS+=" --public-only "
        fi
        
        eval "/tmp/${HYPERSHIFT_NAME} create cluster aws ${ICSP_COMMAND} ${CRED_COMMAND} ${EXTRA_ARGS} \
        --name ${CLUSTER_NAME} \
        --infra-id ${CLUSTER_NAME} \
        --control-plane-availability-policy ${HYPERSHIFT_CP_AVAILABILITY_POLICY} \
        --node-pool-replicas ${HYPERSHIFT_NODE_COUNT} \
        --instance-type ${HYPERSHIFT_INSTANCE_TYPE} \
        --base-domain ${HYPERSHIFT_BASE_DOMAIN} \
        --region ${HYPERSHIFT_AWS_REGION} \
        --pull-secret ${PULL_SECRET_PATH} \
        --namespace local-cluster \
        --release-image ${HOSTEDCLUSTER_RELEASE_IMAGE_LATEST} $(support_np_skew)"
        
        
        echo "Waiting for cluster to become available"
        oc wait --timeout=30m --for=condition=Available --namespace=local-cluster hostedcluster/${CLUSTER_NAME}
        echo "Cluster became available, creating kubeconfig"
        /tmp/${HYPERSHIFT_NAME} create kubeconfig --namespace=local-cluster --name=${CLUSTER_NAME} >${SHARED_DIR}/nested_kubeconfig
        echo "Waiting for clusteroperators to be ready"
        export KUBECONFIG=${SHARED_DIR}/nested_kubeconfig
        
        timeout 20m bash -c '
          until \
            oc wait clusterversion/version --for='condition=Available=True' > /dev/null;  do
            echo "$(date --rfc-3339=seconds) Clusteroperators not yet ready"
            oc get clusterversion 2>/dev/null || true
            sleep 10s
          done
        '
        echo "Waiting for ManagedCluster to be ready"
        export KUBECONFIG=${SHARED_DIR}/kubeconfig
        
        timeout 20m bash -c '
          until \
            oc wait managedcluster ${CLUSTER_NAME} --for='condition=ManagedClusterJoined' >/dev/null && \
            oc wait managedcluster ${CLUSTER_NAME} --for='condition=ManagedClusterConditionAvailable' >/dev/null && \
            oc wait managedcluster ${CLUSTER_NAME} --for='condition=HubAcceptedManagedCluster' >/dev/null;  do
            echo "$(date --rfc-3339=seconds) ManagedCluster not yet ready"
            sleep 10s
          done
        '        
        echo "${CLUSTER_NAME}" > "${SHARED_DIR}/cluster-name"
      from_image:
        namespace: ocp
        name: "4.12"
        tag: upi-installer
      grace_period: 5m0s
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      timeout: 60m0s
      credentials:
        - mount_path: /etc/ci-pull-credentials
          name: ci-pull-credentials
          namespace: test-credentials
        - mount_path: /var/run/brew-pull-secret
          name: cnv-ci-brew-pull-secret
          namespace: test-credentials
        - mount_path: /etc/hypershift-ci-jobs-awscreds
          name: hypershift-ci-jobs-awscreds
          namespace: test-credentials
      dependencies:
        - name: "release:latest"
          env: HOSTEDCLUSTER_RELEASE_IMAGE_LATEST
        - name: "release:latest"
          env: NODEPOOL_RELEASE_IMAGE_LATEST
        - name: hypershift-operator
          env: HYPERSHIFT_RELEASE_LATEST
