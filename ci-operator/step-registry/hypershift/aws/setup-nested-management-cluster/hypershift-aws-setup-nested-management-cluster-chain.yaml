chain:
  as: hypershift-aws-setup-nested-management-cluster
  steps:
  - as: create-management-cluster
    cli: latest
    env:
    - name: HYPERSHIFT_NODE_COUNT
      default: "1"
      documentation: "The number nodes for the cluster. This number will get mulitplied by three, as there are three AZs"
    - name: HYPERSHIFT_INSTANCE_TYPE
      default: "m6i.4xlarge"
      documentation: "Instance type for the cluster nodes"
    - name: HYPERSHIFT_NAMESPACE
      default: "clusters"
      documentation: "The Namespace where to create the HostedCluster and NodePools"
    - name: HYPERSHIFT_ZONES
      default: "us-east-1a,us-east-1b,us-east-1c"
      documentation: "The zones where to create NodePools"
    - name: HYPERSHIFT_GUEST_INFRA_OCP_ACCOUNT
      default: "false"
      documentation: "Whether to use the generic CI account or the HyperShift OSD account for the guest clusters infra. For the infra created for the clusters. E.g. For cluster-bot we use the generic CI account"
    - name: HYPERSHIFT_BASE_DOMAIN
      default: ""
      documentation: "The cluster's FQDN will be a subdomain of the base domain."
    - name: HYPERSHIFT_HC_RELEASE_IMAGE
      default: ""
      documentation: "Release image used for the HostedCluster. Latest 4.13 release image is used by default"
    commands: |-
      AWS_GUEST_INFRA_CREDENTIALS_FILE="/etc/hypershift-ci-jobs-awscreds/credentials"
      DEFAULT_BASE_DOMAIN=ci.hypershift.devcluster.openshift.com
      
      if [[ $HYPERSHIFT_GUEST_INFRA_OCP_ACCOUNT == "true" ]]; then
        AWS_GUEST_INFRA_CREDENTIALS_FILE="${CLUSTER_PROFILE_DIR}/.awscred"
        DEFAULT_BASE_DOMAIN=origin-ci-int-aws.dev.rhcloud.com
      fi
      DOMAIN=${HYPERSHIFT_BASE_DOMAIN:-$DEFAULT_BASE_DOMAIN}

      DEFAULT_RELEASE_STREAM=4.13.0-0.nightly

      export KUBECONFIG=/etc/hypershift-kubeconfig/hypershift-ops-admin.kubeconfig
      CLUSTER_NAME="$(echo -n $PROW_JOB_ID|sha256sum|cut -c-20)-mgmt"
      echo "Creating management cluster ${CLUSTER_NAME} with $((${HYPERSHIFT_NODE_COUNT} * 3)) nodes"
      bin/hypershift create cluster aws \
        --pull-secret=/etc/ci-pull-credentials/.dockerconfigjson \
        --aws-creds=${AWS_GUEST_INFRA_CREDENTIALS_FILE} \
        --additional-tags="expirationDate=$(date -d '4 hours' --iso=minutes --utc)" \
        --name=${CLUSTER_NAME} \
        --region=us-east-1 \
        --infra-id=${CLUSTER_NAME} \
        --base-domain=${DOMAIN} \
        --instance-type=${HYPERSHIFT_INSTANCE_TYPE} \
        --zones=${HYPERSHIFT_ZONES} \
        --service-cidr=172.29.0.0/16 \
        --node-pool-replicas=${HYPERSHIFT_NODE_COUNT} \
        --release-image=${HYPERSHIFT_HC_RELEASE_IMAGE} \
        --release-stream=${DEFAULT_RELEASE_STREAM} \
        --namespace=${HYPERSHIFT_NAMESPACE} \
        --annotations resource-request-override.hypershift.openshift.io/kube-apiserver.kube-apiserver=memory=3Gi,cpu=2000m
      echo "Waiting for cluster to become available"
      oc wait --timeout=10m --for=condition=Available --namespace=${HYPERSHIFT_NAMESPACE} hostedcluster/${CLUSTER_NAME}
      echo "Cluster became available, creating kubeconfig"

      # Data for cluster bot.
      # The kubeadmin-password secret is reconciled only after the kas is available so giving a few seconds to avoid racing and move forward otherwise. 
      sleep 15
      echo "Getting ${CLUSTER_NAME}-kubeadmin-password from namespace ${HYPERSHIFT_NAMESPACE}"
      until \
        oc get secret -n${HYPERSHIFT_NAMESPACE} ${CLUSTER_NAME}-kubeadmin-password 2> /dev/null; do
          echo "$(date --rfc-3339=seconds) kubeadmin password not yet available"
          sleep 5
      done
      oc get secret -n${HYPERSHIFT_NAMESPACE} ${CLUSTER_NAME}-kubeadmin-password --template={{.data.password}} | base64 -d > ${SHARED_DIR}/kubeadmin-password

      bin/hypershift create kubeconfig --namespace=${HYPERSHIFT_NAMESPACE} --name=${CLUSTER_NAME} >${SHARED_DIR}/management_cluster_kubeconfig
      bin/hypershift create kubeconfig --namespace=${HYPERSHIFT_NAMESPACE} --name=${CLUSTER_NAME} >${SHARED_DIR}/kubeconfig
      echo "Waiting for clusteroperators to be ready"
      export KUBECONFIG=${SHARED_DIR}/management_cluster_kubeconfig
      until \
        oc wait clusterversion/version --for='condition=Available=True' > /dev/null; do
          echo "$(date --rfc-3339=seconds) Clusteroperators not yet ready"
          oc get clusterversion 2>/dev/null || true
          sleep 1s
      done
      # Data for cluster bot.
      echo "https://$(oc -n openshift-console get routes console -o=jsonpath='{.spec.host}')" > "${SHARED_DIR}/console.url"
    credentials:
    - mount_path: /etc/hypershift-ci-jobs-awscreds
      name: hypershift-ci-jobs-awscreds
      namespace: test-credentials
    - mount_path: /etc/ci-pull-credentials
      name: ci-pull-credentials
      namespace: test-credentials
    - mount_path: /etc/hypershift-kubeconfig
      name: hypershift-ci-1
      namespace: test-credentials
    from_image:
      namespace: ocp
      name: "4.14"
      tag: hypershift-operator
    grace_period: 1m0s
    resources:
      requests:
        cpu: 100m
    timeout: 25m0s
