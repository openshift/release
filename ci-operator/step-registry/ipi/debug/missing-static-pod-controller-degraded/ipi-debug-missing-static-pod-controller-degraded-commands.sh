#!/bin/bash

set -o nounset
set -o errexit
set -o pipefail

if [[ "${STATIC_POD_CHECK_WORKAROUND:=false}" == "true" ]]; then

echo "Creating the manifest_static-pod-check-workaround-master-mc.yml file..."
#
# This is taken from https://github.com/redhat-ztp/dev-utils/tree/static-pod-check/static-pod-check
# Which was the answer for https://issues.redhat.com/browse/OCPBUGS-2474
#
cat >> "${SHARED_DIR}/manifest_static-pod-check-workaround-master-mc.yml" << EOF
kind: MachineConfig
apiVersion: machineconfiguration.openshift.io/v1
metadata:
  name: 99-static-pod-check-workaround-master
  creationTimestamp:
  labels:
    machineconfiguration.openshift.io/role: master
spec:
  config:
    ignition:
      version: ${IGNITIONVERSION}
    systemd:
      units:
      - name: static-pod-check-workaround.service
        enabled: true
        contents: |
          [Unit]
          Description=Check for stuck static pod revisions
          After=kubelet.service

          [Service]
          Type=simple
          User=root
          ExecStart=/usr/local/bin/static-pod-check-workaround.sh -v --max-failures 30
          Restart=always

          [Install]
          WantedBy=multi-user.target
    storage:
      files:
      - overwrite: true
        path: "/usr/local/bin/static-pod-check-workaround.sh"
        mode: 0744
        user:
          name: root
        contents:
          source: "data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKIwojIFBlcmlvZGljYWxseSBjaGVja3Mgc3RhdGljIHBvZCBjb250YWluZXIgc3RhdGVzLgojIElmIHVuaGVhbHRoeSBmb3IgYSBwZXJpb2Qgb2YgdGltZSwgcmVzdGFydCBrdWJlbGV0LnNlcnZpY2UKIwoKUFJPRz0kKGJhc2VuYW1lICIkMCIpCgojIFRhZyBmb3IgbG9ncyBpbiBqb3VybmFsZApkZWNsYXJlIGxvZ3RhZz0ic3RhdGljLXBvZC1jaGVjay13b3JrYXJvdW5kIgoKIyBEZWJ1ZyBsb2dzCmRlY2xhcmUgdmVyYm9zZT0ibm8iCgojIExvZyB0byBzdGRvdXQgaW5zdGVhZCBvZiBqb3VybmFsZApkZWNsYXJlIGxvZ190b19zdGRvdXQ9Im5vIgoKIyBMb2NhdGlvbiBvZiBzdGF0aWMgcG9kIG1hbmlmZXN0cwpkZWNsYXJlIG1hbmlmZXN0c19kaXI9Ii9ldGMva3ViZXJuZXRlcy9tYW5pZmVzdHMiCgojIE1pbmltdW0gdGltZSBrdWJlbGV0IHNob3VsZCBiZSBhY3RpdmUgYmVmb3JlIHdlIGNoZWNrIHN0YXRlcwpkZWNsYXJlIGt1YmVsZXRfdXBfbWluaW11bV9zZWNzPTEyMDAKCiMgVGltZSBiZXR3ZWVuIGNoZWNrcyB3aGVuIHN0YXRpYyBwb2RzIGFyZSBoZWFsdGh5CmRlY2xhcmUgaW50ZXJ2YWxfaGVhbHRoeV9zZWNzPTMwMAoKIyBUaW1lIGJldHdlZW4gY2hlY2tzIHdoZW4gc3RhdGljIHBvZHMgYXJlIHVuaGVhbHRoeQpkZWNsYXJlIGludGVydmFsX3VuaGVhbHRoeV9zZWNzPTMwCgojIE51bWJlciBvZiBmYWlsZWQgaGVhbHRoIGNoZWNrcyBmb3IgYSBnaXZlbiBwb2QgYmVmb3JlIHJlc3RhcnRpbmcga3ViZWxldApkZWNsYXJlIG1heF9jb25zZWN1dGl2ZV9mYWlsdXJlcz0yMAoKIyBGb3IgdGVzdGluZywgZm9yY2UgaGVhbHRoIGNoZWNrIGZhaWx1cmUgYnkgY3JlYXRpbmcgdGhpcyBmbGFnIGZpbGUKZGVjbGFyZSB0ZXN0X2ZhaWx1cmVfZmxhZ19maWxlPS90bXAvZm9yY2Vfc3RhdGljX3BvZF9jaGVja19mYWlsdXJlLmZsYWcKCiMgRm9yIHRlc3RpbmcsIGFsbG93IGRyeS1ydW4gdG8gb25seSBsb2cKZGVjbGFyZSBkcnlydW49Im5vIgoKIyBBc3NvY2lhdGl2ZSBhcnJheSBmb3IgdHJhY2tpbmcgY29uc2VjdXRpdmUgZmFpbHVyZXMKZGVjbGFyZSAtQSBoZWFsdGhfZmFpbHVyZXMKCiMKIyBMb2dnaW5nIGZ1bmN0aW9ucwojCmZ1bmN0aW9uIGxvZ2luZm8gewogICAgaWYgWyAiJHtsb2dfdG9fc3Rkb3V0fSIgPSAibm8iIF07IHRoZW4KICAgICAgICBsb2dnZXIgLXQgIiR7bG9ndGFnfSIgLS1pZD0kQkFTSFBJRCAiJDEiCiAgICBlbHNlCiAgICAgICAgZWNobyAiJChkYXRlKTogJDEiCiAgICBmaQp9CgpmdW5jdGlvbiBsb2dkZWJ1ZyB7CiAgICBpZiBbICIke3ZlcmJvc2V9IiA9ICJubyIgXTsgdGhlbgogICAgICAgIHJldHVybgogICAgZmkKCiAgICBpZiBbICIke2xvZ190b19zdGRvdXR9IiA9ICJubyIgXTsgdGhlbgogICAgICAgIGxvZ2dlciAtdCAiJHtsb2d0YWd9IiAtLWlkPSRCQVNIUElEICIkMSIKICAgIGVsc2UKICAgICAgICBlY2hvICIkKGRhdGUpOiAkMSIKICAgIGZpCn0KCiMKIyBWZXJpZnkga3ViZWxldCBoYXMgYmVlbiBydW5uaW5nIGZvciBhdCBsZWFzdCBrdWJlbGV0X3VwX21pbmltdW1fc2VjcyBzZWNvbmRzCiMKZnVuY3Rpb24ga3ViZWxldF9ydW5uaW5nIHsKICAgIGlmICEgc3lzdGVtY3RsIC1xIGlzLWFjdGl2ZSBrdWJlbGV0LnNlcnZpY2UgOyB0aGVuCiAgICAgICAgbG9nZGVidWcgImt1YmVsZXQuc2VydmljZSBpcyBub3QgYWN0aXZlIgogICAgICAgIHJldHVybiAxCiAgICBmaQoKICAgIGxvY2FsIGt1YmVsZXRfc3RhcnRfdGltZQogICAgbG9jYWwga3ViZWxldF9zdGFydF90aW1lX3NlY3MKICAgIGxvY2FsIHNlY3Nfc2luY2Vfc3RhcnQKCiAgICBrdWJlbGV0X3N0YXJ0X3RpbWU9JChzeXN0ZW1jdGwgc2hvdyBrdWJlbGV0LnNlcnZpY2UgLS1wcm9wZXJ0eSBBY3RpdmVFbnRlclRpbWVzdGFtcCAtLXZhbHVlKQogICAga3ViZWxldF9zdGFydF90aW1lX3NlY3M9JChkYXRlIC0tZGF0ZT0iJHtrdWJlbGV0X3N0YXJ0X3RpbWV9IiArJXMpCiAgICBzZWNzX3NpbmNlX3N0YXJ0PSQoKCQoZGF0ZSArJXMpLWt1YmVsZXRfc3RhcnRfdGltZV9zZWNzKSkKCiAgICBpZiBbICIke3NlY3Nfc2luY2Vfc3RhcnR9IiAtbHQgIiR7a3ViZWxldF91cF9taW5pbXVtX3NlY3N9IiBdOyB0aGVuCiAgICAgICAgbG9nZGVidWcgImt1YmVsZXQuc2VydmljZSBydW5uaW5nIG9ubHkgJHtzZWNzX3NpbmNlX3N0YXJ0fSBzZWNvbmRzIChtaW5pbXVtICR7a3ViZWxldF91cF9taW5pbXVtX3NlY3N9KSIKICAgICAgICByZXR1cm4gMQogICAgZmkKCiAgICByZXR1cm4gMAp9CgojCiMgVmVyaWZ5IHRoYXQgZWFjaCBjb250YWluZXIgaW4gY29uZmlndXJlZCBzdGF0aWMgcG9kcyBhcmUgaW4gYSBydW5uaW5nIHN0YXRlCiMKZnVuY3Rpb24gY2hlY2tfc3RhdGljX3BvZF9jb250YWluZXJfaGVhbHRoIHsKICAgIGxvY2FsIGN1cnJlbnRfcHNfb3V0cHV0CiAgICBsb2NhbCBmCiAgICBsb2NhbCBuYW1lCiAgICBsb2NhbCBzdGF0ZQogICAgbG9jYWwgZmFpbHVyZXM9MAoKICAgIGN1cnJlbnRfcHNfb3V0cHV0PSQoY3JpY3RsIHBzIC1vIGpzb24gMj4vZGV2L251bGwpCiAgICBmb3IgZiBpbiAiJHttYW5pZmVzdHNfZGlyfSIvKi55YW1sIDsgZG8KICAgICAgICBpZiBbICEgLWYgIiR7Zn0iIF07IHRoZW4KICAgICAgICAgICAgbG9naW5mbyAiU3RhdGljIHBvZCBtYW5pZmVzdCBub3QgZm91bmQ6ICR7bWFuaWZlc3RzX2Rpcn0iCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgZmkKCiAgICAgICAgIyBHZXQgY29udGFpbmVyIHN0YXRlIG9mIHN5c3RlbS1ub2RlLWNyaXRpY2FsIHBvZHMKICAgICAgICBmb3IgbmFtZSBpbiAkKGpxIC1yICdzZWxlY3QoLnNwZWMucHJpb3JpdHlDbGFzc05hbWU9PSJzeXN0ZW0tbm9kZS1jcml0aWNhbCIpIHwgLnNwZWMuY29udGFpbmVyc1tdLm5hbWUnICRmKTsgZG8KICAgICAgICAgICAgc3RhdGU9JChlY2hvICIke2N1cnJlbnRfcHNfb3V0cHV0fSIgfCBqcSAtciAtLWFyZyBuYW1lICIke25hbWV9IiAnLmNvbnRhaW5lcnNbXSB8IHNlbGVjdCgubWV0YWRhdGEubmFtZT09JG5hbWUpLnN0YXRlJykKICAgICAgICAgICAgaWYgWyAiJHtzdGF0ZX0iICE9ICJDT05UQUlORVJfUlVOTklORyIgXTsgdGhlbgogICAgICAgICAgICAgICAgaWYgWyAteiAiJHtzdGF0ZX0iIF07IHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2dpbmZvICIke25hbWV9IGlzIG5vdCBmb3VuZCBpbiBjcmljdGwgcHMgb3V0cHV0IgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGxvZ2luZm8gIiR7bmFtZX0gaXMgbm90IHJ1bm5pbmc6IHN0YXRlPSR7c3RhdGV9IgogICAgICAgICAgICAgICAgZmkKCiAgICAgICAgICAgICAgICBmYWlsdXJlcz0kKChmYWlsdXJlcysxKSkKICAgICAgICAgICAgICAgIGhlYWx0aF9mYWlsdXJlc1siJHtuYW1lfSJdPSQoKCR7aGVhbHRoX2ZhaWx1cmVzWyIke25hbWV9Il19KzEpKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgaGVhbHRoX2ZhaWx1cmVzWyIke25hbWV9Il09MAogICAgICAgICAgICBmaQogICAgICAgIGRvbmUKICAgIGRvbmUKCiAgICBpZiBbIC1mICIke3Rlc3RfZmFpbHVyZV9mbGFnX2ZpbGV9IiBdOyB0aGVuCiAgICAgICAgbG9jYWwgdGVzdG5hbWUKICAgICAgICAjIHNoZWxsY2hlY2sgZGlzYWJsZT1TQzIwMTMKICAgICAgICBmb3IgdGVzdG5hbWUgaW4gJChjYXQgIiR7dGVzdF9mYWlsdXJlX2ZsYWdfZmlsZX0iKTsgZG8KICAgICAgICAgICAgaGVhbHRoX2ZhaWx1cmVzWyIke3Rlc3RuYW1lfSJdPSQoKCR7aGVhbHRoX2ZhaWx1cmVzWyIke3Rlc3RuYW1lfSJdfSsxKSkKICAgICAgICAgICAgZmFpbHVyZXM9JCgoZmFpbHVyZXMrMSkpCiAgICAgICAgICAgIGxvZ2luZm8gIlRlc3RpbmcgZmFpbHVyZSB3aXRoICR7dGVzdF9mYWlsdXJlX2ZsYWdfZmlsZX0gcHJlc2VuY2U6ICR7dGVzdG5hbWV9OiAke2hlYWx0aF9mYWlsdXJlc1ske3Rlc3RuYW1lfV19IgogICAgICAgIGRvbmUKICAgIGZpCgogICAgcmV0dXJuICIke2ZhaWx1cmVzfSIKfQoKIwojIENoZWNrIGhlYWx0aF9mYWlsdXJlcyBhcnJheSB0byBzZWUgaWYgYW55IHBvZHMgaGF2ZSByZWFjaGVkIG1heGltdW0gY29uc2VjdXRpdmUgZmFpbHVyZXMKIwpmdW5jdGlvbiBjaGVja19oZWFsdGhfZmFpbHVyZXMgewogICAgbG9jYWwgbmFtZQogICAgbG9jYWwgcmM9MAogICAgZm9yIG5hbWUgaW4gIiR7IWhlYWx0aF9mYWlsdXJlc1tAXX0iOyBkbwogICAgICAgIGlmIFsgIiR7aGVhbHRoX2ZhaWx1cmVzWyR7bmFtZX1dfSIgLWdlICIke21heF9jb25zZWN1dGl2ZV9mYWlsdXJlc30iIF07IHRoZW4KICAgICAgICAgICAgbG9naW5mbyAiJHtuYW1lfSBoYXMgcmVhY2hlZCBtYXhpbXVtIGNvbnNlY3V0aXZlIGZhaWx1cmVzICgke2hlYWx0aF9mYWlsdXJlc1ske25hbWV9XX0iCiAgICAgICAgICAgIHJjPSQoKHJjKzEpKQogICAgICAgIGZpCiAgICBkb25lCgogICAgcmV0dXJuICIke3JjfSIKfQoKIwojIFJ1biB0aGUgY29udGFpbmVyIHBvZCBjaGVjaywgd2l0aCBsaW1pdGVkIHJldHJpZXMgaW4gZmFpbHVyZSBzY2VuYXJpbwojCmZ1bmN0aW9uIHJ1bl9jaGVjayB7CiAgICB3aGlsZSAhIGNoZWNrX3N0YXRpY19wb2RfY29udGFpbmVyX2hlYWx0aDsgZG8KICAgICAgICBpZiAhIGNoZWNrX2hlYWx0aF9mYWlsdXJlczsgdGhlbgogICAgICAgICAgICBsb2dpbmZvICJzdGF0aWMgcG9kIGNvbnRhaW5lcnMgdW5oZWFsdGh5IGZvciB0b28gbG9uZyIKICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICBmaQoKICAgICAgICBzbGVlcCAiJHtpbnRlcnZhbF91bmhlYWx0aHlfc2Vjc30iCiAgICBkb25lCgogICAgIyBSZXNldCBoZWFsdGhfZmFpbHVyZXMKICAgIGhlYWx0aF9mYWlsdXJlcz0oKQoKICAgIGxvZ2RlYnVnICJzdGF0aWMgcG9kIGNvbnRhaW5lcnMgaGVhbHRoeSIKICAgIHJldHVybiAwCn0KCiMKIyBVc2FnZQojCmZ1bmN0aW9uIHVzYWdlIHsKICAgIGNhdCA8PEVPRgpVc2FnZTogJHtQUk9HfQpPcHRpb25zOgogICAgLS1kcnlydW4gfCAtbiAgICAgICAgICAgICAgICAgRHJ5IHJ1biAoZG9uJ3QgcmVzdGFydCBrdWJlbGV0LCBsb2cgb25seSkKICAgIC0tdmVyYm9zZSB8IC12ICAgICAgICAgICAgICAgIFR1cm4gb24gZGVidWcgbG9ncwogICAgLS1sb2ctdG8tc3Rkb3V0ICAgICAgICAgICAgICAgTG9nIHRvIHN0ZG91dCBpbnN0ZWFkIG9mIGpvdXJuYWxkCiAgICAtLW1hbmlmZXN0cy1kaXIgfCAtbSAgICAgICAgICBMb2NhdGlvbiBvZiBzdGF0aWMgcG9kIG1hbmlmZXN0cyAoZGVmYXVsdDogL2V0Yy9rdWJlcm5ldGVzL21hbmlmZXN0cykKICAgIC0ta3ViZWxldC11cC1taW5pbXVtIDxzZWNzPiAgIE1pbmltdW0gdGltZSwgaW4gc2Vjb25kcywga3ViZWxldCBtdXN0IGJlIGFjdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGFsbG93aW5nIGhlYWx0aCBjaGVja3MgdG8gcnVuIChkZWZhdWx0OiAxMjAwKQogICAgLS1oZWFsdGh5LWludGVydmFsIDxzZWNzPiAgICAgSW50ZXJ2YWwgYmV0d2VlbiBjaGVja3MsIGluIHNlY29uZHMsIHdoZW4gc3RhdGljCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2RzIGFyZSBoZWFsdGh5IChkZWZhdWx0OiAzMDApCiAgICAtLXVuaGVhbHRoeS1pbnRlcnZhbCA8c2Vjcz4gICBJbnRlcnZhbCBiZXR3ZWVuIGNoZWNrcywgaW4gc2Vjb25kcywgd2hlbiBzdGF0aWMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvZHMgYXJlIHVuaGVhbHRoeSAoZGVmYXVsdDogMzApCiAgICAtLW1heC1mYWlsdXJlcyA8aW50PiAgICAgICAgICBNYXhpbXVtIGNvbnNlY3V0aXZlIGhlYWx0aCBjaGVjayBmYWlsdXJlcyBmb3IgYW55IGdpdmVuIHBvZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHJlc3RhcnRpbmcga3ViZWxldCAoZGVmYXVsdDogMjApCkVPRgogICAgZXhpdCAxCn0KCiMKIyBQcm9jZXNzIGNtZGxpbmUgYXJndW1lbnRzCiMKCmxvbmdvcHRzPSgKICAgICJoZWxwIgogICAgImRyeXJ1biIKICAgICJ2ZXJib3NlIgogICAgImxvZy10by1zdGRvdXQiCiAgICAibWFuaWZlc3RzLWRpcjoiCiAgICAia3ViZWxldC11cC1taW5pbXVtOiIKICAgICJoZWFsdGh5LWludGVydmFsOiIKICAgICJ1bmhlYWx0aHktaW50ZXJ2YWw6IgogICAgIm1heC1mYWlsdXJlczoiCikKCmxvbmdvcHRzX3N0cj0kKElGUz0sOyBlY2hvICIke2xvbmdvcHRzWypdfSIpCgppZiAhIE9QVFM9JChnZXRvcHQgLW8gImh2bm06IiAtLWxvbmcgIiR7bG9uZ29wdHNfc3RyfSIgLS1uYW1lICIkMCIgLS0gIiRAIik7IHRoZW4KICAgIHVzYWdlCiAgICBleGl0IDEKZmkKCmV2YWwgc2V0IC0tICIke09QVFN9IgoKd2hpbGUgOjsgZG8KICAgIGNhc2UgIiQxIiBpbgogICAgICAgIC12fC0tdmVyYm9zZSkKICAgICAgICAgICAgdmVyYm9zZT0ieWVzIgogICAgICAgICAgICBzaGlmdAogICAgICAgICAgICA7OwogICAgICAgIC1ufC0tZHJ5cnVuKQogICAgICAgICAgICBkcnlydW49InllcyIKICAgICAgICAgICAgc2hpZnQKICAgICAgICAgICAgOzsKICAgICAgICAtLWxvZy10by1zdGRvdXQpCiAgICAgICAgICAgIGxvZ190b19zdGRvdXQ9InllcyIKICAgICAgICAgICAgc2hpZnQKICAgICAgICAgICAgOzsKICAgICAgICAtbXwtLW1hbmlmZXN0cy1kaXIpCiAgICAgICAgICAgIG1hbmlmZXN0c19kaXI9IiR7Mn0iCiAgICAgICAgICAgIHNoaWZ0IDIKICAgICAgICAgICAgOzsKICAgICAgICAtLWt1YmVsZXQtdXAtbWluaW11bSkKICAgICAgICAgICAga3ViZWxldF91cF9taW5pbXVtX3NlY3M9IiR7Mn0iCiAgICAgICAgICAgIHNoaWZ0IDIKICAgICAgICAgICAgOzsKICAgICAgICAtLWhlYWx0aHktaW50ZXJ2YWwpCiAgICAgICAgICAgIGludGVydmFsX2hlYWx0aHlfc2Vjcz0iJHsyfSIKICAgICAgICAgICAgc2hpZnQgMgogICAgICAgICAgICA7OwogICAgICAgIC0tdW5oZWFsdGh5LWludGVydmFsKQogICAgICAgICAgICBpbnRlcnZhbF91bmhlYWx0aHlfc2Vjcz0iJHsyfSIKICAgICAgICAgICAgc2hpZnQgMgogICAgICAgICAgICA7OwogICAgICAgIC0tbWF4LWZhaWx1cmVzKQogICAgICAgICAgICBtYXhfY29uc2VjdXRpdmVfZmFpbHVyZXM9IiR7Mn0iCiAgICAgICAgICAgIHNoaWZ0IDIKICAgICAgICAgICAgOzsKICAgICAgICAtLSkKICAgICAgICAgICAgc2hpZnQKICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgOzsKICAgICAgICAtaHwtLWhlbHApCiAgICAgICAgICAgIHVzYWdlCiAgICAgICAgICAgIDs7CiAgICAgICAgKikKICAgICAgICAgICAgdXNhZ2UKICAgICAgICAgICAgOzsKICAgIGVzYWMKZG9uZQoKIwojIFJ1biBoZWFsdGggY2hlY2sKIwp3aGlsZSA6OyBkbwogICAgaWYga3ViZWxldF9ydW5uaW5nICYmICEgcnVuX2NoZWNrIDsgdGhlbgogICAgICAgIGlmIFsgIiR7ZHJ5cnVufSIgPSAibm8iIF07IHRoZW4KICAgICAgICAgICAgbG9naW5mbyAiUmVzdGFydGluZyBrdWJlbGV0LnNlcnZpY2UiCiAgICAgICAgICAgIHN5c3RlbWN0bCBzdG9wIGt1YmVsZXQuc2VydmljZQogICAgICAgICAgICBzeXN0ZW1jdGwgc3RhcnQga3ViZWxldC5zZXJ2aWNlCiAgICAgICAgZWxzZQogICAgICAgICAgICBsb2dpbmZvICJIZWFsdGggY2hlY2sgZmFpbGVkIChkcnlydW4gb25seSwgbm90IHJlc3RhcnRpbmcga3ViZWxldCkiCiAgICAgICAgZmkKCiAgICAgICAgIyBSZXNldCBoZWFsdGhfZmFpbHVyZXMKICAgICAgICBoZWFsdGhfZmFpbHVyZXM9KCkKICAgIGZpCgogICAgc2xlZXAgIiR7aW50ZXJ2YWxfaGVhbHRoeV9zZWNzfSIKZG9uZQoK"
EOF
cat >> "${SHARED_DIR}/manifest_static-pod-check-workaround-worker-mc.yml" << EOF
kind: MachineConfig
apiVersion: machineconfiguration.openshift.io/v1
metadata:
  name: 99-static-pod-check-workaround-worker
  creationTimestamp:
  labels:
    machineconfiguration.openshift.io/role: worker
spec:
  config:
    ignition:
      version: ${IGNITIONVERSION}
    systemd:
      units:
      - name: static-pod-check-workaround.service
        enabled: true
        contents: |
          [Unit]
          Description=Check for stuck static pod revisions
          After=kubelet.service

          [Service]
          Type=simple
          User=root
          ExecStart=/usr/local/bin/static-pod-check-workaround.sh -v --max-failures 30
          Restart=always

          [Install]
          WantedBy=multi-user.target
    storage:
      files:
      - overwrite: true
        path: "/usr/local/bin/static-pod-check-workaround.sh"
        mode: 0744
        user:
          name: root
        contents:
          source: "data:text/plain;charset=utf-8;base64,"
EOF

fi
