base_images:
  cli:
    name: "4.8"
    namespace: ocp
    tag: cli
  openshift-release-golang-1.15:
    name: release
    namespace: openshift
    tag: golang-1.15
  operator-index:
    name: redhat-operator-index
    namespace: ci
    tag: v4.8
  operator-registry:
    name: "4.8"
    namespace: ocp
    tag: operator-registry
  ubi:
    name: ubi
    namespace: ocp
    tag: "8"
build_root:
  image_stream_tag:
    name: release
    namespace: openshift
    tag: golang-1.15
images:
- dockerfile_path: Dockerfile
  from: ubi
  inputs:
    openshift-release-golang-1.15:
      as:
      - golang:1.15
  to: quay-bridge-operator
- dockerfile_literal: |
    FROM src
    COPY oc /usr/bin/oc
  from: src
  inputs:
    cli:
      paths:
      - destination_dir: .
        source_path: /usr/bin/oc
  to: src-oc
operator:
  bundles:
  - as: quay
    context_dir: bundle/downstream/
    dockerfile_path: Dockerfile
  substitutions:
  - pullspec: registry-proxy.engineering.redhat.com/rh-osbs/quay-quay-bridge-operator-rhel8:v3.6.0
    with: quay-bridge-operator
releases:
  latest:
    integration:
      name: "4.8"
      namespace: ocp
resources:
  '*':
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: e2e
  steps:
    cluster_profile: aws
    dependencies:
      OO_INDEX: ci-index-quay
    env:
      OO_CHANNEL: alpha
      OO_INSTALL_NAMESPACE: '!create'
      OO_PACKAGE: quay-bridge-operator
      OO_TARGET_NAMESPACES: '!all'
    post:
    - as: gather-quay
      commands: |
        #!/bin/bash

        set -o nounset
        set -o errexit
        set -o pipefail

        oc -n quay get quayregistries -o json >"$ARTIFACT_DIR/quayregistries.json" || true
        oc get quayintegrations -o json >"$ARTIFACT_DIR/quayintegrations.json" || true
      from: cli
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
    - chain: ipi-aws-post
    pre:
    - chain: ipi-aws-pre
    - ref: quay-install-ocs-operator
    - ref: quay-install-quay-operator
    - ref: quay-install-quay
    - ref: quay-create-admin
    - ref: optional-operators-subscribe
    - as: enable-quay-bridge-operator
      commands: |
        #!/bin/bash
        set -x

        set -o nounset
        set -o errexit
        set -o pipefail

        oc create secret -n openshift-operators generic quay-integration --from-file=token="$SHARED_DIR/quay-access-token"

        registryEndpoint="$(oc -n quay get quayregistry quay -o jsonpath='{.status.registryEndpoint}')"
        registry="${registryEndpoint#https://}"

        echo "Creating QuayIntegration..."
        cat <<EOF | oc apply -f -
        apiVersion: quay.redhat.com/v1
        kind: QuayIntegration
        metadata:
          name: quay
        spec:
          clusterID: openshift
          credentialsSecret:
            namespace: openshift-operators
            name: quay-integration
          quayHostname: $registryEndpoint
        EOF

        echo "Marking Quay endpoint as insecure..."
        oc patch images.config.openshift.io/cluster --type=merge -p '{"spec":{"registrySources":{"insecureRegistries":["'"$registry"'"]}}}'
        echo "Waiting until Machine Config Pools are updated..."
        sleep 10
        time oc wait mcp --for=condition=Updated --all --timeout=20m
        echo "Waiting until Quay become ready..."
        for _ in {1..30}; do
          ready=$(oc -n quay get pods -l quay-component=quay-app -o go-template='{{$x := ""}}{{range .items}}{{range .status.conditions}}{{if eq .type "Ready"}}{{if or (eq $x "") (eq .status "False")}}{{$x = .status}}{{end}}{{end}}{{end}}{{end}}{{or $x "False"}}')
          if [ "$ready" = "True" ]; then
            echo "Quay is ready"
            sleep 600 # Wait until all nodes are updated and all operator are stable.
            exit 0
          fi
          sleep 10
        done
        oc -n quay get pods -l quay-component=quay-app -o yaml
        oc -n quay logs $(oc -n quay get pods -l quay-component=quay-app -o name) || true
        echo "Quay is not ready"
        exit 1
      from: cli
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
    test:
    - as: tests
      commands: |
        registry="$(oc get quayintegrations -o jsonpath='{.items[*].spec.quayHostname}')"

        oc new-project e2e-test

        # Wait until QBO creates a new project and secrets
        sleep 10
        oc -n e2e-test get secrets builder-quay-openshift deployer-quay-openshift default-quay-openshift

        # Create a new build and check its results
        oc -n e2e-test new-app --template=httpd-example
        for i in {1..120}; do
            phase=$(oc -n e2e-test get build httpd-example-1 -o jsonpath='{.status.phase}' || true)
            if [ "$phase" != "" ] && [ "$phase" != "New" ] && [ "$phase" != "Pending" ] && [ "$phase" != "Running" ]; then
                break
            fi
            sleep 1
        done
        if [ "$phase" != "Complete" ]; then
          set -x
          oc -n e2e-test get builds
          oc -n e2e-test get pods
          oc -n e2e-test logs httpd-example-1-build
          exit 1
        fi

        imageRef=$(oc -n e2e-test get is httpd-example -o jsonpath='{.status.tags[0].items[0].dockerImageReference}')
        case "$imageRef" in
        "$registry/"*)
          ;;
        *)
          set -x
          oc -n e2e-test get builds
          oc -n e2e-test get is httpd-example -o yaml
          exit 1
          ;;
        esac
      dependencies:
      - env: OO_INDEX
        name: ci-index
      from: src-oc
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
    workflow: optional-operators-ci-aws
zz_generated_metadata:
  branch: master
  org: quay
  repo: quay-bridge-operator
