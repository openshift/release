base_images:
  cli:
    name: "4.20"
    namespace: ocp
    tag: cli
binary_build_commands: make openshift-toolchain
build_root:
  from_repository: true
  use_build_cache: true
images:
- dockerfile_literal: |
    FROM replaced-by-from
    COPY oc /usr/bin/oc
    RUN ln -s /usr/bin/oc /usr/bin/kubectl
    RUN curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | sh
  from: bin
  inputs:
    cli:
      paths:
      - destination_dir: .
        source_path: /usr/bin/oc
  to: bin-oc-kubectl-helm
releases:
  initial:
    integration:
      name: "4.20"
      namespace: ocp
  latest:
    integration:
      include_built_images: true
      name: "4.20"
      namespace: ocp
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: e2e-kwok
  skip_if_only_changed: ^docs/|^\.github|\.md$|^(?:.*/)?(?:\.gitignore|OWNERS|OWNERS_ALIASES|PROJECT|LICENSE)$
  steps:
    cluster_profile: aws
    test:
    - as: setup-registry
      cli: latest
      commands: |
        oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}' --type=merge
        REGISTRY_HOST=$(oc get routes --namespace openshift-image-registry default-route -o jsonpath='{.spec.host}')
        openssl s_client -showcerts -connect "${REGISTRY_HOST}:443" < /dev/null 2>/dev/null | sed -n '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p' > /tmp/registry.crt
        oc create cm -n openshift-config registry-certs --from-file=${REGISTRY_HOST}=/tmp/registry.crt
        oc patch image.config.openshift.io/cluster --type merge -p '{"spec":{"additionalTrustedCA":{"name":"registry-certs"}}}'

        echo "Waiting until image registry is ready..."
        sleep 15
        time {
          oc wait --for=condition=Available clusteroperator/image-registry --timeout=10m && \
          oc wait --for=condition=Progressing=False clusteroperator/image-registry --timeout=10m && \
          oc wait --for=condition=Degraded=False clusteroperator/image-registry --timeout=10m
        }
        echo "Waiting until apiserver is ready..."
        time {
          oc wait --for=condition=Available clusteroperator/openshift-apiserver --timeout=10m && \
          oc wait --for=condition=Progressing=False clusteroperator/openshift-apiserver --timeout=10m && \
          oc wait --for=condition=Degraded=False clusteroperator/openshift-apiserver --timeout=10m
        }
      from: src
      resources:
        requests:
          cpu: 100m
    - as: test
      cli: latest
      commands: |
        make openshift-toolchain
        # log in to the cluster in order for the script to log in to the internal registry
        oc login -u kubeadmin "$(oc whoami --show-server)" < "${KUBEADMIN_PASSWORD_FILE}"
        CLEANUP=false ./hack/openshift-kwok-e2e.sh
      from: bin-oc-kubectl-helm
      resources:
        requests:
          cpu: 100m
    workflow: ipi-aws
zz_generated_metadata:
  branch: openshift-main
  org: maxcao13
  repo: karpenter
