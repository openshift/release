base_images:
  flowlogs-pipeline:
    name: flowlogs-pipeline
    namespace: netobserv
    tag: ci
  netobserv-ebpf-agent:
    name: netobserv-ebpf-agent
    namespace: netobserv
    tag: ci
  network-observability-console-plugin:
    name: network-observability-console-plugin
    namespace: netobserv
    tag: ci
  operator-sdk:
    name: "4.16"
    namespace: origin
    tag: operator-sdk
  ubi:
    name: ubi-minimal
    namespace: ocp
    tag: "9"
build_root:
  from_repository: true
images:
- dockerfile_path: Dockerfile
  from: ubi
  to: network-observability-operator
operator:
  bundles:
  - as: noo-bundle
    dockerfile_path: bundle.Dockerfile
  substitutions:
  - pullspec: quay.io/netobserv/network-observability-operator:.*
    with: network-observability-operator
  - pullspec: quay.io/netobserv/flowlogs-pipeline:.*
    with: pipeline:flowlogs-pipeline
  - pullspec: quay.io/netobserv/netobserv-ebpf-agent:.*
    with: pipeline:netobserv-ebpf-agent
  - pullspec: quay.io/netobserv/network-observability-console-plugin:.*
    with: pipeline:network-observability-console-plugin
promotion:
  to:
  - namespace: netobserv
    tag: ci
releases:
  latest:
    candidate:
      product: ocp
      stream: nightly
      version: "4.17"
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: e2e-operator
  cluster_claim:
    architecture: amd64
    as: custom
    cloud: aws
    labels:
      region: us-east-1
    owner: obs-netobserv
    product: ocp
    timeout: 1h0m0s
    version: "4.17"
  optional: true
  steps:
    test:
    - as: install
      cli: latest
      commands: |
        oc create ns openshift-netobserv-operator
        operator-sdk run bundle "$OO_BUNDLE" -n openshift-netobserv-operator --verbose --security-context-config restricted
        oc wait deployment --for condition=Available --timeout=120s netobserv-controller-manager -n openshift-netobserv-operator
      dependencies:
      - env: OO_BUNDLE
        name: noo-bundle
      from: operator-sdk
      resources:
        requests:
          cpu: 100m
    - as: noo-e2e-flowcollector
      cli: latest
      commands: |2

        export PATH=$PATH:$HOME

        if ! which kubectl; then
          ln -s "$(which oc)" ${HOME}/kubectl
        fi

        export CSV=$(oc get csv -n openshift-netobserv-operator | grep -E "net.*observ" | awk '{print $1}')
        make set-release-kind-downstream
        export NAMESPACE=netobserv
        PORT_FWD=false make deploy-loki
        oc apply -f /go/src/github.com/netobserv/network-observability-operator/config/samples/flows_v1beta2_flowcollector.yaml

        sleep 30
        echo "====> Waiting for flowlogs-pipeline daemonset to be created"
        while :; do
          oc get daemonset flowlogs-pipeline -n ${NAMESPACE} && break
          sleep 1
        done

        echo "====> Waiting for netobserv-ebpf-agent daemonset to be created"
        while :; do
          oc get daemonset netobserv-ebpf-agent -n ${NAMESPACE}-privileged && break
          sleep 1
        done

        echo "====> Waiting for console-plugin deployment to be created"
        while :; do
          oc get deployment netobserv-plugin -n ${NAMESPACE} && break
          sleep 1
        done

        echo "====> Waiting for flowcollector to be ready"
        timeout=0
        rc=1
        while [ $timeout -lt 180 ]; do
          status=$(oc get flowcollector/cluster -o jsonpath='{.status.conditions[0].type}' -n netobserv)
          if [[ $status == "Ready" ]]; then
            rc=0
            break
          fi
          sleep 30
          timeout=$((timeout+30))
        done
        if [ "${rc}" == 1 ]; then
          echo "flowcollector did not become Ready after 180 secs!!!"
          return 1
        fi

        echo "====> Deleting flowcollector"
        oc delete flowcollector/cluster
      from: src
      resources:
        requests:
          cpu: 100m
    workflow: generic-claim
zz_generated_metadata:
  branch: main
  org: netobserv
  repo: network-observability-operator
