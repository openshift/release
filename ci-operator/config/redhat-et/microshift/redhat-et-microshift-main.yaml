base_images:
  base:
    name: "4.7"
    namespace: ocp
    tag: base
  ocp_builder_rhel-8-golang-1.15-openshift-4.7:
    name: builder
    namespace: ocp
    tag: rhel-8-golang-1.15-openshift-4.7
binary_build_commands: make cross-build-linux-amd64 cross-build-linux-arm64
build_root:
  project_image:
    dockerfile_literal: |
      FROM registry.access.redhat.com/ubi8/go-toolset

      USER root

      ENV GOPATH=/go GOCACHE=/go/src/.cache GO111MODULE=on

      RUN mkdir -p $GOCACHE && mkdir -p /root/.aws

      WORKDIR $GOPATH/src/github.com/redhat-et/microshift

      RUN yum install gpgme-devel glibc-static libassuan-devel -y
    inputs:
      ocp_builder_rhel-8-golang-1.15-openshift-4.7:
        as:
        - registry.access.redhat.com/ubi8/go-toolset
images:
- dockerfile_literal: |
    FROM base
    ADD microshift /usr/bin/
    ENTRYPOINT ["/usr/bin/microshift", "run"]
  from: base
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/src/github.com/redhat-et/microshift/_output/bin/linux_amd64/microshift
  to: linux-amd64-4.7.0-0.microshift
- dockerfile_literal: |
    FROM base
    ADD microshift /usr/bin/
    ENTRYPOINT ["/usr/bin/microshift", "run"]
  from: base
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/src/github.com/redhat-et/microshift/_output/bin/linux_arm64/microshift
  to: linux-arm64-4.7.0-0.microshift
- dockerfile_literal: |
    FROM registry.access.redhat.com/ubi8/ubi

    WORKDIR /alabama

    RUN mkdir -p ./microshift/linux_amd64 ./microshift/linux_arm64
    
    USER root

    RUN dnf install openssh-clients jq python3 -y && python3 -m pip install awscli

  from: base
  inputs:
    bin:
      paths:
      - destination_dir: ./microshift/linux_amd64/
        source_path: /go/src/github.com/redhat-et/microshift/_output/bin/linux_amd64/microshift
      - destination_dir: ./microshift/linux_arm64/
        source_path: /go/src/github.com/redhat-et/microshift/_output/bin/linux_arm64/microshift
  to: test-smoke-base
promotion:
  name: microshift
  namespace: microshift
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: verify
  commands: make verify
  container:
    from: src
- as: test-unit
  commands: make test-unit
  container:
    from: src
- as: run-smoke-tests
  steps:
    env:
      AWS_DEFAULT_REGION: us-east-2
      AWS_LAUNCH_TEMPLATE_ID: lt-0c7afc666d88ec6be
    test:
    - as: test-smoke-deploy-infra
      commands: |
        #! /usr/bin/env bash

        set -euo pipefail
        INSTANCE_ID=''
        clean_up(){
          printf ":: tearing down instance %s\n" $INSTANCE_ID
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID
        }
        trap clean_up EXIT

        chmod 600 $HOME/.ssh
        chmod 400 $HOME/.ssh/aws.pem

        printf ":: creating instance"
        INSTANCE="$(aws ec2 run-instances --launch-template LaunchTemplateId=$AWS_LAUNCH_TEMPLATE_ID \
                    --tag-specifications="ResourceType=instance,
                        Tags=[
                          {Key=Name,Value=${JOB_NAME:=openshift-release-ci}},
                          {Key=PULL_SHA,Value=${PULL_PULL_SHA:-' '}},
                          {Key=NAMESPACE,Value=${NAMESPACE:-' '}},
                          {Key=PROW_JOB_ID,Value=${PROW_JOB_ID:-' '}}]")" || exit 1
        INSTANCE_ID="$(jq -r ".Instances[0].InstanceId" <<< $INSTANCE)"
        printf ":: instance created, waiting for state==Running, id: %s\n" $INSTANCE_ID

        aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"

        INSTANCE="$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID")"
        PUB_DNS="$(jq -r '.Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicDnsName' <<< "$INSTANCE")"

        printf "shelling into instance [%s]\n" $INSTANCE_ID
        start=$(date +%s)
        timeout=120
        printf ":: attempting ssh connection for %s seconds" $timeout
        until ssh -o "StrictHostKeyChecking no" -t -vv -i $HOME/.ssh/aws.pem "ec2-user@$PUB_DNS" "echo Hello, AWS!"; do
          sleep 3
          passed=$(( $(date +%s) - start ))
          [ $passed -ge $timeout ] && printf ":: ssh connection attempts timed out (%s seconds)\n" $passed >&2 && exit 1
        done
        printf ":: SSH succeeded!\n"
      credentials:
      - mount_path: /alabama/.ssh/
        name: microshift-aws-ssh-access-pem
        namespace: test-credentials
      - mount_path: /alabama/.aws/
        name: microshift-aws-access-credentials
        namespace: test-credentials
      - mount_path: /alabama/.subscription-manager/
        name: microshift-dependency-access-credentials
        namespace: test-credentials
      dependencies:
      - env: TEST_SMOKE_BASE
        name: pipeline:test-smoke-base
      env:
      - name: AWS_DEFAULT_REGION
      - name: AWS_LAUNCH_TEMPLATE_ID
      from: test-smoke-base
      grace_period: 2m0s
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
zz_generated_metadata:
  branch: main
  org: redhat-et
  repo: microshift
