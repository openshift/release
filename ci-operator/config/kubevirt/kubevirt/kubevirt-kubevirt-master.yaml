base_images:
  base:
    name: "4.2"
    namespace: ocp
    tag: base
build_root:
  project_image:
    context_dir: hack/kubevirt-builder
    dockerfile_path: Dockerfile
canonical_go_repository: kubevirt.io/kubevirt
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tag_specification:
  name: "4.2"
  namespace: ocp
tests:
- as: "kubevirt-e2e-test"
  commands: |

    set -euo pipefail

    echo "fetching oc and kubectl for deployment"
    export oc_filename='oc.tar.gz'
    export oc_dirname="${oc_filename%.tar.gz}"
    export oc_download_url_base='https://mirror.openshift.com/pub/openshift-v4/clients/oc/4.2/linux/'
    (
      mkdir ${oc_dirname}
      cd ${oc_dirname}
      curl -L -O -o ${oc_filename} ${oc_download_url_base}/${oc_filename}
      tar zxvf ${oc_filename}
      ln -s $(pwd)/${oc_dirname} kubectl
    ) || ( echo "failed to download ${oc_filename}"; exit 1 )
    export PATH=$(pwd)/${oc_dirname}:$PATH
    which kubectl
    which oc

    echo "checking nodes for cluster"
    oc get nodes

    echo "checking configuration"
    env|grep KUBE
    kubectl config view

    export DOCKER_PREFIX='dhiller'
    export DOCKER_TAG="latest"
    export KUBEVIRT_PROVIDER=external

    export GIMME_GO_VERSION=1.12.8
    export GOPATH="/go"
    export GOBIN="/usr/bin"
    source /etc/profile.d/gimme.sh

    echo "creating manifests"
    bash -x ./hack/build-manifests.sh

    echo "checking configuration locations"
    echo "KUBECONFIG: ${KUBECONFIG}"
    set +e
    file "$HOME/.kube/config"
    set -e

    echo "patching cluster-up external provider"
    cat >cluster-up/cluster/external/provider.sh <<FILE
    #!/usr/bin/env bash

    function _kubectl() {
      kubectl "\$@"
    }

    function prepare_config() {
      BASE_PATH=\${KUBEVIRTCI_CONFIG_PATH:-\$PWD}

      ln -s \${KUBECONFIG:-\$HOME/.kube/config} \${BASE_PATH}/\$KUBEVIRT_PROVIDER/.kubeconfig

      cat >\${BASE_PATH}/\$KUBEVIRT_PROVIDER/config-provider-\$KUBEVIRT_PROVIDER.sh <<EOF
    kubeconfig=\\${BASE_PATH}/$KUBEVIRT_PROVIDER/.kubeconfig
    docker_tag=\\${DOCKER_TAG}
    docker_prefix=\\${DOCKER_PREFIX}
    manifest_docker_prefix=\\${DOCKER_PREFIX}
    image_pull_policy=\\${IMAGE_PULL_POLICY:-Always}
    EOF
    }

    # The external cluster is assumed to be up.  Do a simple check
    function up() {
      prepare_config
      _kubectl version >/dev/null
      if [ \$? -ne 0 ]; then
        echo -e "\n*** Unable to reach external cluster.  Please check configuration ***"
        echo -e "*** Type \"kubectl config view\" for current settings               ***\n"
        exit 1
      fi
      echo "Cluster is up"
    }

    function down() {
      echo "Not supported by this provider"
    }

    FILE

    echo "checking directory cluster-up/cluster/external/"
    ls -la "cluster-up/cluster/external/"

    echo "calling cluster-up to prepare config and check whether cluster is reachable"
    bash -x ./cluster-up/up.sh

    echo "checking cluster configuration after config prep"
    kubectl config view

    echo "deploying"
    bash -x ./hack/cluster-deploy.sh

    echo "checking pods for kubevirt"
    oc get pods -n kubevirt

    echo "testing"
    go get -u github.com/onsi/ginkgo/ginkgo
    bash -x ./hack/build-func-tests.sh
    bash -x ./hack/functests.sh

  openshift_installer_src:
    cluster_profile: gcp
