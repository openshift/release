base_images:
  base:
    name: "4.4"
    namespace: ocp
    tag: base
  ci_kubevirt-builder_30-5.8.1:
    name: kubevirt-builder
    namespace: ci
    tag: 30-5.8.1
  kubevirt-builder:
    name: kubevirt-builder
    namespace: ci
    tag: 30-5.8.1
build_root:
  image_stream_tag:
    name: kubevirt-builder
    namespace: ci
    tag: 30-5.8.1
canonical_go_repository: kubevirt.io/kubevirt
images:
- dockerfile_path: hack/ci/Dockerfile.ci
  from: kubevirt-builder
  inputs:
    ci_kubevirt-builder_30-5.8.1:
      as:
      - registry.svc.ci.openshift.org/ci/kubevirt-builder:30-5.8.1
    root:
      as:
      - builder
  to: kubevirt-test
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tag_specification:
  name: "4.4"
  namespace: ocp
tests:
- artifact_dir: /go/src/kubevirt.io/kubevirt/_out/exported-artifacts
  as: e2e-periodic-azure-nested-virt
  commands: |
    set -euo pipefail

    release_base_url="https://gcsweb.apps.ovirt.org/gcs/kubevirt-prow/devel/nightly/release/kubevirt/kubevirt"
    release_date=$(curl -L "${release_base_url}/latest")
    release_url="${release_base_url}/${release_date}"
    commit=$(curl -L "${release_url}/commit")

    export DOCKER_PREFIX='kubevirtnightlybuilds'
    DOCKER_TAG="${release_date}_$(echo ${commit} | cut -c 1-9)"
    export DOCKER_TAG

    echo "deploying kubevirt from nightly build"
    oc create -f "${release_url}/kubevirt-operator.yaml"
    oc create -f "${release_url}/kubevirt-cr.yaml"

    echo "Deploying test infrastructure"
    for testinfra_file in $(curl -L "${release_url}/testing/" | grep -oE 'https://[^"]*\.yaml'); do
        oc create -f ${testinfra_file}
    done

    set +e
    oc wait -n kubevirt kv kubevirt --for condition=Available --timeout 15m
    return_code=$?
    set -e
    if [ ${return_code} -ne 0 ]; then
        echo "Dumping KubeVirt state"
        hack/dump.sh
        exit ${return_code}
    fi

    echo "calling cluster-up to prepare config and check whether cluster is reachable"
    export KUBEVIRT_PROVIDER=external
    ./cluster-up/up.sh

    echo "testing"
    mkdir -p "$ARTIFACT_DIR"
    FUNC_TEST_ARGS='--ginkgo.noColor --ginkgo.succinct -ginkgo.slowSpecThreshold=60 --ginkgo.focus=\[crit:high\] --ginkgo.skip=(Slirp\sNetworking)|(with\sCPU\sspec)|(with\sTX\soffload\sdisabled)|(with\scni\sflannel\sand\sptp\splugin\sinterface)|(with\sovs-cni\splugin)|(test_id:1752)|(SRIOV)|(with\sEFI)|(Operator)|(GPU)|(DataVolume\sIntegration)|(test_id:3468)|(test_id:3466)|(test_id:1015)|(rfe_id:393) --junit-output='"${ARTIFACT_DIR}"'/junit.functest.xml' ./hack/functests.sh
  cron: 2 3 * * *
  openshift_installer_custom_test_image:
    cluster_profile: azure4
    from: pipeline:kubevirt-test
zz_generated_metadata:
  branch: master
  org: kubevirt
  repo: kubevirt
