[
  {
    "OcpVersion": "4.6",
    "OcpVersionTemplate": "release",
    "DeployFuncCall": "deploy_release_test_setup 0.34",
    "TestFuncCall": "test_release 0.34",
    "DockerPrefix": "kubevirt",
    "TestLaneFileSuffix": "0.34_4.6",
    "TestLaneVariants": [
      {
        "Name": "default",
        "Focus": {
          "Tests": [
            "[rfe_id:273][crit:high]"
          ]
        },
        "Skip": {
          "Quarantine": true
        },
        "Timeout": "2h0m0s",
        "CronHour": "22",
        "CronMinute": "0"
      }
    ],
    "ProwJobTimeout": "4h0m0s"
  },
  {
    "OcpVersion": "4.7",
    "OcpVersionTemplate": "release",
    "DeployFuncCall": "deploy_release_test_setup 0.36",
    "TestFuncCall": "test_release 0.36",
    "DockerPrefix": "kubevirt",
    "TestLaneFileSuffix": "0.36_4.7",
    "TestLaneVariants": [
      {
        "Name": "default",
        "Focus": {
          "Tests": [
            "[rfe_id:273][crit:high]"
          ]
        },
        "Skip": {
          "Quarantine": true
        },
        "Timeout": "2h0m0s",
        "CronHour": "23",
        "CronMinute": "15"

      }
    ],
    "ProwJobTimeout": "4h0m0s"
  },
  {
    "OcpVersion": "4.8",
    "OcpVersionTemplate": "release",
    "DeployFuncCall": "deploy_release_test_setup 0.41",
    "TestFuncCall": "test_release 0.41",
    "DockerPrefix": "quay.io/kubevirt",
    "TestLaneFileSuffix": "0.41_4.8",
    "TestLaneVariants": [
      {
        "Name": "default",
        "Focus": {
          "Tests": [
            "[rfe_id:273][crit:high]"
          ]
        },
        "Skip": {
          "Quarantine": true
        },
        "Timeout": "2h0m0s",
        "CronHour": "0",
        "CronMinute": "30"

      }
    ],
    "ProwJobTimeout": "4h0m0s"
  },
  {
    "OcpVersion": "4.9",
    "OcpVersionTemplate": "release",
    "DeployFuncCall": "deploy_release_test_setup 0.44",
    "TestFuncCall": "test_release 0.44",
    "DockerPrefix": "quay.io/kubevirt",
    "TestLaneFileSuffix": "0.44_4.9",
    "TestLaneVariants": [
      {
        "Name": "default",
        "Focus": {
          "Tests": [
            "[rfe_id:273][crit:high]"
          ]
        },
        "Skip": {
          "Quarantine": true
        },
        "Timeout": "2h0m0s",
        "CronHour": "1",
        "CronMinute": "45"

      }
    ],
    "ProwJobTimeout": "4h0m0s"
  },
  {
    "OcpVersion": "4.10",
    "OcpVersionTemplate": "integration",
    "DeployFuncCall": "deploy_nightly_test_setup",
    "TestFuncCall": "test_nightly",
    "DockerPrefix": "quay.io/kubevirt",
    "TestLaneFileSuffix": "nightly_4.10",
    "TestLaneVariants": [
      {
        "Name": "compute",
        "Focus": {
          "Tests": [
            "[sig-compute]"
          ]
        },
        "Skip": {
          "Quarantine": true,
          "TestIds": [
            779,
            780,
            782,
            783,
            790,
            998,
            1681,
            1783,
            1853,
            2221,
            2222,
            2224,
            2226,
            2303,
            2653,
            3095,
            3096,
            3145,
            3237,
            3239,
            3241,
            3242,
            3244,
            3245,
            3294,
            4113,
            4114,
            4135,
            4138,
            4607,
            4608,
            5360,
            6842,
            6843,
            6965,
            6966,
            6967,
            6968,
            6969,
            6970,
            6971,
            6972,
            6973,
            6974,
            6975,
            6976,
            6977,
            6979,
            6980,
            6982,
            6981,
            6995,
            7299
          ],
          "Tests": [
            "VM Live Migration should replace containerdisk and kernel boot images with their reproducible digest during migration",
            "VM Live Migration with CPU pinning and huge pages and NUMA passthrough should not make migrations fail",
            "VM Live Migration with CPU pinning and huge pages should not make migrations fail",
            "HostDevices with ephemeral disk Should successfully passthrough an emulated PCI device",
            "MediatedDevices with mediated devices configuration Should successfully passthrough a mediated device with a disabled display",
            "VirtualMachine A valid VirtualMachine given should report an error status when data volume error occurs",
            "VMI with external kernel boot with external alpine-based kernel & initrd images ensure successful boot",
            "VM Live Migration Starting a VirtualMachineInstance migration monitor Migration should generate empty isos of the right size on the target",
            "MediatedDevices with mediated devices configuration Should successfully passthrough a mediated device"
          ]
        },
        "Timeout": "7h0m0s",
        "CronHour": "2",
        "CronMinute": "0",
        "TestTimeout": "6h50m"
      },
      {
        "Name": "storage",
        "Focus": {
          "Tests": [
            "[sig-storage]"
          ]
        },
        "Skip": {
          "Quarantine": true,
          "TestIds": [
            836,
            837,
            838,
            851,
            868,
            1015,
            2226,
            2306,
            3057,
            3107,
            3130,
            3131,
            3132,
            3133,
            3136,
            3137,
            3138,
            3190,
            4611,
            5261,
            5262,
            6767,
            6837,
            6838,
            6949,
            6952
          ],
          "Tests": [
            "Starting a VirtualMachine with a DataVolume using Alpine http import a DataVolume with preallocation shouldn't have discard=unmap",
            "Starting a VirtualMachine with an invalid DataVolume using DataVolume with invalid URL shold be possible to stop VM if datavolume is crashing",
            "Hotplug hostpath should attach a hostpath based volume to running VM",
            "Hotplug iothreads should allow adding and removing hotplugged volumes",
            "Storage Starting a VirtualMachineInstance Run a VMI with VirtIO-FS and a datavolume should be successfully started and virtiofs could be accessed",
            "Storage Starting a VirtualMachineInstance VirtIO-FS with an empty PVC should be successfully started and virtiofs could be accessed",
            "Storage Starting a VirtualMachineInstance With a volumeMode block backed ephemeral disk should generate the block backingstore disk within the domain",
            "Storage Starting a VirtualMachineInstance With a volumeMode block backed ephemeral disk should generate the pod with the volumeDevice",
            "Storage Starting a VirtualMachineInstance with error disk should pause VMI on IO error",
            "ImageUpload Create upload volume with force-bind flag Should succeed DataVolume",
            "ImageUpload Create upload volume with force-bind flag Should succeed PVC",
            "With a more complicated VM should restore vm with hot plug disks",
            "With more complicated VM VM should contain snapshot status for all volumes",
            "With more complicated VM should error if VolumeSnapshot deleted",
            "With more complicated VM should not error if VolumeSnapshot has error",
            "With more complicated VM should successfully recreate status",
            "With online vm snapshot should succeed online snapshot with hot plug disk"
          ]
        },
        "Timeout": "4h0m0s",
        "CronHour": "3",
        "CronMinute": "15"
      },
      {
        "Name": "network",
        "Focus": {
          "Tests": [
            "[sig-network]"
          ]
        },
        "Skip": {
          "Quarantine": true,
          "TestIds": [
            1542,
            1545,
            1546,
            1780
          ],
          "Tests": [
            "Macvtap VMI migration should be successful when the VMI MAC address is defined in its spec",
            "Macvtap VMI migration with live traffic should keep connectivity after a migration",
            "Macvtap a virtual machine with one macvtap interface, with a custom MAC address and another virtual machine connected to the same network can communicate with the virtual machine in the same network",
            "Macvtap a virtual machine with one macvtap interface, with a custom MAC address should have the specified MAC address reported back via the API",
            "Subdomain with a headless service given VMI should have the expected FQDN with Bridge binding and subdomain",
            "Subdomain with a headless service given VMI should have the expected FQDN with Masquerade binding and subdomain",
            "VirtualMachineInstance using different types of interfaces. Security Should allow outbound communication from VM under test - only if original MAC address is unchanged",
            "Creating a VirtualMachineInstance when virt-handler is responsive VMIs with Bridge Networking should work with Duplicate Address Detection (DAD)",
            "Starting a VirtualMachine with a DataVolume using Alpine http import a DataVolume with preallocation shouldn't have discard=unmap",
            "Networking VirtualMachineInstance with masquerade binding mechanism when performing migration [Conformance] preserves connectivity IPv4",
            "Networking VirtualMachineInstance with masquerade binding mechanism when performing migration [Conformance] preserves connectivity IPv4 with explicit ports used by live migration"
          ]
        },
        "Timeout": "4h0m0s",
        "CronHour": "4",
        "CronMinute": "30"
      }
    ],
    "ProwJobTimeout": "8h0m0s"
  }
]
