build_root:
  image_stream_tag:
    name: release
    namespace: openshift
    tag: golang-1.18
releases:
  latest:
    release:
      channel: stable
      version: "4.11"
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: plnsvc-ckcp-test
  cluster_claim:
    architecture: amd64
    cloud: aws
    owner: openshift-ci
    product: ocp
    timeout: 1h0m0s
    version: "4.11"
  steps:
    test:
    - as: create-podman-container
      cli: latest
      commands: |
        oc -n openshift-config  get secret/pull-secret -o yaml | sed 's/openshift-config/default/' | sed 's/\.dockerconfigjson/auth.json/' | grep -v type: | oc apply -f -
        oc -n default apply -f - <<EOF
        apiVersion: v1
        kind: Pod
        metadata:
          name: podman
        spec:
          containers:
          - name: podman
            image: registry.redhat.io/rhel8/podman:latest
            command:
            - /usr/sbin/init
            securityContext:
              privileged: true
            volumeMounts:
            - name: pull-secret
              mountPath: "/run/user/0/containers/"
              readOnly: true
          volumes:
          - name: pull-secret
            secret:
              secretName: pull-secret
        EOF
        oc -n default wait pod/podman --for=condition=Ready --timeout=90s
        oc -n default describe pod/podman
      from: src
      resources:
        requests:
          cpu: 300m
          memory: 500Mi
    - as: install-softwares-to-podman-container
      cli: latest
      commands: |
        oc -n default exec pod/podman -- sh -c "yum install -y python3-pip xz wget git make jq gcc && yum clean all"
        oc -n default exec pod/podman -- sh -c "wget -c https://go.dev/dl/go1.19.1.linux-amd64.tar.gz && tar -C /usr/local -xzf go1.19.1.linux-amd64.tar.gz"
        oc -n default exec pod/podman -- sh -c "curl --location -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.4.7/argocd-linux-amd64 && chmod +x /usr/local/bin/argocd && argocd version --client"
        oc -n default exec pod/podman -- sh -c "KUBECTL_VERSION=1.24.3 && curl -LO https://storage.googleapis.com/kubernetes-release/release/v\$KUBECTL_VERSION/bin/linux/amd64/kubectl && chmod +x ./kubectl && mv ./kubectl /usr/local/bin && kubectl version --client=true"
        oc -n default exec pod/podman -- sh -c "wget https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64 -O /usr/local/bin/yq && chmod +x /usr/local/bin/yq && yq --version"
      from: src
      resources:
        requests:
          cpu: 300m
          memory: 500Mi
    - as: ckcp-setup
      cli: latest
      commands: |
        cat <<'EOF' > ckcp_setup.sh
        #!/usr/bin/env bash
        set -o errexit
        set -o pipefail

        export PATH=/usr/local/go/bin:$PATH
        export PATH=$(go env GOPATH)/bin:$PATH
        export ALLOW_ROOTLESS=true
        HOME_DIR="$(pwd)"
        echo "Start building kcp plugin ..."
        KCP_TAG="$(yq '.images[] | select(.name == "kcp") | .newTag' "ckcp/openshift/overlays/dev/kustomization.yaml")"
        echo "kcp tag:" $KCP_TAG
        git clone https://github.com/kcp-dev/kcp.git
        cd $HOME_DIR/kcp
        git checkout tags/"${KCP_TAG}" -b "${KCP_TAG}"
        make install
        kubectl-kcp --version
        echo "\n\nStart ckcp setup ..."
        cd $HOME_DIR/ckcp && ./openshift_dev_setup.sh -d
        EOF

        chmod +x ckcp_setup.sh
        echo "Copy all files, including pipeline-service abd ckcp_setup.sh, to podman container"
        oc cp ./ default/podman:/
        echo "Copy kubeconfig file to podman container"
        oc cp "${KUBECONFIG}" default/podman:/kubeconfig
        echo "Start to set up ckcp"
        oc -n default exec pod/podman -- sh -c "export KUBECONFIG=/kubeconfig && /ckcp_setup.sh"
      from: src
      resources:
        requests:
          cpu: 300m
          memory: 800Mi
    workflow: generic-claim
zz_generated_metadata:
  branch: main
  org: openshift-pipelines
  repo: pipeline-service
