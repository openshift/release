base_images:
  ci_rosa-aws-cli_latest:
    name: rosa-aws-cli
    namespace: ci
    tag: latest
  ci_tests-private-base_latest:
    name: tests-private-base
    namespace: ci
    tag: latest
  ci_tests-private-baseui_latest:
    name: tests-private-baseui
    namespace: ci
    tag: latest
  cli:
    name: 4.19-priv
    namespace: ocp-private
    tag: cli
  netobserv_network-observability-cli_ci:
    name: network-observability-cli
    namespace: netobserv
    tag: ci
  ocp_tools:
    name: 4.19-priv
    namespace: ocp-private
    tag: tools
  upi-installer:
    name: 4.19-priv
    namespace: ocp-private
    tag: upi-installer
binary_build_commands: make go-mod-tidy;make all
build_root:
  image_stream_tag:
    name: builder-priv
    namespace: ocp-private
    tag: rhel-9-golang-1.23-openshift-4.19
canonical_go_repository: github.com/openshift/openshift-tests-private
images:
- dockerfile_literal: |
    FROM registry.ci.openshift.org/netobserv/network-observability-cli:ci as netobservcli

    FROM registry.ci.openshift.org/ocp/4.19:tools
    ENV ART_DNF_WRAPPER_POLICY=append
    COPY --from=netobservcli /oc-netobserv /usr/bin/
    RUN set -x && \
        sh -c 'echo -e "[google-cloud-sdk]\nname=Google Cloud SDK\nbaseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg\n       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg" > /etc/yum.repos.d/google-cloud-sdk.repo' && \
        sh -c 'echo -e "[azure-cli]\nname=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" >/etc/yum.repos.d/azure-cli.repo' && \
        PACKAGES="azure-cli google-cloud-sdk git gzip zip util-linux openssh-clients httpd-tools skopeo java-11-openjdk-headless python3-pip" && \
        yum config-manager --disable ubi-9-appstream ubi-9-baseos ubi-9-codeready-builder && \
        yum update -y && \
        yum install --setopt=tsflags=nodocs -y $PACKAGES && yum clean all && rm -rf /var/cache/yum/* && \
        git config --system user.name test-private && \
        git config --system user.email test-private@test.com && \
        chmod g+w /etc/passwd && \
        rm -rf /root/.config/gcloud
    RUN yum remove python3-requests -y && pip3 uninstall PyYAML -y && pip3 install --upgrade setuptools pip && pip3 install dotmap minio pyyaml requests python-openstackclient && \
        sh -c 'echo -e "[rhel9.2-baseos]\nname=rhel9.2-baseos\nbaseurl=http://download.eng.pek2.redhat.com/rhel-9/rel-eng/RHEL-9/latest-RHEL-9.2/compose/BaseOS/x86_64/os/\nenabled=0\ngpgcheck=1" >/etc/yum.repos.d/rhel9.2-baseos.repo' && \
        yum -y --enablerepo=rhel9.2-baseos install sos
    RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
        unzip -q awscliv2.zip && \
        ./aws/install -b /bin && \
        rm -rf ./aws awscliv2.zip
    RUN set -x && export KREW_ROOT="/usr/local/krew" && cd "$(mktemp -d)" && \
        OS="$(uname | tr '[:upper:]' '[:lower:]')" && \
        ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" && \
        KREW="krew-${OS}_${ARCH}" && \
        curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" && \
        tar zxvf "${KREW}.tar.gz" && \
        ./"${KREW}" install krew && chmod -R 755 /usr/local/krew && cd / && export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH" && which kubectl-krew && set +x
  from: ocp_tools
  inputs:
    netobserv_network-observability-cli_ci:
      as:
      - registry.ci.openshift.org/netobserv/network-observability-cli:ci
  to: tests-private-base
- dockerfile_literal: |
    FROM this-is-ignored
    ARG YQ_VERSION="v4.30.8"
    ENV ART_DNF_WRAPPER_POLICY=append
    RUN set -x && \
        curl --silent --location https://rpm.nodesource.com/setup_lts.x | bash - && \
        curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo && \
        PACKAGES="openssh-clients httpd-tools nodejs yarn xorg-x11-server-Xvfb gtk2-devel gtk3-devel libnotify-devel nss libXScrnSaver alsa-lib" && \
        yum install --setopt=tsflags=nodocs -y $PACKAGES && \
        declare -A YQ_HASH=([amd64]='6c911103e0dcc54e2ba07e767d2d62bcfc77452b39ebaee45b1c46f062f4fd26' \
                            [arm64]='95092e8b5332890c46689679b5e4360d96873c025ad8bafd961688f28ea434c7') && \
        arch="$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/')" && \
        YQ_URI="https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_${arch}" && \
        curl -sSL "${YQ_URI}" -o /usr/local/bin/yq && \
        echo "${YQ_HASH[$arch]} */usr/local/bin/yq" | sha256sum --strict --status --check && \
        chmod +x /usr/local/bin/yq && \
        yum clean all && rm -rf /var/cache/yum/*
  from: root
  to: tests-private-baseui
- dockerfile_literal: |
    FROM bin as builder
    FROM registry.ci.openshift.org/ci/rosa-aws-cli:latest as rosacli

    FROM registry.ci.openshift.org/ci/tests-private-base:latest
    COPY --from=builder /go/src/github.com/openshift/openshift-tests-private/bin/extended-platform-tests /usr/bin/
    COPY --from=builder /go/src/github.com/openshift/openshift-tests-private/pipeline/handleresult.py /usr/bin/
    COPY --from=rosacli /usr/bin/rosa /usr/bin/

    RUN MIRRORURL=https://mirror2.openshift.com/pub/openshift-v4 && CLIENTURL=${MIRRORURL}/x86_64/clients/ocp/candidate && \
        curl -s -k -L ${MIRRORURL}/x86_64/clients/ocp/ -o ocp.html && curl -s -k -L ${MIRRORURL}/x86_64/clients/ocp-dev-preview/ -o pre.html && \
        ecver=$(grep -E "<a href=\"candidate-4\.18" pre.html |cut -d"\"" -f2|cut -d"/" -f1|sort -V|tail -1) && echo "V${ecver}V" && \
        if [ "V${ecver}V" != "VV"  ]; then CLIENTURL=${MIRRORURL}/x86_64/clients/ocp-dev-preview/${ecver}; fi && \
        rcgaver=$(grep -E "<a href=\"4\.18" ocp.html |cut -d"\"" -f2|cut -d"/" -f1|sort -V|tail -1) && echo "V${rcgaver}V" && \
        if [ "V${rcgaver}V" != "VV"  ]; then CLIENTURL=${MIRRORURL}/x86_64/clients/ocp/${rcgaver}; fi && \
        curl -s -k -L ${CLIENTURL}/openshift-client-linux-amd64-rhel9.tar.gz -o openshift-client-linux.tar.gz && \
        curl -s -k -L ${CLIENTURL}/opm-linux-rhel9.tar.gz -o opm-linux.tar.gz  && \
        curl -s -k -L ${CLIENTURL}/oc-mirror.rhel9.tar.gz -o oc-mirror.tar.gz && \
        tar -C /usr/bin -xzvf openshift-client-linux.tar.gz && rm -fr openshift-client-linux.tar.gz && \
        tar -C /usr/bin -xzvf opm-linux.tar.gz && mv /usr/bin/opm-rhel9 /usr/bin/opm && rm -fr opm-linux.tar.gz && \
        opm version && \
        tar -C /usr/bin/ -xzvf oc-mirror.tar.gz && chmod +x /usr/bin/oc-mirror && rm -f oc-mirror.tar.gz && \
        SDKURL=${MIRRORURL}/x86_64/clients/operator-sdk/pre-release && \
        curl -s -k -L ${MIRRORURL}/x86_64/clients/operator-sdk/ -o sdk.html && \
        optsdkver=$(grep -E "<a href=\"4\.18" sdk.html |cut -d"\"" -f2|cut -d"/" -f1|sort -V|tail -1) && echo ${optsdkver} && \
        if [ "V${optsdkver}V" != "VV"  ]; then SDKURL=${MIRRORURL}/x86_64/clients/operator-sdk/${optsdkver}; fi && \
        curl -s -k -L ${SDKURL}/operator-sdk-linux-x86_64.tar.gz -o opt-sdk.tar.gz && \
        tar -C ./ -xzvf opt-sdk.tar.gz && mv ./x86_64/operator-sdk /usr/bin && rm -fr opt-sdk.tar.gz ./x86_64 && \
        opm version && oc-mirror --help && operator-sdk version && \
        echo "try to install binary used by the cases" && oc version --client && \
        oc image extract quay.io/hypershift/hypershift-operator:latest --file=/usr/bin/hypershift && mv hypershift /usr/bin/ && chmod 755 /usr/bin/hypershift && \
        oc image extract quay.io/openshifttest/oc-compliance:latest --file /tmp/oc-compliance && mv oc-compliance /usr/bin/ && chmod 755 /usr/bin/oc-compliance && \
        rosa -h && oc-compliance -h && \
        oc image extract quay.io/openshifttest/openshift4-tools:v2 --file=/tmp/OpenShift4-tools.tar && tar -C /opt -xf OpenShift4-tools.tar && rm -fr OpenShift4-tools.tar && \
        curl -s -L https://github.com/vmware/govmomi/releases/latest/download/govc_Linux_x86_64.tar.gz -o govc_Linux_x86_64.tar.gz && tar -C /usr/bin/ -xvf govc_Linux_x86_64.tar.gz govc && rm -f govc_Linux_x86_64.tar.gz && \
        rm -rf /usr/bin/oc /usr/bin/kubectl
  from: ci_tests-private-base_latest
  inputs:
    bin:
      as:
      - bin
    ci_rosa-aws-cli_latest:
      as:
      - registry.ci.openshift.org/ci/rosa-aws-cli:latest
  to: tests-private
- dockerfile_literal: |
    FROM src AS builder
    FROM this-is-ignored-and-not-used
    RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm && \
        yum install -y ./google-chrome-stable_current_*.rpm
    WORKDIR /go/src/github.com/openshift/openshift-tests-private
    COPY --from=builder /go/src/github.com/openshift/openshift-tests-private /go/src/github.com/openshift/openshift-tests-private
  from: ci_tests-private-baseui_latest
  inputs:
    src:
      as:
      - src
  to: tests-private-ui
- dockerfile_literal: |
    FROM bin AS builder
    FROM this-is-ignored-and-not-used
    WORKDIR /go/src/github.com/openshift/openshift-tests-private
    COPY --from=builder /go/src/github.com/openshift/openshift-tests-private /go/src/github.com/openshift/openshift-tests-private
    RUN chmod g+w /go/src/github.com/openshift/openshift-tests-private && \
        rm -rf /usr/bin/oc /usr/bin/kubectl
  from: ci_tests-private-base_latest
  inputs:
    bin:
      as:
      - bin
  to: tests-private-newpr
promotion:
  to:
  - excluded_images:
    - tests-private-base
    - tests-private-baseui
    - tests-private
    - tests-private-ui
    - tests-private-newpr
    name: 4.19-priv
    namespace: ocp-private
releases:
  arm64-latest:
    candidate:
      architecture: arm64
      product: ocp
      stream: nightly
      version: "4.19"
  latest:
    candidate:
      product: ocp
      stream: nightly
      version: "4.19"
resources:
  '*':
    limits:
      memory: 8Gi
    requests:
      cpu: "1"
      memory: 4Gi
  bin:
    requests:
      cpu: "2"
      memory: 8Gi
  e2e-aws:
    requests:
      cpu: "4"
      memory: 4Gi
test_binary_build_commands: make test
tests:
- as: title-check
  commands: make name-check
  container:
    from: src
- as: bindata-check
  commands: |
    make update
    ret=0 && git diff --quiet test/extended/testdata/bindata.go || ret=$?
    if [ $ret -ne 0 ]; then
        echo "bindata is not correct updated by your PR, please refer to the following and re-execute \"make update\" on your terminal and then update PR"
        echo "---"
        git diff test/extended/testdata/bindata.go || true
        echo "---"
        exit 1
    fi
  container:
    from: src
- as: code-check
  commands: |
    unset GOFLAGS
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.54.2 2> /dev/null
    which golangci-lint
    make check-code
  container:
    from: src
- as: e2e-aws
  optional: true
  skip_if_only_changed: (frontend/)|(images/)|(pipeline/)|(test/extended/(disaster_recovery|hypershift|kata|psap/hypernto|winc|testdata|cluster_operator/hive|ocm_terraform|rosacli|util)/)|include\.go$
  steps:
    cluster_profile: aws
    test:
    - ref: enable-qe-catalogsource
    - as: pr-test
      cli: latest
      commands: |
        oc version
        export HOME="/tmp/home"
        mkdir -p "${HOME}"

        curl -s -k https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-318.0.0-linux-x86_64.tar.gz -o gcsl.tar.gz && tar -C ${HOME} -xzf gcsl.tar.gz && rm -fr gcsl.tar.gz
        mkdir -p ${HOME}/gcloudconfig && export CLOUDSDK_CONFIG=${HOME}/gcloudconfig && export PATH=$PATH:${HOME}/google-cloud-sdk/bin

        export MIRROR2URL="https://mirror2.openshift.com/pub/openshift-v4"
        curl -s -L https://github.com/vmware/govmomi/releases/latest/download/govc_Linux_x86_64.tar.gz -o glx.tar.gz && tar -C ${HOME} -xvf glx.tar.gz govc && rm -f glx.tar.gz

        CLIENTURL=${MIRROR2URL}/x86_64/clients/ocp/candidate
        curl -s -k -L ${MIRROR2URL}/x86_64/clients/ocp/ -o ocp.html && curl -s -k -L ${MIRROR2URL}/x86_64/clients/ocp-dev-preview/ -o pre.html
        ecver=$(grep -E "<a href=\"candidate-4\.18" pre.html |cut -d"\"" -f2|cut -d"/" -f1|sort -V|tail -1) && echo "V${ecver}V"
        if [ "V${ecver}V" != "VV"  ]; then CLIENTURL=${MIRROR2URL}/x86_64/clients/ocp-dev-preview/${ecver}; fi
        rcgaver=$(grep -E "<a href=\"4\.18" ocp.html |cut -d"\"" -f2|cut -d"/" -f1|sort -V|tail -1) && echo "V${rcgaver}V"
        if [ "V${rcgaver}V" != "VV"  ]; then CLIENTURL=${MIRROR2URL}/x86_64/clients/ocp/${rcgaver}; fi
        curl -s -k -L ${CLIENTURL}/opm-linux-rhel9.tar.gz -o opm.tar.gz && tar -C ${HOME} -xzvf opm.tar.gz && mv ${HOME}/opm-rhel9 ${HOME}/opm && rm -fr opm.tar.gz
        curl -s -k -L ${CLIENTURL}/oc-mirror.rhel9.tar.gz -o om.tar.gz && tar -C ${HOME} -xzvf om.tar.gz && chmod +x ${HOME}/oc-mirror && rm -f om.tar.gz

        SDKURL=${MIRROR2URL}/x86_64/clients/operator-sdk/pre-release
        curl -s -k -L ${MIRROR2URL}/x86_64/clients/operator-sdk/ -o sdk.html
        optsdkver=$(grep -E "<a href=\"4\.18" sdk.html |cut -d"\"" -f2|cut -d"/" -f1|sort -V|tail -1) && echo ${optsdkver}
        if [ "V${optsdkver}V" != "VV"  ]; then SDKURL=${MIRROR2URL}/x86_64/clients/operator-sdk/${optsdkver}; fi
        curl -s -k -L ${SDKURL}/operator-sdk-linux-x86_64.tar.gz -o opt-sdk.tar.gz
        tar -C ${HOME} -xzvf opt-sdk.tar.gz && mv ${HOME}/x86_64/operator-sdk ${HOME} && rm -fr opt-sdk.tar.gz ${HOME}/x86_64

        oc image extract quay.io/hypershift/hypershift-operator:latest --file=/usr/bin/hypershift && mv hypershift "${HOME}" && chmod 755 "${HOME}"/hypershift
        oc image extract quay.io/openshifttest/openshift4-tools:v2 --file=/tmp/OpenShift4-tools.tar && tar -C "${HOME}" -xf OpenShift4-tools.tar && rm -fr OpenShift4-tools.tar

        export PATH=$PATH:$HOME:/usr/local/krew/bin:${HOME}/OpenShift4-tools
        opm version

        if ! which kubectl; then
          ln -s "$(which oc)" ${HOME}/kubectl
        fi

        python3 ./hack/pr.py
      from: tests-private-newpr
      resources:
        limits:
          memory: 8Gi
        requests:
          cpu: "1"
          memory: 1Gi
    workflow: ipi-aws
- as: e2e-console
  optional: true
  run_if_changed: frontend/tests/.*.cy.ts
  steps:
    cluster_profile: gcp-openshift-gce-devel-ci-2
    test:
    - ref: enable-qe-catalogsource
    - as: console-test
      cli: latest
      commands: python3 ./frontend/hack/console_pr.py
      from: tests-private-ui
      resources:
        requests:
          cpu: "2"
          memory: 4Gi
      timeout: 2h0m0s
    workflow: ipi-gcp
- as: debug-disasterrecovery-aws-ipi
  optional: true
  run_if_changed: test/extended/disaster_recovery/
  steps:
    cluster_profile: aws-qe
    env:
      BASE_DOMAIN: qe.devcluster.openshift.com
      FORCE_SUCCESS_EXIT: "no"
    test:
    - chain: openshift-e2e-test-qe-disasterrecovery-sanity
    workflow: cucushift-installer-rehearse-aws-ipi-private
- as: debug-disasterrecovery-baremetal-upi
  optional: true
  run_if_changed: test/extended/disaster_recovery/
  steps:
    cluster_profile: equinix-ocp-metal-qe
    dependencies:
      OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE: release:arm64-latest
    env:
      AUX_HOST: openshift-qe-metal-ci.arm.eng.rdu2.redhat.com
      FORCE_SUCCESS_EXIT: "no"
      architecture: arm64
    test:
    - chain: openshift-e2e-test-qe-disasterrecovery-sanity
    workflow: baremetal-lab-upi
- as: debug-winc-aws-ipi
  optional: true
  run_if_changed: test/extended/winc/
  steps:
    cluster_profile: aws-qe
    env:
      BASE_DOMAIN: qe.devcluster.openshift.com
      FORCE_SUCCESS_EXIT: "no"
      TEST_FILTERS: ~ChkUpgrade&;~ConnectedOnly&;Smokerun&
      TEST_SCENARIOS: Windows_Containers
      TEST_TIMEOUT: "50"
    test:
    - ref: openshift-extended-test
    workflow: cucushift-installer-rehearse-aws-ipi-ovn-winc
- as: debug-winc-gcp-ipi
  optional: true
  run_if_changed: test/extended/winc/
  steps:
    cluster_profile: gcp-qe
    env:
      FORCE_SUCCESS_EXIT: "no"
      TEST_FILTERS: ~ChkUpgrade&;~ConnectedOnly&;Smokerun&
      TEST_SCENARIOS: Windows_Containers
      TEST_TIMEOUT: "50"
    test:
    - ref: openshift-extended-test
    workflow: cucushift-installer-rehearse-gcp-ipi-ovn-winc
- as: debug-winc-azure-ipi
  optional: true
  run_if_changed: test/extended/winc/
  steps:
    cluster_profile: azure-qe
    env:
      BASE_DOMAIN: qe.azure.devcluster.openshift.com
      FORCE_SUCCESS_EXIT: "no"
      TEST_FILTERS: ~ChkUpgrade&;~ConnectedOnly&;Smokerun&
      TEST_SCENARIOS: Windows_Containers
      TEST_TIMEOUT: "50"
    test:
    - ref: openshift-extended-test
    workflow: cucushift-installer-rehearse-azure-ipi-ovn-winc
- as: debug-winc-vsphere-ipi
  optional: true
  run_if_changed: test/extended/winc/
  steps:
    cluster_profile: vsphere-connected-2
    env:
      FORCE_SUCCESS_EXIT: "no"
      TEST_FILTERS: ~ChkUpgrade&;~ConnectedOnly&;Smokerun&
      TEST_SCENARIOS: Windows_Containers
      TEST_TIMEOUT: "50"
    test:
    - ref: openshift-extended-test
    workflow: cucushift-installer-rehearse-vsphere-ipi-ovn-winc
zz_generated_metadata:
  branch: master
  org: openshift-priv
  repo: openshift-tests-private
