base_images:
  cli:
    name: 4.11-priv
    namespace: ocp-private
    tag: cli
  ocp_builder_rhel-8-golang-1.18-openshift-4.11:
    name: builder
    namespace: ocp
    tag: rhel-8-golang-1.18-openshift-4.11
  tools:
    name: 4.11-priv
    namespace: ocp-private
    tag: tools
  upi-installer:
    name: 4.11-priv
    namespace: ocp-private
    tag: upi-installer
binary_build_commands: make go-mod-tidy;make all
build_root:
  image_stream_tag:
    name: builder-priv
    namespace: ocp-private
    tag: rhel-8-golang-1.18-openshift-4.11
canonical_go_repository: github.com/openshift/openshift-tests-private
images:
- dockerfile_path: images/Dockerfile
  from: tools
  inputs:
    ocp_builder_rhel-8-golang-1.18-openshift-4.11:
      as:
      - registry.ci.openshift.org/ocp/builder:rhel-8-golang-1.18-openshift-4.11
  to: tests-private
- dockerfile_literal: |
    FROM src
    RUN curl --silent --location https://rpm.nodesource.com/setup_lts.x | bash - && \
        curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo && \
        PACKAGES="openssh-clients httpd-tools nodejs yarn xorg-x11-server-Xvfb gtk2-devel gtk3-devel libnotify-devel GConf2 nss libXScrnSaver alsa-lib" && \
        yum install --setopt=tsflags=nodocs -y $PACKAGES && \
        yum clean all && rm -rf /var/cache/yum/*
  from: src
  to: tests-private-ui
- dockerfile_literal: |
    FROM src
    RUN unset GOFLAGS && \
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.50.1 && \
        which golangci-lint
  from: src
  to: tests-private-cck
- dockerfile_literal: |
    FROM bin
    RUN sh -c 'echo -e "[azure-cli]\nname=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" >/etc/yum.repos.d/azure-cli.repo' && \
        PACKAGES="azure-cli openssh-clients httpd-tools skopeo java-11-openjdk-headless" && \
        yum update -y && \
        yum install --setopt=tsflags=nodocs -y $PACKAGES && yum clean all && rm -rf /var/cache/yum/* && \
        chmod g+w /etc/passwd
    RUN pip3 install --upgrade setuptools pip && pip3 install dotmap minio pyyaml==5.4.1 requests python-openstackclient
    RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip -q awscliv2.zip && ./aws/install -b /bin && rm -rf ./aws awscliv2.zip
  from: bin
  to: tests-private-pr
promotion:
  excluded_images:
  - tests-private
  - tests-private-ui
  - tests-private-pr
  - tests-private-cck
  name: 4.11-priv
  namespace: ocp-private
releases:
  latest:
    candidate:
      product: ocp
      stream: nightly
      version: "4.11"
resources:
  '*':
    limits:
      memory: 8Gi
    requests:
      cpu: "1"
      memory: 4Gi
  bin:
    requests:
      cpu: "2"
      memory: 8Gi
  e2e-aws:
    requests:
      cpu: "4"
      memory: 4Gi
test_binary_build_commands: make test
tests:
- as: title-check
  commands: make name-check
  container:
    from: src
- as: code-check
  commands: make check-code
  container:
    from: tests-private-cck
  optional: true
- as: e2e-aws
  optional: true
  skip_if_only_changed: (frontend/)|(test/extended/(disaster_recovery|hypershift|kata|psap/hypernto|winc|testdata)/)
  steps:
    cluster_profile: aws
    test:
    - ref: enable-qe-catalogsource
    - as: pr-test
      cli: latest
      commands: |
        oc version
        export HOME="/tmp/home"
        mkdir -p "${HOME}"

        curl -s -k https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-256.0.0-linux-x86_64.tar.gz -o gcsl.tar.gz && tar -C ${HOME} -xzf gcsl.tar.gz && rm -fr gcsl.tar.gz
        mkdir -p ${HOME}/gcloudconfig && export CLOUDSDK_CONFIG=${HOME}/gcloudconfig && export PATH=$PATH:${HOME}/google-cloud-sdk/bin

        export MIRROR2URL="https://mirror2.openshift.com/pub/openshift-v4"
        curl -s -L https://github.com/vmware/govmomi/releases/latest/download/govc_Linux_x86_64.tar.gz -o glx.tar.gz && tar -C ${HOME} -xvf glx.tar.gz govc && rm -f glx.tar.gz
        curl -s -k -L ${MIRROR2URL}/x86_64/clients/ocp/latest-4.11/opm-linux.tar.gz -o opm.tar.gz && tar -C ${HOME} -xzvf opm.tar.gz && rm -fr opm.tar.gz

        curl -s -k -L ${MIRROR2URL}/x86_64/clients/ocp/ -o ocp.html && rcgaver=$(grep -E "<a href=\"4\.11" ocp.html |cut -d"\"" -f2|cut -d"/" -f1|sort -V|tail -1)
        echo "V${rcgaver}V" && CLIENTURL=${MIRROR2URL}/x86_64/clients/ocp/${rcgaver}
        curl -s -k -L ${CLIENTURL}/oc-mirror.tar.gz -o om.tar.gz && tar -C ${HOME} -xzvf om.tar.gz && chmod +x ${HOME}/oc-mirror && rm -f om.tar.gz

        curl -s -k -L ${MIRROR2URL}/x86_64/clients/operator-sdk/ -o sdk.html
        optsdkver=$(grep -E "<a href=\"4\.11" sdk.html |cut -d"\"" -f2|cut -d"/" -f1|sort -V|tail -1) && echo ${optsdkver}
        curl -s -k -L ${MIRROR2URL}/x86_64/clients/operator-sdk/${optsdkver}/operator-sdk-linux-x86_64.tar.gz -o opt-sdk.tar.gz
        tar -C ${HOME} -xzvf opt-sdk.tar.gz && mv ${HOME}/x86_64/operator-sdk ${HOME} && rm -fr opt-sdk.tar.gz ${HOME}/x86_64

        oc image extract quay.io/openshifttest/hypershift-client:latest --file=/hypershift && mv hypershift "${HOME}" && chmod 755 "${HOME}"/hypershift
        oc image extract quay.io/openshifttest/openshift4-tools:v1 --file=/tmp/OpenShift4-tools.tar && tar -C "${HOME}" -xf OpenShift4-tools.tar && rm -fr OpenShift4-tools.tar

        export PATH=$PATH:$HOME:${HOME}/OpenShift4-tools

        if ! which kubectl; then
          ln -s "$(which oc)" ${HOME}/kubectl
        fi

        make pr-test
      from: tests-private-pr
      resources:
        limits:
          memory: 6Gi
        requests:
          cpu: "1"
          memory: 1Gi
    workflow: ipi-aws
- as: e2e-console
  optional: true
  run_if_changed: frontend/
  steps:
    cluster_profile: gcp-openshift-gce-devel-ci-2
    test:
    - ref: enable-qe-catalogsource
    - as: console-test
      cli: latest
      commands: python3 ./frontend/hack/console_pr.py
      from: tests-private-ui
      resources:
        requests:
          cpu: "2"
          memory: 4Gi
      timeout: 2h0m0s
    workflow: ipi-gcp
- as: debug-disasterrecovery-aws-ipi
  optional: true
  run_if_changed: test/extended/disaster_recovery/
  steps:
    cluster_profile: aws-qe
    env:
      BASE_DOMAIN: qe.devcluster.openshift.com
      FORCE_SUCCESS_EXIT: "no"
      TEST_FILTERS: ~ChkUpgrade&;~ConnectedOnly&;~MicroShiftOnly&;DEBUGPHASE&
      TEST_SCENARIOS: DR_Testing
      TEST_TIMEOUT: "50"
    test:
    - ref: openshift-extended-test
    workflow: cucushift-installer-rehearse-aws-ipi-private
- as: debug-winc-aws-ipi
  optional: true
  run_if_changed: test/extended/winc/
  steps:
    cluster_profile: aws-qe
    env:
      BASE_DOMAIN: qe.devcluster.openshift.com
      FORCE_SUCCESS_EXIT: "no"
      TEST_FILTERS: ~ChkUpgrade&;~ConnectedOnly&;Smokerun&
      TEST_SCENARIOS: Windows_Containers
      TEST_TIMEOUT: "50"
    test:
    - ref: openshift-extended-test
    workflow: cucushift-installer-rehearse-aws-ipi-ovn-winc
zz_generated_metadata:
  branch: release-4.11
  org: openshift-priv
  repo: openshift-tests-private
