base_images:
  base:
    name: "4.7"
    namespace: ocp
    tag: base
  qemu-builder:
    name: ubuntu
    namespace: ci
    tag: "20.04"
binary_build_commands: |
  source ci/lib.sh
  destdir="$(pwd)/_out/build_install"
  mkdir -p "$destdir"
  clone_tests_repo
  pushd "${tests_repo_dir}"
  # This builds Kata Containers and install on $destdir.
  # Only QEMU is not built.
  .ci/openshift-ci/build_install.sh "$destdir"

  # This generates the Dockerfile used later in the pipeline to build QEMU.
  .ci/openshift-ci/qemu-build-pre.sh
  popd
build_root:
  image_stream_tag:
    name: release
    namespace: openshift
    tag: golang-1.13
images:
- context_dir: tools/packaging
  dockerfile_path: ./static-build/qemu/Dockerfile.ci
  from: qemu-builder
  inputs:
    bin:
      paths:
      - destination_dir: ./static-build/qemu
        source_path: /go/src/github.com/kata-containers/kata-containers/tools/packaging/static-build/qemu/Dockerfile.ci
  to: kata-qemu
- context_dir: .
  dockerfile_path: ./Dockerfile.installer
  from: base
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/src/github.com/kata-containers/kata-containers/_out
      - destination_dir: .
        source_path: /go/src/github.com/kata-containers/tests/.ci/openshift-ci/images/Dockerfile.installer
      - destination_dir: .
        source_path: /go/src/github.com/kata-containers/tests/.ci/openshift-ci/images/entrypoint.sh
    kata-qemu:
      paths:
      - destination_dir: .
        source_path: /tmp/qemu-static/kata-static-qemu.tar.gz
  to: kata-installer
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tag_specification:
  name: "4.7"
  namespace: ocp
tests:
- as: e2e-tests
  cron: 2 7 * * *
  steps:
    cluster_profile: azure4
    pre:
    - chain: ipi-azure-pre
    - as: kata-containers-e2e-pre
      cli: latest
      commands: |
        # oc is made available to this script via cli configuration, but
        # kubectl is not. Since kubectl is used by kata-webhook scripts,
        # thus it is created a symlink to oc.
        pushd "$CLI_DIR"
        if [ ! -f kubectl ]; then
            ln -s oc kubectl
        fi
        popd

        # TODO: The ipi-azure test step does not export AZURE_AUTH_LOCATION
        # which causes openshift-tests to fail.
        export AZURE_AUTH_LOCATION=${SHARED_DIR}/metadata.json

        KATA_WORKDIR=/go/src/github.com/kata-containers/tests
        cd $KATA_WORKDIR
        # Install Kata Containers and run a smoke test.
        .ci/openshift-ci/test.sh

        # In the following block it builds and deploy the kata-webhook so that the
        # tests ran on next step of the workflow will use the kata runtime.
        pushd "${KATA_WORKDIR}/kata-webhook"
        echo "INFO: Build the kata-webhook"
        ./create-certs.sh
        echo "INFO: Deploy the kata-webhook"
        oc apply -f deploy/
        # Wait it to become available.
        oc wait deployment/pod-annotate-webhook --for condition=Available --timeout 60s
        # Check the web-hook is working correctly.
        oc apply -f https://raw.githubusercontent.com/openshift/origin/master/examples/hello-openshift/hello-pod.json
        class_name=$(oc get -o jsonpath='{.spec.runtimeClassName}' pod/hello-openshift)
        oc delete pod/hello-openshift
        if [ "$class_name" != "kata" ]; then
            echo "ERROR: kata-webhook is not working"
            exit 1
        fi
        echo "INFO: kata-webhook is up and working"
        popd
      from: pipeline:bin
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
    workflow: openshift-e2e-azure
zz_generated_metadata:
  branch: main
  org: kata-containers
  repo: kata-containers
