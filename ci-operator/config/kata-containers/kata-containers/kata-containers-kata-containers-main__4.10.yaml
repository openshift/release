base_images:
  base:
    name: "4.10"
    namespace: ocp
    tag: base
  qemu-builder:
    name: ubuntu
    namespace: ci
    tag: "20.04"
binary_build_commands: |
  # The CentOS 8 build root does not have golang package installed so that we
  # use the golang installed by Kata Containers setup script. Here it is
  # ensured the tools are searcheable.
  export GOPATH=/go
  export PATH="${GOPATH}/bin:/usr/local/go/bin/:$PATH"
  source ci/lib.sh
  destdir="$(pwd)/_out/build_install"
  mkdir -p "$destdir"
  clone_tests_repo
  pushd "${tests_repo_dir}"
  # Build and configure akin to OpenShift Sandboxed Containers.
  export SANDBOXED_CONTAINERS_CONF="yes"
  # This builds Kata Containers and install on $destdir.
  # Only QEMU is not built.
  .ci/openshift-ci/build_install.sh "$destdir"

  # This generates the Dockerfile used later in the pipeline to build QEMU.
  .ci/openshift-ci/qemu-build-pre.sh
  popd
build_root:
  project_image:
    dockerfile_path: ci/openshift-ci/images/Dockerfile.buildroot
images:
- context_dir: tools/packaging
  dockerfile_path: ./static-build/qemu/Dockerfile.ci
  from: qemu-builder
  inputs:
    bin:
      paths:
      - destination_dir: ./static-build/qemu
        source_path: /go/src/github.com/kata-containers/kata-containers/tools/packaging/static-build/qemu/Dockerfile.ci
  to: kata-qemu
- context_dir: .
  dockerfile_path: ./Dockerfile.installer
  from: base
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/src/github.com/kata-containers/kata-containers/_out
      - destination_dir: .
        source_path: /go/src/github.com/kata-containers/tests/.ci/openshift-ci/images/Dockerfile.installer
      - destination_dir: .
        source_path: /go/src/github.com/kata-containers/tests/.ci/openshift-ci/images/entrypoint.sh
    kata-qemu:
      paths:
      - destination_dir: .
        source_path: /tmp/qemu-static/kata-static-qemu.tar.gz
  to: kata-installer
releases:
  initial:
    integration:
      name: "4.10"
      namespace: ocp
  latest:
    integration:
      include_built_images: true
      name: "4.10"
      namespace: ocp
resources:
  '*':
    requests:
      cpu: 100m
      memory: 2Gi
tests:
- as: e2e-tests
  cron: 2 7 * * *
  steps:
    allow_best_effort_post_steps: true
    allow_skip_on_success: true
    cluster_profile: azure4
    env:
      TEST_SKIPS: \[sig-api-machinery\]\|\[sig-apps\]\|\[sig-arch\]\|\[sig-auth\]\|\[sig-autoscaling\]\|\[sig-builds\]\|\[sig-cli\]\|\[sig-cluster-lifecycle\]\|\[sig-coreos\]\|\[sig-devex\]\|\[sig-etcd\]\|\[sig-imageregistry\]\|\[sig-installer\]\|\[sig-instrumentation\]\|\[sig-network\]\|\[sig-network-edge\]\|\[sig-operator\]\|\[sig-scheduling\]\|\[sig-storage\]\|\[sig-node\]
        Security Context should support seccomp runtime/default\|\[sig-node\] Variable
        Expansion should allow substituting values in a volume subpath\|\[sig-node\]
        Container Runtime blackbox test on terminated container should report termination
        message\|\[k8s.io\] Probing container should be restarted with a docker exec
        liveness probe with timeout\|\[sig-node\] Probing container should be restarted
        with a failing exec liveness probe that took longer than the timeout\|\[sig-node\]
        Probing container should be restarted with an exec liveness probe with timeout
        \[MinimumKubeletVersion:1.20\]\|\[sig-node\] Pods Extended Pod Container Status
        should never report success for a pending container\|\[sig-node\] Downward
        API should provide host IP as an env var\|\[sig-node\] Downward API should
        provide container's limits.cpu/memory and requests.cpu/memory as env vars\|\[sig-node\]
        Downward API should provide pod name, namespace and IP address as env vars\|\[sig-node\]
        Downward API should provide pod UID as env vars
    pre:
    - chain: ipi-azure-pre
    - as: kata-containers-e2e-pre
      cli: latest
      commands: |
        # oc is made available to this script via cli configuration, but
        # kubectl is not. Since kubectl is used by kata-webhook scripts,
        # thus it is created a symlink to oc.
        pushd "$CLI_DIR"
        if [ ! -f kubectl ]; then
            ln -s oc kubectl
        fi
        popd

        # TODO: The ipi-azure test step does not export AZURE_AUTH_LOCATION
        # which causes openshift-tests to fail.
        export AZURE_AUTH_LOCATION=${SHARED_DIR}/metadata.json

        KATA_WORKDIR=/go/src/github.com/kata-containers/tests
        cd $KATA_WORKDIR

        # The installer is instructed to configure kata containers to use
        # QEMU from the RHCOS extension and host's kernel.
        export KATA_WITH_SYSTEM_QEMU="yes"
        export KATA_WITH_HOST_KERNEL="yes"
        # Install Kata Containers and run a smoke test.
        .ci/openshift-ci/test.sh

        # Deploy the kata-webhook so that the tests ran on next step of the
        # workflow will use the kata runtime.
        .ci/openshift-ci/cluster/deploy_webhook.sh
      dependencies:
      - env: KATA_INSTALLER_IMG
        name: kata-installer
      from: pipeline:bin
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
    workflow: openshift-e2e-azure
zz_generated_metadata:
  branch: main
  org: kata-containers
  repo: kata-containers
  variant: "4.10"
