base_images:
  base:
    name: "4.6"
    namespace: ocp
    tag: base
build_root:
  image_stream_tag:
    name: release
    namespace: openshift
    tag: golang-1.13
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tag_specification:
  name: "4.6"
  namespace: ocp
tests:
- artifact_dir: /tmp/artifacts
  as: e2e
  steps:
    cluster_profile: azure4
    test:
    - as: test
      cli: latest
      commands: |
        set -e

        echo "disabling default catalog source"
        oc patch OperatorHub cluster --type json -p '[{"op": "add", "path": "/spec/disableAllDefaultSources", "value": true}]'

        authfile=/tmp/authfile
        trap 'rm -rf /tmp/authfile*' EXIT SIGINT SIGTERM

        echo "getting authfile from cluster"
        oc get secret/pull-secret -n openshift-config -o json | jq -r '.data.".dockerconfigjson"' | base64 -d > "$authfile"

        echo "injecting credentials for brew image registry into authfile"
        jq -c '.auths + '"$(echo '{"brew.registry.redhat.io": { "auth": "'"$( echo "$BREW_IMAGE_REGISTRY_USERNAME:$(< $BREW_IMAGE_REGISTRY_TOKEN_PATH)" | tr -d '\n' | base64 -i -w 0 )"'" } }')"' | {"auths": .}' "$authfile" > "${authfile}.new"

        echo "updating cluster pull secret from authfile"
        oc set data secret/pull-secret -n openshift-config --from-file=.dockerconfigjson="${authfile}.new"

        echo "creating imageContentSourcePolicy"
        oc create -f - << EOF
        apiVersion: operator.openshift.io/v1alpha1
        kind: ImageContentSourcePolicy
        metadata:
          name: brew-registry
        spec:
          repositoryDigestMirrors:
          - mirrors:
            - brew.registry.redhat.io
            source: registry.redhat.io
          - mirrors:
            - brew.registry.redhat.io
            source: registry.stage.redhat.io
          - mirrors:
            - brew.registry.redhat.io
            source: registry-proxy.engineering.redhat.com
        EOF

        echo "waiting for update to start"
        oc wait mcp --all --for condition=updating --timeout=5m

        echo "waiting for machineconfigpool to get updated"
        return_code=0
        counter=3
        set +e
        for i in $(seq 1 $counter); do
            oc wait mcp --all --for condition=updated --timeout=30m && break
            sleep 5
        done
        set -e

        echo "creating brew catalog source"
        oc create -f - << EOF
        apiVersion: operators.coreos.com/v1alpha1
        kind: CatalogSource
        metadata:
          name: brew-catalog-source
          namespace: openshift-marketplace
        spec:
          sourceType: grpc
          image: brew.registry.redhat.io/rh-osbs/iib:29296
          displayName: Brew Catalog Source
          publisher: grpc
        EOF

        oc wait pods -n "openshift-marketplace" -l olm.catalogSource="brew-catalog-source" --for condition=Ready --timeout=60s

        oc create ns openshift-cnv

        echo "creating subscription"
        oc create -f - << EOF
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          name: kubevirt-hyperconverged
          namespace: openshift-cnv
          labels:
            operators.coreos.com/kubevirt-hyperconverged.openshift-cnv: ''
        spec:
          channel: stable
          installPlanApproval: Automatic
          name: kubevirt-hyperconverged
          source: brew-catalog-source
          sourceNamespace: openshift-marketplace
          startingCSV: kubevirt-hyperconverged-operator.v$CNV_VERSION
        EOF

        echo "creating operator group"
        oc create -f - << EOF
        apiVersion: operators.coreos.com/v1
        kind: OperatorGroup
        metadata:
          name: "openshift-cnv-group"
          namespace: "openshift-cnv"
        spec:
          targetNamespaces:
          - "openshift-cnv"
        EOF

        echo "waiting for operator pods to be created"
        while [ $( oc get pods -n openshift-cnv --no-headers | wc -l ) -lt 5 ]; do
            sleep 5
        done

        echo "waiting for operator pods to be ready"
        counter=3
        for i in $(seq 1 $counter); do
            oc wait pods -n openshift-cnv --all --for condition=Ready --timeout=10m
            sleep 5
        done

        echo "waiting for HyperConverged operator crd to be created"
        while [ $( oc get crd -n openshift-cnv hyperconvergeds.hco.kubevirt.io --no-headers | wc -l ) -eq 0 ]; do
            sleep 5
        done

        echo "creating HyperConverged operator custom resource"
        oc create -f - << EOF
        apiVersion: hco.kubevirt.io/v1beta1
        kind: HyperConverged
        metadata:
          name: kubevirt-hyperconverged
          namespace: openshift-cnv
        spec:
          BareMetalPlatform: true
        EOF

        echo "waiting for HyperConverged operator to be available"
        oc wait -n openshift-cnv HyperConverged kubevirt-hyperconverged --for condition=Available --timeout=20m

        echo "downloading the test binary"
        export BIN_DIR="$(pwd)/_out" && mkdir -p "${BIN_DIR}"

        release="v0.34.2"
        TESTS_BINARY="$BIN_DIR/tests.test"
        curl -Lo "$TESTS_BINARY" "https://github.com/kubevirt/kubevirt/releases/download/${release}/tests.test"
        chmod +x "$TESTS_BINARY"

        curl -L "https://raw.githubusercontent.com/kubevirt/hyperconverged-cluster-operator/ab76935d6cc918a17585563fd3f646717e7d2c4c/deploy/nightly-bundle/kubevirt-testing-infra.yaml" | oc create -n openshift-cnv -f -

        cat << EOF > /tmp/kv-testconfig.json
        {
          "storageClassLocal": "hostpath-provisioner",
          "storageClassHostPath": "hostpath-provisioner",
          "storageClassRhel": "hostpath-provisioner",
          "storageClassWindows": "hostpath-provisioner",
          "manageStorageClasses": false
        }
        EOF

        echo "starting tests"
        ${TESTS_BINARY} \
          -installed-namespace="$TARGET_NAMESPACE" \
          -cdi-namespace="$TARGET_NAMESPACE" \
          -config=/tmp/kv-testconfig.json \
          -kubeconfig="$KUBECONFIG" \
          -ginkgo.focus='(rfe_id:1177)|(rfe_id:273)|(rfe_id:151)' \
          -ginkgo.skip='(Slirp Networking)|(with CPU spec)|(with TX offload disabled)|(with cni flannel and ptp plugin interface)|(with ovs-cni plugin)|(test_id:1752)|(SRIOV)|(with EFI)|(Operator)|(GPU)|(DataVolume Integration)|(test_id:3468)|(test_id:3466)|(test_id:1015)|(rfe_id:393)' \
          -junit-output="${ARTIFACTS_DIR}/junit.functest.xml" \
          -ginkgo.seed=0
      credentials:
      - mount_path: /var/run/cnv-ci-brew-pull-secret
        name: cnv-ci-brew-pull-secret
        namespace: test-credentials
      env:
      - default: '|7820aea2-0d75-11e7-9259-28d244ea5a6d.hhav.f63e13'
        name: BREW_IMAGE_REGISTRY_USERNAME
      - default: /var/run/cnv-ci-brew-pull-secret/token
        name: BREW_IMAGE_REGISTRY_TOKEN_PATH
      - default: 2.5.1
        name: CNV_VERSION
      - default: /tmp/artifacts
        name: ARTIFACTS_DIR
      - default: openshift-cnv
        name: TARGET_NAMESPACE
      from: src
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
    workflow: ipi-azure
zz_generated_metadata:
  branch: master
  org: openshift-cnv
  repo: cnv-ci
  variant: cnv2.5.1_4.6
