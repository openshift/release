base_images:
  centos9:
    name: centos
    namespace: openshift
    tag: stream9
  golangci-lint:
    name: golangci-lint
    namespace: ci
    tag: v1.59.0
  hypershift:
    name: hypershift-cli
    namespace: ci
    tag: latest
  os:
    name: ubi-minimal
    namespace: ocp
    tag: "9"
binary_build_commands: make production-install
build_root:
  from_repository: true
images:
- context_dir: images/sprint-automation/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/sprint-automation
  to: sprint-automation
- context_dir: images/pod-scaler/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/pod-scaler
  to: pod-scaler
- context_dir: images/pr-reminder/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/pr-reminder
  to: pr-reminder
- context_dir: images/pipeline-controller/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/pipeline-controller
  to: pipeline-controller
- context_dir: images/check-gh-automation/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/check-gh-automation
  to: check-gh-automation
- context_dir: images/check-cluster-profiles-config/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/check-cluster-profiles-config
  to: check-cluster-profiles-config
- context_dir: images/dptp-3312-hypershift-leaks-cleaner/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /usr/local/bin/oc
    hypershift:
      paths:
      - destination_dir: .
        source_path: /usr/bin/hypershift
  to: dptp-3312-hypershift-leaks-cleaner
- context_dir: images/cvp-trigger/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/cvp-trigger
  to: cvp-trigger
- context_dir: images/blocking-issue-creator/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/blocking-issue-creator
  to: blocking-issue-creator
- context_dir: images/result-aggregator/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/result-aggregator
  to: result-aggregator
- additional_architectures:
  - arm64
  context_dir: images/ci-operator/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-operator
      - destination_dir: .
        source_path: /usr/bin/manifest-tool
  to: ci-operator
- additional_architectures:
  - arm64
  context_dir: images/ci-operator-minimal/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-operator
      - destination_dir: .
        source_path: /usr/bin/manifest-tool
  to: ci-operator-minimal
- additional_architectures:
  - arm64
  context_dir: images/ci-operator-checkconfig/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-operator-checkconfig
  to: ci-operator-checkconfig
- context_dir: images/bugzilla-backporter/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/bugzilla-backporter
  to: bugzilla-backporter
- additional_architectures:
  - arm64
  context_dir: images/ci-operator-prowgen/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-operator-prowgen
  to: ci-operator-prowgen
- additional_architectures:
  - arm64
  context_dir: images/sanitize-prow-jobs/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/sanitize-prow-jobs
  to: sanitize-prow-jobs
- context_dir: images/multi-pr-prow-plugin/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/multi-pr-prow-plugin
  to: multi-pr-prow-plugin
- context_dir: images/pj-rehearse/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/pj-rehearse
      - destination_dir: usr/bin
        source_path: /usr/local/bin/oc
  to: pj-rehearse
- context_dir: images/slack-bot/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/slack-bot
  to: slack-bot
- additional_architectures:
  - arm64
  context_dir: images/config-brancher/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/config-brancher
  to: config-brancher
- context_dir: images/dptp-controller-manager
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/dptp-controller-manager
  to: dptp-controller-manager
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    ADD dptp-pools-cm /usr/bin/dptp-pools-cm
    ENTRYPOINT ["dptp-pools-cm"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/dptp-pools-cm
  to: dptp-pools-cm
- additional_architectures:
  - arm64
  dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    RUN microdnf install -y git && microdnf clean all && rm -rf /var/cache/dnf
    ADD promoted-image-governor /usr/bin/promoted-image-governor
    ENTRYPOINT ["promoted-image-governor"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/promoted-image-governor
  to: promoted-image-governor
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    RUN microdnf install -y git && microdnf clean all && rm -rf /var/cache/dnf
    ADD ci-images-mirror /usr/bin/ci-images-mirror
    ADD usr/bin/oc /usr/bin/oc
    ENTRYPOINT ["ci-images-mirror"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-images-mirror
      - destination_dir: usr/bin
        source_path: /usr/local/bin/oc
  to: ci-images-mirror
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    RUN microdnf install -y git && microdnf clean all && rm -rf /var/cache/dnf
    ADD prcreator /usr/bin/prcreator
    ENTRYPOINT ["prcreator"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/prcreator
  to: prcreator
- context_dir: images/autoconfigbrancher/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/autoconfigbrancher
      - destination_dir: .
        source_path: /go/bin/config-brancher
      - destination_dir: .
        source_path: /go/bin/determinize-ci-operator
      - destination_dir: .
        source_path: /go/bin/sanitize-prow-jobs
      - destination_dir: .
        source_path: /go/bin/ci-operator-prowgen
      - destination_dir: .
        source_path: /go/bin/ci-operator-config-mirror
      - destination_dir: .
        source_path: /go/bin/private-prow-configs-mirror
      - destination_dir: .
        source_path: /go/bin/determinize-prow-config
      - destination_dir: .
        source_path: /go/bin/registry-replacer
      - destination_dir: .
        source_path: /go/bin/ci-operator-yaml-creator
      - destination_dir: .
        source_path: /go/bin/clusterimageset-updater
      - destination_dir: .
        source_path: /go/bin/promoted-image-governor
  to: auto-config-brancher
- additional_architectures:
  - arm64
  context_dir: images/prowjobdispatcher
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/prow-job-dispatcher
      - destination_dir: .
        source_path: /go/bin/sanitize-prow-jobs
  to: prow-job-dispatcher
- context_dir: images/autotestgridgenerator/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/testgrid-config-generator
      - destination_dir: .
        source_path: /go/bin/autotestgridgenerator
  to: auto-testgrid-generator
- context_dir: images/repo-brancher/
  from: root
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/repo-brancher
  to: repo-brancher
- additional_architectures:
  - arm64
  context_dir: images/determinize-ci-operator/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/determinize-ci-operator
  to: determinize-ci-operator
- context_dir: images/determinize-peribolos/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/determinize-peribolos
  to: determinize-peribolos
- additional_architectures:
  - arm64
  context_dir: images/applyconfig
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/applyconfig
      - destination_dir: usr/bin
        source_path: /usr/local/bin/oc
  to: applyconfig
- context_dir: images/autoowners
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/autoowners
  to: autoowners
- context_dir: images/config-change-trigger
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/config-change-trigger
  to: config-change-trigger
- context_dir: images/testgrid-config-generator
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/testgrid-config-generator
  to: testgrid-config-generator
- additional_architectures:
  - arm64
  context_dir: images/entrypoint-wrapper
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/entrypoint-wrapper
  to: entrypoint-wrapper
- context_dir: images/ci-operator-configresolver
  from: centos9
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-operator-configresolver
  to: ci-operator-configresolver
- additional_architectures:
  - arm64
  context_dir: images/determinize-prow-config
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/determinize-prow-config
  to: determinize-prow-config
- additional_architectures:
  - arm64
  context_dir: images/tide-config-manager
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/tide-config-manager
  to: tide-config-manager
- additional_architectures:
  - arm64
  context_dir: images/repo-init
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/repo-init
      - destination_dir: .
        source_path: /go/bin/sanitize-prow-jobs
      - destination_dir: .
        source_path: /go/bin/ci-operator-prowgen
      - destination_dir: .
        source_path: /go/bin/ci-operator-checkconfig
  to: repo-init
- context_dir: images/private-org-sync/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/private-org-sync
  to: private-org-sync
- context_dir: images/ci-secret-bootstrap
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-secret-bootstrap
  to: ci-secret-bootstrap
- context_dir: images/ci-secret-generator
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-secret-generator
      - destination_dir: usr/bin
        source_path: /usr/local/bin/oc
  to: ci-secret-generator
- context_dir: images/ci-operator-config-mirror
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-operator-config-mirror
  to: ci-operator-config-mirror
- context_dir: images/private-prow-configs-mirror/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/private-prow-configs-mirror
  to: private-prow-configs-mirror
- context_dir: images/private-org-peribolos-sync/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/private-org-peribolos-sync
  to: private-org-peribolos-sync
- context_dir: images/autoperibolossync/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/autoperibolossync
      - destination_dir: .
        source_path: /go/bin/private-org-peribolos-sync
  to: auto-peribolos-sync
- context_dir: images/registry-replacer/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/registry-replacer
  to: registry-replacer
- context_dir: images/autopublicizeconfig
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/autopublicizeconfig
  to: autopublicizeconfig
- additional_architectures:
  - arm64
  context_dir: images/generate-registry-metadata/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/generate-registry-metadata
  to: generate-registry-metadata
- context_dir: images/publicize/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/publicize
  to: publicize
- context_dir: images/backport-verifier/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/backport-verifier
  to: backport-verifier
- context_dir: images/serviceaccount-secret-rotation-trigger
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/serviceaccount-secret-rotation-trigger
  to: serviceaccount-secret-rotation-trigger
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    RUN microdnf install -y git diffutils && microdnf clean all && rm -rf /var/cache/dnf
    ADD sippy-config-generator /usr/bin/sippy-config-generator
    ADD prcreator /usr/bin/prcreator
    ENTRYPOINT ["/usr/bin/sippy-config-generator"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/sippy-config-generator
      - destination_dir: .
        source_path: /go/bin/prcreator
  to: auto-sippy-config-generator
- context_dir: images/ocp-build-data-enforcer/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ocp-build-data-enforcer
  to: ocp-build-data-enforcer
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    ADD vault-subpath-proxy /usr/bin/vault-subpath-proxy
    ENTRYPOINT ["/usr/bin/vault-subpath-proxy"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/vault-subpath-proxy
  to: vault-subpath-proxy
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    ADD cluster-display /usr/bin/cluster-display
    ENTRYPOINT ["/usr/bin/cluster-display"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/cluster-display
  to: cluster-display
- additional_architectures:
  - arm64
  context_dir: images/cluster-init/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/cluster-init
  to: cluster-init
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    ADD vault-secret-collection-manager /usr/bin/vault-secret-collection-manager
    ENTRYPOINT ["/usr/bin/vault-secret-collection-manager"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/vault-secret-collection-manager
  to: vault-secret-collection-manager
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    ADD bugzilla-config-manager /usr/bin/bugzilla-config-manager
    ADD prcreator /usr/bin/prcreator
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/bugzilla-config-manager
      - destination_dir: .
        source_path: /go/bin/prcreator
  to: bugzilla-config-manager
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    RUN microdnf install -y git && microdnf clean all && rm -rf /var/cache/dnf
    ADD ci-operator-yaml-creator /usr/bin/ci-operator-yaml-creator
    ENTRYPOINT ["ci-operator-yaml-creator"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-operator-yaml-creator
  to: ci-operator-yaml-creator
- context_dir: images/clusterimageset-updater
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/clusterimageset-updater
  to: clusterimageset-updater
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    RUN microdnf install -y tar gzip
    ADD github-ldap-user-group-creator /usr/bin/github-ldap-user-group-creator
    ENTRYPOINT ["github-ldap-user-group-creator"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/github-ldap-user-group-creator
  to: github-ldap-user-group-creator
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    ADD qci-appci /usr/bin/qci-appci
    ENTRYPOINT ["qci-appci"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/qci-appci
  to: qci-appci
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    ADD payload-testing-prow-plugin /usr/bin/payload-testing-prow-plugin
    ENTRYPOINT ["/usr/bin/payload-testing-prow-plugin"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/payload-testing-prow-plugin
  to: payload-testing-prow-plugin
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    ADD job-trigger-controller-manager /usr/bin/job-trigger-controller-manager
    ENTRYPOINT ["/usr/bin/job-trigger-controller-manager"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/job-trigger-controller-manager
  to: job-trigger-controller-manager
- context_dir: images/payload-testing-ui
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/payload-testing-ui
  to: payload-testing-ui
- context_dir: images/job-run-aggregator
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/job-run-aggregator
      - destination_dir: .
        source_path: /go/bin/prcreator
  to: job-run-aggregator
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    RUN microdnf install -y tar git && microdnf clean all && rm -rf /var/cache/dnf
    ADD sync-rover-groups /usr/bin/sync-rover-groups
    ADD usr/bin/oc /usr/bin/oc
    ENTRYPOINT ["sync-rover-groups"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/sync-rover-groups
      - destination_dir: usr/bin
        source_path: /usr/local/bin/oc
  to: sync-rover-groups
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    RUN microdnf install -y git && microdnf clean all && rm -rf /var/cache/dnf
    ADD retester /usr/bin/retester
    ENTRYPOINT ["/usr/bin/retester"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/retester
  to: retester
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    ADD image-graph-generator /usr/bin/image-graph-generator
    ENTRYPOINT ["/usr/bin/image-graph-generator"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/image-graph-generator
  to: image-graph-generator
- context_dir: images/multi-arch-builder-controller
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/multi-arch-builder-controller
      - destination_dir: .
        source_path: /usr/bin/manifest-tool
      - destination_dir: .
        source_path: /usr/local/bin/oc
  to: multi-arch-builder-controller
- dockerfile_literal: |-
    FROM registry.access.redhat.com/ubi9/ubi-minimal:latest
    ADD ci-scheduling-webhook /usr/bin/ci-scheduling-webhook
    ENTRYPOINT ["/usr/bin/ci-scheduling-webhook"]
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/ci-scheduling-webhook
  to: ci-scheduling-webhook
- context_dir: images/gpu-scheduling-webhook
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/gpu-scheduling-webhook
  to: gpu-scheduling-webhook
- context_dir: images/helpdesk-faq/
  from: os
  inputs:
    bin:
      paths:
      - destination_dir: .
        source_path: /go/bin/helpdesk-faq
  to: helpdesk-faq
promotion:
  to:
  - namespace: ci
    tag: latest
resources:
  '*':
    requests:
      cpu: "1"
      memory: 1Gi
test_binary_build_commands: make race-install
tests:
- as: unit
  cluster: build01
  commands: make test TESTFLAGS='-count=25 -coverprofile=cover.out'
  container:
    from: src
  node_architecture: arm64
- as: codegen
  cluster: build01
  commands: make verify-gen
  container:
    from: src
  node_architecture: arm64
- as: format
  cluster: build01
  commands: make format
  container:
    from: src
  node_architecture: arm64
- as: integration
  cluster: build01
  commands: make integration
  container:
    from: test-bin
  node_architecture: arm64
- always_run: false
  as: e2e
  steps:
    test:
    - as: e2e
      commands: |
        GCS_CREDENTIALS_FILE=/tmp/gcs/service-account.json REMOTE_REGISTRY_SECRET_DIR=/tmp/import-secret LOCAL_REGISTRY_SECRET_DIR=/tmp/pull-secret KUBECONFIG=/auth/kubeconfig HIVE_KUBECONFIG=/tmp/hive/kubeconfig MANIFEST_TOOL_SECRET=/secrets/manifest-tool/.dockerconfigjson LOCAL_REGISTRY_DNS=image-registry.openshift-image-registry.svc:5000 make e2e
      credentials:
      - mount_path: /auth
        name: ci-operator
        namespace: test-credentials
      - mount_path: /tmp/pull-secret
        name: registry-pull-credentials
        namespace: test-credentials
      - mount_path: /etc/push-secret
        name: registry-push-credentials-ci-central
        namespace: test-credentials
      - mount_path: /tmp/import-secret
        name: ci-pull-credentials
        namespace: test-credentials
      - mount_path: /tmp/gcs
        name: gce-sa-credentials-gcs-publisher
        namespace: test-credentials
      - mount_path: /tmp/hive
        name: hive-hive-credentials
        namespace: test-credentials
      - mount_path: /secrets/manifest-tool
        name: manifest-tool-local-pusher
        namespace: test-credentials
      from: test-bin
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
- as: e2e-oo
  optional: true
  pipeline_run_if_changed: pkg/steps/(index|bundle).*.go
  steps:
    test:
    - as: e2e-oo
      commands: |
        GCS_CREDENTIALS_FILE=/tmp/gcs/service-account.json REMOTE_REGISTRY_SECRET_DIR=/tmp/import-secret LOCAL_REGISTRY_SECRET_DIR=/tmp/pull-secret KUBECONFIG=/auth/kubeconfig MANIFEST_TOOL_SECRET=/secrets/manifest-tool/.dockerconfigjson LOCAL_REGISTRY_DNS=image-registry.openshift-image-registry.svc:5000 make e2e TAGS=e2e_framework,optional_operators
      credentials:
      - mount_path: /auth
        name: ci-operator
        namespace: test-credentials
      - mount_path: /tmp/pull-secret
        name: registry-pull-credentials
        namespace: test-credentials
      - mount_path: /etc/push-secret
        name: registry-push-credentials-ci-central
        namespace: test-credentials
      - mount_path: /tmp/import-secret
        name: ci-pull-credentials
        namespace: test-credentials
      - mount_path: /tmp/gcs
        name: gce-sa-credentials-gcs-publisher
        namespace: test-credentials
      - mount_path: /secrets/manifest-tool
        name: manifest-tool-local-pusher
        namespace: test-credentials
      from: test-bin
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
- as: e2e-oo-post
  postsubmit: true
  steps:
    test:
    - as: e2e-oo-post
      commands: |
        GCS_CREDENTIALS_FILE=/tmp/gcs/service-account.json REMOTE_REGISTRY_SECRET_DIR=/tmp/import-secret LOCAL_REGISTRY_SECRET_DIR=/tmp/pull-secret KUBECONFIG=/auth/kubeconfig MANIFEST_TOOL_SECRET=/secrets/manifest-tool/.dockerconfigjson LOCAL_REGISTRY_DNS=image-registry.openshift-image-registry.svc:5000 make e2e TAGS=e2e_framework,optional_operators
      credentials:
      - mount_path: /auth
        name: ci-operator
        namespace: test-credentials
      - mount_path: /tmp/pull-secret
        name: registry-pull-credentials
        namespace: test-credentials
      - mount_path: /etc/push-secret
        name: registry-push-credentials-ci-central
        namespace: test-credentials
      - mount_path: /tmp/import-secret
        name: ci-pull-credentials
        namespace: test-credentials
      - mount_path: /tmp/gcs
        name: gce-sa-credentials-gcs-publisher
        namespace: test-credentials
      - mount_path: /secrets/manifest-tool
        name: manifest-tool-local-pusher
        namespace: test-credentials
      from: test-bin
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
- as: breaking-changes
  cluster: build01
  node_architecture: arm64
  optional: true
  steps:
    test:
    - as: breaking-changes
      commands: |
        export KUBECONFIG_DIR=/etc/kubeconfigs
        export KUBECONFIG_SUFFIX=config
        make check-breaking-changes
      credentials:
      - mount_path: /etc/kubeconfigs
        name: cluster-init
        namespace: ci
      from: test-bin
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
- as: checkconfig
  cluster: build01
  commands: make validate-checkconfig
  container:
    from: test-bin
  node_architecture: arm64
- as: validate-vendor
  cluster: build01
  commands: make validate-vendor
  container:
    from: src
  node_architecture: arm64
- as: frontend-checks
  cluster: build01
  commands: make verify-frontend-format frontend-checks
  container:
    from: test-bin
  node_architecture: arm64
- as: lint
  commands: make lint
  container:
    from: golangci-lint
- as: canary-build09
  cluster: build09
  interval: 10m
  steps:
    test:
    - as: test
      commands: echo "here i am"
      from: os
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
- as: security
  optional: true
  steps:
    env:
      PROJECT_NAME: ci-tools
    workflow: openshift-ci-security
zz_generated_metadata:
  branch: master
  org: openshift
  repo: ci-tools
