base_images:
  golangci-lint:
    name: golangci-lint
    namespace: ci
    tag: v1.53.1
binary_build_commands: make build
build_root:
  image_stream_tag:
    name: release
    namespace: openshift
    tag: golang-1.21
images:
- build_args:
  - name: TARGETOS
    value: linux
  - name: TARGETARCH
    value: amd64
  context_dir: .
  dockerfile_path: Dockerfile
  to: observability-analytics-operator
promotion:
  to:
  - namespace: osa
    tag: latest
    tag_by_commit: true
releases:
  latest:
    candidate:
      product: ocp
      stream: nightly
      version: "4.14"
resources:
  '*':
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: gofmt
  commands: GOFLAGS="-mod=readonly" go fmt ./... && git diff --exit-code
  container:
    from: src
  run_if_changed: \.go$
- as: lint
  commands: |
    export GOCACHE=/tmp/
    export GOFLAGS="-mod=readonly"
    export GOLANGCI_LINT_CACHE=/tmp/.cache
    export GOPROXY=https://proxy.golang.org
    golangci-lint run --verbose --timeout=5m1s
  container:
    clone: true
    from: golangci-lint
  optional: true
- as: unit
  commands: GOFLAGS="-mod=readonly" go test ./...
  container:
    from: src
  skip_if_only_changed: ^docs/|\.md$|^(?:.*/)?(?:\.gitignore|OWNERS|PROJECT|LICENSE)$
- as: security
  optional: true
  steps:
    env:
      PROJECT_NAME: analytics-operator
    workflow: openshift-ci-security
- as: operator-e2e-tests
  cluster_claim:
    architecture: amd64
    cloud: aws
    owner: openshift-ci
    product: ocp
    timeout: 1h30m0s
    version: "4.14"
  skip_if_only_changed: ^docs/|\.md$|^(?:.*/)?(?:\.gitignore|OWNERS|PROJECT|LICENSE)$
  steps:
    test:
    - as: test
      cli: latest
      commands: "echo \"command execution started\"\noc version\n# Make kubectl available
        by creating a symlink to oc.\npushd \"$CLI_DIR\"\nif [ ! -f kubectl ]; then\n
        \   ln -s oc kubectl\nfi\npopd\necho \"listing files\"\nls /\necho \"---------\"\nls
        /go/src/github.com/openshift/analytics-operator/\necho \"---------\"\nls ./config/samples/\necho
        \"---------\"\nset +e \ndeclare IMG_BASE='registry.ci.openshift.org/osa'\ndeclare
        NO_DEPLOY=false\ndeclare NO_BUILD=true\ndeclare VERSION=latest\ndeclare BATCH_SIZE=30\necho
        \"print7\"\nmake deploy IMG_BASE=\"$IMG_BASE\" VERSION=\"$VERSION\" \necho
        \"print8\"\ntries=30\nwhile [[ $tries -gt 0 ]] &&\n  ! kubectl -n \"analytics-operator-system\"
        rollout status deploy/analytics-operator-controller-manager; do\n  sleep 10\n
        \ ((tries--))\ndone\necho \"print9\"\nkubectl wait -n \"analytics-operator-system\"
        --for=condition=Available deploy/analytics-operator-controller-manager --timeout=300s\necho
        \"print11\"\necho \"ls ./config/samples/\"\nls ./config/samples/\necho \"----------\"\nkubectl
        get pods -n \"analytics-operator-system\"\necho \"print11.1\"\nkubectl get
        anomalyengines\necho \"print12\"\nkubectl create namespace osa-anomaly-detection\necho
        \"print12.0\"\ncat ./config/samples/observability-analytics_v1alpha1_anomalyengine.yaml\necho
        \"print12.1\"\noc project osa-anomaly-detection\nkubectl apply -f ./config/samples/observability-analytics_v1alpha1_anomalyengine.yaml\necho
        \"print12.2\"\noc get projects\necho \"------------------\"\necho \"NAMESPACE
        : $NAMESPACE\"\nkubectl get pods -n $NAMESPACE\necho \"print12.4\"\ncontroller_manager_pod=\"\"\npresent=false\nfor
        elm in $(kubectl get pod  -n \"analytics-operator-system\"); do \n    if [[
        \"$elm\" == \"analytics-operator-controller-manager\"* ]]; then\n        controller_manager_pod=$elm\n
        \       present=true\n        break\n    fi\ndone\necho \"print12.5\"\necho
        \"kubectl get pod -n $NAMESPACE\"\nkubectl get pod -n $NAMESPACE\necho \"present
        : $present, controller_manager_pod: $controller_manager_pod\"\necho \"print13.0\"\nkubectl
        logs $controller_manager_pod -n \"analytics-operator-system\"\necho \"print14\"\nsleep
        300\necho \"print14.1\"\nif ! kubectl -n \"osa-anomaly-detection\" get cronjob
        | grep \"osa-anomaly-detection\"; then\n  echo \"Cronjob not present to detect
        Anomaly\"\n  exit 1\nfi\necho \"print15\"\n"
      from: src
      resources:
        requests:
          cpu: 100m
          memory: 400Mi
    workflow: generic-claim
  timeout: 2h0m0s
zz_generated_metadata:
  branch: main
  org: openshift
  repo: analytics-operator
