base_images:
  operator-sdk:
    name: "4.14"
    namespace: origin
    tag: operator-sdk
binary_build_commands: go install ./
build_root:
  image_stream_tag:
    name: builder
    namespace: ocp
    tag: rhel-8-golang-1.20-openshift-4.14
canonical_go_repository: github.com/grafana/tempo-operator
images:
- context_dir: .
  dockerfile_path: Dockerfile
  to: tempo-operator
- context_dir: .
  dockerfile_path: tests/Dockerfile
  to: tempo-tests-runner
operator:
  bundles:
  - as: tempo-bundle
    context_dir: ./bundle/openshift
    dockerfile_path: bundle.Dockerfile
  substitutions:
  - pullspec: ghcr.io/grafana/tempo-operator/tempo-operator:v0.2.0
    with: pipeline:tempo-operator
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
test_binary_build_commands: go build ./main.go
tests:
- as: test
  steps:
    test:
    - as: unit
      commands: GOFLAGS="-mod=mod" make test
      from: src
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
- as: e2e-in-cluster-build
  cluster_claim:
    architecture: amd64
    cloud: aws
    owner: openshift-ci
    product: ocp
    timeout: 1h0m0s
    version: "4.13"
  steps:
    test:
    - as: install
      cli: latest
      commands: |
        oc create namespace openshift-operators-tempo
        operator-sdk run bundle -n openshift-operators-tempo "$OO_BUNDLE" # install operator
        oc wait --for condition=Available -n openshift-operators-tempo deployment tempo-operator-controller # wait until operator is ready
      dependencies:
      - env: OO_BUNDLE
        name: tempo-bundle
      from: operator-sdk
      resources:
        requests:
          cpu: 500m
          memory: 500Mi
    - as: run-test
      cli: latest
      commands: |
        cat <<EOF | oc apply -f -
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          name: opentelemetry-product
          namespace: openshift-operators
        spec:
          channel: stable
          installPlanApproval: Automatic
          name: opentelemetry-product
          source: redhat-operators
          sourceNamespace: openshift-marketplace
        EOF

        # can't wait before the resource exists. Need to sleep a bit before start watching
        sleep 60

        RETRIES=30
        CSV=
        for i in $(seq "${RETRIES}"); do
          if [[ -z "${CSV}" ]]; then
            CSV=$(oc get subscription -n openshift-operators opentelemetry-product -o jsonpath='{.status.installedCSV}')
          fi

          if [[ -z "${CSV}" ]]; then
            echo "Try ${i}/${RETRIES}: can't get the opentelemetry-product yet. Checking again in 30 seconds"
            sleep 30
          fi

          if [[ $(oc get csv -n openshift-operators ${CSV} -o jsonpath='{.status.phase}') == "Succeeded" ]]; then
            echo "opentelemetry-product is deployed"
            break
          else
            echo "Try ${i}/${RETRIES}: opentelemetry-product is not deployed yet. Checking again in 30 seconds"
            sleep 30
          fi
        done

        if [[ $(oc get csv -n openshift-operators "${CSV}" -o jsonpath='{.status.phase}') != "Succeeded" ]]; then
          echo "Error: Failed to deploy opentelemetry-product"
          echo "csv ${CSV} YAML"
          oc get csv "${CSV}" -n openshift-operators -o yaml
          echo
          echo "csv ${CSV} Describe"
          oc describe csv "${CSV}" -n openshift-operators
          exit 1
        fi

        #Add manifest directory for kuttl
        mkdir /tmp/kuttl-manifests && cp /tmp/tempo-operator/minio.yaml /tmp/kuttl-manifests

        #Copy the tempo-operator repo files to a writable directory by kuttl
        cp -R /tmp/tempo-operator /tmp/tempo-tests && cd /tmp/tempo-tests

        # Execute Tempo e2e tests
        kuttl test \
          --report=xml \
          --artifacts-dir="$ARTIFACT_DIR" \
          --parallel="5" \
          --report-name="junit_tempo_test_results.xml" \
          --start-kind=false \
          --timeout="150" \
          --manifest-dir="/tmp/kuttl-manifests" \
          tests/e2e \
          tests/e2e-openshift
      from: tempo-tests-runner
      resources:
        requests:
          cpu: 500m
          memory: 500Mi
    workflow: generic-claim
zz_generated_metadata:
  branch: main
  org: openshift
  repo: grafana-tempo-operator
