base_images:
  base:
    name: "4.21"
    namespace: ocp
    tag: base-rhel9
  ocp_builder_rhel-9-golang-1.24-openshift-4.21:
    name: builder
    namespace: ocp
    tag: rhel-9-golang-1.24-openshift-4.21
build_root:
  image_stream_tag:
    name: builder
    namespace: ocp
    tag: rhel-9-golang-1.24-openshift-4.21
images:
- dockerfile_path: Dockerfile
  from: base
  inputs:
    ocp_builder_rhel-9-golang-1.24-openshift-4.21: {}
  to: tls-scanner-tool
releases:
  initial:
    integration:
      name: "4.21"
      namespace: ocp
  latest:
    integration:
      include_built_images: true
      name: "4.21"
      namespace: ocp
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: tls-scanner
  steps:
    cluster_profile: aws
    test:
    - as: run-scanner-on-cluster
      cli: latest
      commands: |
        set -euo pipefail

        # The tls-scanner tool is hardcoded to use a ServiceAccount named 'tls-scanner'.
        # We create it here in the 'default' namespace, which is guaranteed to exist
        # on the ephemeral cluster.
        TEST_NAMESPACE="default"
        TEST_SA="tls-scanner"

        echo "--- Creating ServiceAccount '${TEST_SA}' in namespace '${TEST_NAMESPACE}' ---"
        oc create serviceaccount "${TEST_SA}" -n "${TEST_NAMESPACE}"
        oc adm policy add-scc-to-user privileged -z "${TEST_SA}" -n "${TEST_NAMESPACE}"

        CRB_NAME="tls-scanner-cluster-admin"
        oc create clusterrolebinding "${CRB_NAME}" --clusterrole=cluster-admin --serviceaccount="${TEST_NAMESPACE}:${TEST_SA}"
        echo "--- Created ServiceAccount and bound cluster-admin role ---"

        SA_USER="system:serviceaccount:${TEST_NAMESPACE}:${TEST_SA}"
        echo "--- Waiting for permissions to propagate for '${SA_USER}' ---"
        if ! timeout 120s bash -c "while ! oc auth can-i list pods --all-namespaces --as='${SA_USER}'; do echo '... permissions not ready, waiting ...'; sleep 5; done"; then
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            echo "Error: Timed out waiting for permissions to propagate for SA '${SA_USER}'."
            echo "--- Start Final RBAC Debug Info ---"
            echo "Final permissions list for ${SA_USER}:"
            oc auth can-i --list --as="${SA_USER}" || echo "Warning: Failed to list permissions for SA."
            echo "--- End Final RBAC Debug Info ---"
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            exit 1
        fi
        echo "--- Permissions are ready. Proceeding with scan. ---"

        # The scanner tool appears to need the KUBECONFIG to be pointed at a token for the specific SA it uses.
        # We will generate a temporary kubeconfig for it.
        SERVICEACCOUNT_TOKEN=$(oc sa get-token ${TEST_SA} -n ${TEST_NAMESPACE})
        oc login --token="$SERVICEACCOUNT_TOKEN" --server="$(oc config view --minify -o jsonpath='{.clusters[0].cluster.server}')" --insecure-skip-tls-verify=true

        /usr/local/bin/tls-scanner -all-pods -csv-file "${ARTIFACT_DIR}/tls-scanner/report.csv" -limit-ips 4
      from: tls-scanner-tool
      resources:
        requests:
          cpu: 100m
    workflow: ipi-aws
zz_generated_metadata:
  branch: main
  org: openshift
  repo: tls-scanner
