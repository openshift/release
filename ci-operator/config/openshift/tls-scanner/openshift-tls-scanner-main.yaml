base_images:
  base:
    name: "4.21"
    namespace: ocp
    tag: base-rhel9
  ocp_builder_rhel-9-golang-1.24-openshift-4.21:
    name: builder
    namespace: ocp
    tag: rhel-9-golang-1.24-openshift-4.21
build_root:
  image_stream_tag:
    name: builder
    namespace: ocp
    tag: rhel-9-golang-1.24-openshift-4.21
images:
- dockerfile_path: Dockerfile
  from: base
  inputs:
    ocp_builder_rhel-9-golang-1.24-openshift-4.21: {}
  to: tls-scanner-tool
releases:
  initial:
    integration:
      name: "4.21"
      namespace: ocp
  latest:
    integration:
      include_built_images: true
      name: "4.21"
      namespace: ocp
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: tls-scanner
  steps:
    cluster_profile: aws
    test:
    - as: run-scanner-on-cluster
      cli: latest
      commands: |
        set -euo pipefail

        # The tls-scanner binary uses the pod's default service account. We need to grant that SA
        # cluster-admin privileges. The context running this script (from ipi-install-rbac)
        # has the power to create this binding.
        CURRENT_USER=$(oc whoami)
        echo "--- Granting cluster-admin to the current user: ${CURRENT_USER} ---"
        oc create clusterrolebinding self-admin --clusterrole=cluster-admin --user="${CURRENT_USER}"

        echo "--- Waiting for permissions to propagate for '${CURRENT_USER}' ---"
        if ! timeout 120s bash -c "while ! oc auth can-i list pods --all-namespaces; do echo '... waiting for permissions ...'; sleep 5; done"; then
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            echo "Error: Timed out waiting for permissions to propagate for user '${CURRENT_USER}'."
            echo "--- Start Final RBAC Debug Info ---"
            oc auth can-i --list || echo "Warning: Failed to list permissions."
            echo "--- End Final RBAC Debug Info ---"
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            exit 1
        fi
        echo "--- Permissions are ready. Proceeding with scan. ---"

        # Create the artifact directory before running the scanner
        mkdir -p "${ARTIFACT_DIR}/tls-scanner"

        /usr/local/bin/tls-scanner -all-pods -csv-file "${ARTIFACT_DIR}/tls-scanner/report.csv" -limit-ips 4
      from: tls-scanner-tool
      resources:
        requests:
          cpu: 100m
    workflow: ipi-aws
zz_generated_metadata:
  branch: main
  org: openshift
  repo: tls-scanner
