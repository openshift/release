base_images:
  ocp_builder_rhel-9-base-openshift-4.19:
    name: builder
    namespace: ocp
    tag: rhel-9-base-openshift-4.19
  ocp_builder_rhel-9-golang-1.23-openshift-4.19:
    name: builder
    namespace: ocp
    tag: rhel-9-golang-1.23-openshift-4.19
build_root:
  from_repository: true
images:
- dockerfile_path: Dockerfile.ci
  inputs:
    ocp_builder_rhel-9-base-openshift-4.19:
      as:
      - registry.ci.openshift.org/ocp/builder:rhel-9-base-openshift-4.19
    ocp_builder_rhel-9-golang-1.23-openshift-4.19:
      as:
      - registry.ci.openshift.org/ocp/builder:rhel-9-golang-1.23-openshift-4.19
  to: kueue-operator
- dockerfile_literal: |
    FROM src
    RUN dnf install -y skopeo git && dnf clean all
  from: src
  to: kueue-operator-src
promotion:
  to:
  - disabled: true
    name: "4.19"
    namespace: ocp
resources:
  '*':
    requests:
      cpu: 100m
      memory: 200Mi
tag_specification:
  name: "4.19"
  namespace: ocp
tests:
- as: test
  commands: make test
  container:
    from: src
- as: test-generate
  commands: make generate manifests regen-crd
  container:
    from: src
- as: lint
  commands: |
    export GOCACHE=/tmp/
    export GOLANGCI_LINT_CACHE=/tmp/.cache
    export GOPROXY=https://proxy.golang.org
    make lint
  container:
    clone: true
    from: src
- as: fips-image-scan-kueue-operator
  skip_if_only_changed: ^\.tekton/|\.md$|^(LICENSE|OWNERS)$
  steps:
    dependencies:
      SCAN_IMAGE: kueue-operator
    test:
    - ref: fips-check-image-scan
- as: security
  optional: true
  skip_if_only_changed: ^\.tekton/|\.md$|^(LICENSE|OWNERS)$
  steps:
    workflow: openshift-ci-security
- as: test-e2e
  cluster_claim:
    architecture: amd64
    cloud: aws
    owner: openshift-ci
    product: ocp
    timeout: 1h0m0s
    version: "4.17"
  steps:
    test:
    - as: e2e-kueue
      cli: latest
      commands: |-
        echo "Current PWD: $(pwd)"
        echo "Listing directory contents:"
        ls -lah

        TEMP_DIR=$(mktemp -d)
        git clone --depth 1 --branch release-0.11 https://github.com/openshift/kubernetes-sigs-kueue.git ${TEMP_DIR}
        cd ${TEMP_DIR}
        KUEUE_COMMIT_ID=$(git rev-parse HEAD)
        cd -
        rm -rf ${TEMP_DIR}

        REVISION=$(git log --oneline -1 | awk '{print $4}' | tr -d "'")
        export KUEUE_IMAGE=quay.io/redhat-user-workloads/kueue-operator-tenant/kueue-0-11:${KUEUE_COMMIT_ID}
        echo "Using Kueue Image: ${KUEUE_IMAGE}"

        echo "Current Git branch:"
        git branch --show-current

        echo "Latest Git commits:"
        git log --oneline -5

        echo "Git status:"
        git status

        export OPERATOR_IMAGE=quay.io/redhat-user-workloads/kueue-operator-tenant/kueue-operator:on-pr-${REVISION}
        echo "Using Operator Image: ${OPERATOR_IMAGE}"

        echo "Waiting for operator image ${OPERATOR_IMAGE} to be available..."
        function wait_for_image() {
            until skopeo inspect docker://${OPERATOR_IMAGE} >/dev/null 2>&1; do
                echo "Operator image not found yet. Retrying in 30s..."
                sleep 30
            done
        }
        export -f wait_for_image
        timeout 10m bash -c "wait_for_image"

        echo "Operator image is available. Proceeding with tests..."

        make deploy-cert-manager
        make test-e2e
        make undeploy-ocp
      from: kueue-operator-src
      resources:
        requests:
          cpu: 300m
          memory: 500Mi
- as: test-e2e-upstream
  cluster_claim:
    architecture: amd64
    cloud: aws
    owner: openshift-ci
    product: ocp
    timeout: 1h0m0s
    version: "4.17"
  steps:
    test:
    - as: e2e-kueue
      cli: latest
      commands: |-
        get_kueue_commit_id() {
            local temp_dir
            temp_dir=$(mktemp -d)
            git clone --depth 1 --branch release-0.11 https://github.com/openshift/kubernetes-sigs-kueue.git "${temp_dir}"
            pushd "${temp_dir}" > /dev/null
            local commit_id
            commit_id=$(git rev-parse HEAD)
            popd > /dev/null
            rm -rf "${temp_dir}"
            echo "${commit_id}"
        }

        get_operator_image() {
            local revision
            revision=$(git log --oneline -1 | awk '{print $4}' | tr -d "'")
            echo "quay.io/redhat-user-workloads/kueue-operator-tenant/kueue-operator:on-pr-${revision}"
        }

        wait_for_image() {
            local image=$1
            echo "Waiting for operator image ${image} to be available..."
            local timeout_secs=600  # 10 minutes
            local interval=30
            local elapsed=0
            until skopeo inspect docker://${image} >/dev/null 2>&1; do
                if (( elapsed >= timeout_secs )); then
                    echo "Timeout waiting for image ${image}"
                    exit 1
                fi
                echo "Operator image not found yet. Retrying in ${interval}s..."
                sleep "${interval}"
                elapsed=$(( elapsed + interval ))
            done
            echo "Operator image is available."
        }

        wait_for_cert_manager_crds() {
            echo "Waiting for cert-manager CRDs to be installed..."
            local timeout=120 interval=5 elapsed=0
            until oc get crd certificates.cert-manager.io >/dev/null 2>&1; do
                if (( elapsed >= timeout )); then
                    echo "Timeout waiting for cert-manager CRDs"
                    exit 1
                fi
                sleep "${interval}"
                elapsed=$(( elapsed + interval ))
            done
            echo "cert-manager CRDs are installed."
        }

        wait_for_cert_manager_csv() {
            echo "Waiting for cert-manager Operator CSV to reach Succeeded status..."
            local timeout=300 interval=10 elapsed=0 csv_namespace="cert-manager-operator"
            while true; do
                local status
                status=$(oc get csv -n "$csv_namespace" -o jsonpath='{.items[0].status.phase}' 2>/dev/null || echo "NotFound")
                if [ "$status" = "Succeeded" ]; then
                    echo "cert-manager Operator CSV is Succeeded."
                    break
                fi
                if (( elapsed >= timeout )); then
                    echo "Timeout waiting for cert-manager Operator CSV to succeed."
                    exit 1
                fi
                sleep "${interval}"
                elapsed=$(( elapsed + interval ))
            done
        }

        wait_for_cert_manager_ready() {
            echo "Waiting for cert-manager components to be ready..."
            local deployments=(cert-manager cert-manager-cainjector cert-manager-webhook)
            for dep in "${deployments[@]}"; do
                echo "Waiting for deployment '$dep'..."
                if ! oc wait --for=condition=Available deployment/"$dep" -n cert-manager --timeout=300s; then
                    echo "Timeout waiting for deployment '$dep' to become available."
                    exit 1
                fi
            done
            echo "All cert-manager components are ready."
        }

        wait_for_kueue_controller_manager() {
            echo "Waiting for kueue Controller Manager deployment to reach Available status..."
            local namespace="openshift-kueue-operator"
            local deployment="kueue-controller-manager"
            local timeout=300
            local interval=10
            local elapsed=0

            while true; do
               # Get the 'Available' condition status from the deployment
               local available_status
               available_status=$(oc get deployment "${deployment}" -n "${namespace}" -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' 2>/dev/null || echo "NotFound")
               if [ "$available_status" = "True" ]; then
                    echo "Deployment '${deployment}' in namespace '${namespace}' is available."
                    break
               fi
               if (( elapsed >= timeout )); then
                    echo "Timeout waiting for deployment '${deployment}' to become available."
                    exit 1
               fi
               sleep "${interval}"
               elapsed=$(( elapsed + interval ))
            done
        }

        # Main execution flow
        main() {
            # Get Kueue commit id and build image variables.
            KUEUE_COMMIT_ID=$(get_kueue_commit_id)
            export KUEUE_IMAGE="quay.io/redhat-user-workloads/kueue-operator-tenant/kueue-0-11:${KUEUE_COMMIT_ID}-linux-x86-64"
            echo "Using Kueue Image: ${KUEUE_IMAGE}"

            echo "Current Git branch:"
            git branch --show-current

            echo "Latest Git commits:"
            git log --oneline -5

            echo "Git status:"
            git status

            export OPERATOR_IMAGE=$(get_operator_image)
            echo "Using Operator Image: ${OPERATOR_IMAGE}"

            wait_for_image "${OPERATOR_IMAGE}"

            echo "Proceeding with tests..."

            make deploy-cert-manager
            wait_for_cert_manager_crds
            wait_for_cert_manager_csv
            wait_for_cert_manager_ready

            make deploy-ocp
            wait_for_kueue_controller_manager

            # Run tests from the cloned repo
            TEMP_DIR=$(mktemp -d)
            git clone --depth 1 --branch release-0.11 https://github.com/openshift/kubernetes-sigs-kueue.git "${TEMP_DIR}"
            pushd "${TEMP_DIR}" > /dev/null
            KUEUE_NAMESPACE="openshift-kueue-operator" make -f Makefile-test-ocp.mk test-e2e-upstream-ocp
            popd > /dev/null
            rm -rf "${TEMP_DIR}"

            make undeploy-ocp
        }
        main
      from: kueue-operator-src
      resources:
        requests:
          cpu: 300m
          memory: 500Mi
zz_generated_metadata:
  branch: release-4.19
  org: openshift
  repo: kueue-operator
