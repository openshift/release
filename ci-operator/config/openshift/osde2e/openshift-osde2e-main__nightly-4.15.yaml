base_images:
  osde2e:
    name: osde2e
    namespace: ci
    tag: latest
releases:
  latest:
    candidate:
      product: ocp
      stream: nightly
      version: "4.15"
resources:
  '*':
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: rosa-classic-sts
  cron: 0 0 1 1 *
  steps:
    env:
      CONFIGS: rosa,sts,stage,e2e-suite
      SECRET_LOCATIONS: /usr/local/osde2e-common,/usr/local/osde2e-trt-credentials
      SKIP_DESTROY_CLUSTER: "true"
      SKIP_MUST_GATHER: "true"
    post:
    - chain: gather
    - ref: osde2e-cleanup
    test:
    - ref: osde2e-test
- as: conformance-rosa-classic-sts
  cron: 0 0 1 1 *
  steps:
    env:
      CONFIGS: rosa,sts,stage,blocking-suite
      OCP_TEST_SKIP_REGEX: should be scheduled on different nodes\|start all core
        operators\| Netpol NetworkPolicy between server and client should not allow
        access by TCP when a policy specifies only UDP\| OAuth server has the correct
        token and certificate fallback semantics\| The HAProxy router should expose
        prometheus metrics for a route\| Managed cluster should set requests but not
        limits\| oc basics can get version information from API\|CPU Partitioning
        cluster infrastructure should be configured correctly\|CPU Partitioning cluster
        platform workloads should be annotated correctly for Deployments\| Managed
        cluster should ensure platform components have\| users can manipulate groups\|
        oc basics can show correct whoami result\|  should be present on all masters
        and work\| oc builds complex build \| anonymous browsers should get a 403
        from\| when installed on the cluster shouldn't have failing rules evaluation\|
        when installed on the cluster should start and expose a secured proxy and
        unsecured metrics\|CPU Partitioning cluster platform workloads should be annotated
        correctly for DaemonSets\| when installed on the cluster should have a AlertmanagerReceiversNotConfigured
        alert in firing state\| oc builds complex build webhooks CRUD \| endpoint
        should be\| Managed cluster should ensure control plane pods do not run in\|
        oc tag should work when only imagestreams api is available\| Managed cluster
        should only include cluster daemonsets that have maxUnavailable or maxSurge
        update of 10 percent or maxUnavailable of 33 percent\|runs successfully for
        audit logs\| should have a valid severity label\| should have a runbook_url
        annotation if the alert is critical\| should have description and summary
        annotations\|API LBs follow /readyz of kube-apiserver and stop sending requests
        before server shutdowns for external clients\|CRDs for openshift.io should
        have a status in the CRD schema\|should create a pod with a tap interface\|should
        be present on all masters and work
      SECRET_LOCATIONS: /usr/local/osde2e-common,/usr/local/osde2e-trt-credentials
      SKIP_CLUSTER_HEALTH_CHECKS: "true"
      SKIP_DESTROY_CLUSTER: "true"
      SKIP_MUST_GATHER: "true"
    post:
    - chain: gather
    - ref: osde2e-cleanup
    pre:
    - ref: osde2e-provision
    test:
    - ref: osde2e-test
- as: osd-aws
  cron: 0 0 1 1 *
  steps:
    env:
      CONFIGS: aws,stage,e2e-suite
      SECRET_LOCATIONS: /usr/local/osde2e-common,/usr/local/osde2e-trt-credentials
      SKIP_DESTROY_CLUSTER: "true"
      SKIP_MUST_GATHER: "true"
    post:
    - chain: gather
    - ref: osde2e-cleanup
    test:
    - ref: osde2e-test
- as: conformance-osd-aws
  cron: 0 0 1 1 *
  steps:
    env:
      CONFIGS: aws,stage,blocking-suite
      OCP_TEST_SKIP_REGEX: Managed cluster should have same number of Machines and
        Nodes\|start all core operators\|Services should fail health check node port
        if there are only terminating endpoints\|Services should function for node-Service\|Services
        should function for client IP based session affinity\|Services should function
        for client IP based session affinity\|Pods should function for node-pod communication\|Netpol
        NetworkPolicy between server and client should enforce ingress policy allowing
        any port traffic to a server on a specific protocol\|Services should function
        for endpoint-Service\|Pods Extended Pod Container lifecycle evicted pods should
        be terminal\|Deployment should not disrupt a cloud load-balancer's connectivity
        during rollout\|Services should serve endpoints on same port and different
        protocol for internal traffic on Type LoadBalancer\|Services should be rejected
        for evicted pods\|when installed on the cluster should start and expose a
        secured proxy and unsecured metrics\|oc builds complex build webhooks CRUD\|oc
        basics can show correct whoami result\|OAuth server has the correct token
        and certificate fallback semantics\|oc basics can get version information
        from API\|when installed on the cluster should have a AlertmanagerReceiversNotConfigured
        alert in firing state\|CPU Partitioning cluster infrastructure should be configured
        correctly\|CPU Partitioning cluster platform workloads should be annotated
        correctly for Deployments\|Managed cluster should ensure platform components
        have\|well-known endpoint should be reachable\|Managed cluster should set
        requests but not limits\|users can manipulate groups\|Managed cluster should
        only include cluster daemonsets that have maxUnavailable or maxSurge update
        of 10 percent or maxUnavailable of 33 percent\|Managed cluster should ensure
        control plane pods do not run in best-effort QoS\|anonymous browsers should
        get a 403 from\|oc builds complex build start-build\|CPU Partitioning cluster
        platform workloads should be annotated correctly for DaemonSets\|oc tag should
        work when only imagestreams api is available\|The HAProxy router should expose
        prometheus metrics for a route\|Prometheus when installed on the cluster shouldn't
        have failing rules evaluation\|should be present on all masters and work\|oc
        adm must-gather runs successfully for audit logs\|should have description
        and summary annotations\|should have a valid severity label\|should have a
        runbook_url annotation if the alert is critical\|of kube-apiserver and stop
        sending requests before server shutdowns for external clients\|CRDs for openshift.io
        should have a status in the CRD schema\|to generate tokens that do not expire
        works as expected when using a token authorization flow
      SECRET_LOCATIONS: /usr/local/osde2e-common,/usr/local/osde2e-trt-credentials
      SKIP_CLUSTER_HEALTH_CHECKS: "true"
      SKIP_DESTROY_CLUSTER: "true"
      SKIP_MUST_GATHER: "true"
    post:
    - chain: gather
    - ref: osde2e-cleanup
    pre:
    - ref: osde2e-provision
    test:
    - ref: osde2e-test
- as: osd-gcp
  cron: 0 0 1 1 *
  steps:
    env:
      CONFIGS: gcp,stage,e2e-suite
      SECRET_LOCATIONS: /usr/local/osde2e-common,/usr/local/osde2e-trt-credentials
      SKIP_DESTROY_CLUSTER: "true"
      SKIP_MUST_GATHER: "true"
    post:
    - chain: gather
    - ref: osde2e-cleanup
    test:
    - ref: osde2e-test
- as: conformance-osd-gcp
  cron: 0 0 1 1 *
  steps:
    env:
      CONFIGS: gcp,stage,blocking-suite
      SECRET_LOCATIONS: /usr/local/osde2e-common,/usr/local/osde2e-trt-credentials
      SKIP_CLUSTER_HEALTH_CHECKS: "true"
      SKIP_DESTROY_CLUSTER: "true"
      SKIP_MUST_GATHER: "true"
    post:
    - chain: gather
    - ref: osde2e-cleanup
    pre:
    - ref: osde2e-provision
    test:
    - ref: osde2e-test
zz_generated_metadata:
  branch: main
  org: openshift
  repo: osde2e
  variant: nightly-4.15
