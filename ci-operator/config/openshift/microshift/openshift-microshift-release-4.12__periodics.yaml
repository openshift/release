base_images:
  cli:
    name: "4.12"
    namespace: ocp
    tag: cli
  libvirt-installer:
    name: "4.12"
    namespace: ocp
    tag: libvirt-installer
  test-bin:
    name: "4.12"
    namespace: ocp
    tag: tests
  ubi-minimal:
    name: ubi-minimal
    namespace: ocp
    tag: "8"
build_root:
  image_stream_tag:
    name: release
    namespace: openshift
    tag: rhel-8-release-golang-1.18-openshift-4.12
images:
- dockerfile_literal: |
    FROM libvirt-installer
    COPY validate-microshift /tmp/validate-microshift
  from: libvirt-installer
  inputs:
    src:
      paths:
      - destination_dir: .
        source_path: /go/src/github.com/openshift/microshift/validate-microshift
  to: microshift-validate
- dockerfile_literal: |
    FROM registry.ci.openshift.org/openshift/release:rhel-8-release-golang-1.18-openshift-4.12 as builder
    RUN dnf install --setopt=tsflags=nodocs -y \
        rpm-build glibc-static gcc selinux-policy-devel util-linux && \
        dnf clean all && \
        rm -rf /var/cache/dnf/*
    RUN ls -lA
    RUN make rpm
    FROM libvirt-installer
    USER root
    ENV HOME=/tmp/secret
    RUN dnf install -y jq && dnf clean all && rm -rf /var/cache/dnf/*
    ENV PAYLOAD_PATH=$HOME/payload
    WORKDIR $PAYLOAD_PATH
    COPY oc openshift-tests usr/bin/
    RUN chmod 755 usr/bin/oc && ln -rs usr/bin/oc usr/bin/kubectl
    COPY --from=builder /go/src/github.com/openshift/microshift/_output/rpmbuild/RPMS/*/*.rpm packages/
    RUN tar -cvf payload.tar . && chmod -R a+rw "${HOME}"
  inputs:
    cli:
      paths:
      - destination_dir: .
        source_path: /usr/bin/oc
    libvirt-installer:
      as:
      - libvirt-installer
    src:
      as:
      - registry.ci.openshift.org/openshift/release:rhel-8-release-golang-1.18-openshift-4.12
    test-bin:
      paths:
      - destination_dir: .
        source_path: /usr/bin/openshift-tests
  to: dependency-payload
- dockerfile_literal: |
    # build
    FROM ubi-minimal
    ENV YQ_URL=https://github.com/mikefarah/yq/releases/download/v4.26.1/yq_linux_amd64
    ENV YQ_HASH=9e35b817e7cdc358c1fcd8498f3872db169c3303b61645cc1faf972990f37582
    RUN echo -n "${YQ_HASH} -" > /tmp/sum.txt ; \
        if ! (curl -Ls "${YQ_URL}" | tee /tmp/yq | sha256sum -c /tmp/sum.txt &>/dev/null); then \
          echo "ERROR: Expected file at ${YQ_URL} to have checksum ${YQ_HASH} but instead got $(sha256sum </tmp/yq | cut -d' ' -f1)" ; \
          exit 1 ; \
        fi ; \
        chmod +x /tmp/yq && mv /tmp/yq /usr/bin/yq
  from: ubi-minimal
  to: yq-cli
- dockerfile_literal: |
    FROM src
    COPY yq /usr/bin/yq
    RUN yum install -y --nodocs python3-devel && \
        pip3 install pygithub GitPython && \
        dnf clean all && \
        rm -rf /var/cache/dnf/*
  from: src
  inputs:
    yq-cli:
      paths:
      - destination_dir: .
        source_path: /usr/bin/yq
  to: microshift-rebase
releases:
  arm64-latest:
    candidate:
      architecture: arm64
      product: ocp
      stream: nightly
      version: "4.12"
  latest:
    candidate:
      product: ocp
      stream: nightly
      version: "4.12"
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 800Mi
tests:
- as: copr-rpm-health-check
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-copr-install
- as: test-unit
  commands: make test-unit
  container:
    from: src
  cron: 0 0 * * *
- as: test-srpm
  commands: make srpm
  container:
    from: src
  cron: 0 0 * * *
- as: e2e-openshift-conformance-sig-api-machinery
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-openshift-conformance-sig-api-machinery
- as: e2e-openshift-conformance-sig-apps
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-openshift-conformance-sig-apps
- as: e2e-openshift-conformance-sig-arch
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-openshift-conformance-sig-arch
- as: e2e-openshift-conformance-sig-auth
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-openshift-conformance-sig-auth
- as: e2e-openshift-conformance-sig-cli
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-openshift-conformance-sig-cli
- as: e2e-openshift-conformance-sig-instrumentation
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-openshift-conformance-sig-instrumentation
- as: e2e-openshift-conformance-sig-network
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-openshift-conformance-sig-network
- as: e2e-openshift-conformance-sig-node
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-openshift-conformance-sig-node
- as: e2e-openshift-conformance-sig-scheduling
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-openshift-conformance-sig-scheduling
- as: e2e-openshift-conformance-sig-storage
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-openshift-conformance-sig-storage
- as: e2e-reboot
  cron: 0 0 * * *
  steps:
    cluster_profile: gcp
    workflow: openshift-microshift-e2e-reboot-tests
- as: rebase-on-nightlies
  cron: 0 5 * * 1-5
  steps:
    workflow: openshift-microshift-rebase
zz_generated_metadata:
  branch: release-4.12
  org: openshift
  repo: microshift
  variant: periodics
