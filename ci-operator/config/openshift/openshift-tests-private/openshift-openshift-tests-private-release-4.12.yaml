base_images:
  ci_tests-private-base:
    name: tests-private-base
    namespace: ci
    tag: "4.12"
  ci_tests-private-baseui:
    name: tests-private-baseui
    namespace: ci
    tag: "4.12"
  cli:
    name: "4.12"
    namespace: ocp
    tag: cli
  tools:
    name: "4.12"
    namespace: ocp
    tag: tools
  upi-installer:
    name: "4.12"
    namespace: ocp
    tag: upi-installer
binary_build_commands: make go-mod-tidy;make all
build_root:
  image_stream_tag:
    name: builder
    namespace: ocp
    tag: rhel-8-golang-1.19-openshift-4.12
images:
- dockerfile_literal: |
    FROM src AS builder
    FROM this-is-ignored-and-not-used
    COPY --from=builder /go/src/github.com/openshift/openshift-tests-private/pipeline/handleresult.py /usr/bin/
    COPY --from=quay.io/hypershift/hypershift-operator:latest usr/bin/hypershift /usr/bin/hypershift
    COPY --from=quay.io/openshifttest/oc-compliance:latest /tmp/oc-compliance /usr/bin/oc-compliance
    COPY --from=quay.io/openshifttest/openshift4-tools:v2 /tmp/OpenShift4-tools.tar /tmp/OpenShift4-tools.tar
    RUN set -x && \
        yum update -y && \
        PACKAGES="git gzip httpd-tools java-11-openjdk-headless openssh-clients skopeo util-linux zip" && \
        yum -y install --setopt=tsflags=nodocs $PACKAGES && \
        git config --system user.name openshift-tests-private && \
        git config --system user.email openshift-tests-private@redhat.com && \
        tar -C /opt -xf /tmp/OpenShift4-tools.tar && \
        pip3 install --upgrade setuptools pip && pip3 install dotmap minio python-openstackclient pyyaml requests && \
        sh -c 'echo -e "[azure-cli]\nname=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=0\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/azure-cli.repo' && \
        yum -y install --setopt=tsflags=nodocs --enablerepo=azure-cli azure-cli && \
        sh -c 'echo -e "[google-cloud-sdk]\nname=Google Cloud SDK\nbaseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64\nenabled=0\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg\n       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg" > /etc/yum.repos.d/google-cloud-sdk.repo' && \
        yum -y install --setopt=tsflags=nodocs --enablerepo=google-cloud-sdk google-cloud-sdk && \
        sh -c 'echo -e "[rhel8.7-baseos]\nname=rhel8.7-baseos\nbaseurl=http://download.eng.rdu.redhat.com/rhel-8/rel-eng/RHEL-8/latest-RHEL-8.7/compose/BaseOS/x86_64/os\nenabled=0\ngpgcheck=1" > /etc/yum.repos.d/rhel8.7-baseos.repo' && \
        yum -y --enablerepo=rhel8.7-baseos install sos && \
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
        unzip -q awscliv2.zip && ./aws/install -b /bin && \
        rm -rf ./aws awscliv2.zip && \
        chmod g+w /etc/passwd && \
        MIRRORURL=https://mirror2.openshift.com/pub/openshift-v4/x86_64/clients && \
        curl -skL ${MIRRORURL}/ocp/stable-4.12/openshift-client-linux.tar.gz -o openshift-client-linux.tar.gz && \
        tar -C /usr/bin/ -xzvf openshift-client-linux.tar.gz && rm -f openshift-client-linux.tar.gz && \
        curl -skL ${MIRRORURL}/ocp/stable-4.12/opm-linux.tar.gz -o opm-linux.tar.gz  && \
        tar -C /usr/bin/ -xzvf opm-linux.tar.gz && rm -f opm-linux.tar.gz && \
        curl -skL ${MIRRORURL}/ocp/stable-4.12/oc-mirror.tar.gz -o oc-mirror.tar.gz && \
        tar -C /usr/bin/ -xzvf oc-mirror.tar.gz && chmod +x /usr/bin/oc-mirror && rm -f oc-mirror.tar.gz && \
        curl -skL ${MIRRORURL}/operator-sdk/latest/operator-sdk-linux-x86_64.tar.gz -o opt-sdk.tar.gz && \
        tar -C ./ -xzvf opt-sdk.tar.gz && mv ./x86_64/operator-sdk /usr/bin && rm -fr opt-sdk.tar.gz ./x86_64 && \
        curl -skL ${MIRRORURL}/rosa/latest/rosa-linux.tar.gz -o rosa.tar.gz && \
        tar -C /usr/bin/ -xf rosa.tar.gz && chmod 755 /usr/bin/rosa && rosa version && rm -f rosa.tar.gz && \
        curl -skL https://github.com/vmware/govmomi/releases/latest/download/govc_Linux_x86_64.tar.gz -o govc_Linux_x86_64.tar.gz && \
        tar -C /usr/bin/ -xvf govc_Linux_x86_64.tar.gz govc && rm -f govc_Linux_x86_64.tar.gz && \
        yum clean all && \
        rm -rf /usr/bin/oc /usr/bin/kubectl /root/.config/gcloud /var/cache/yum/* /tmp/*
  from: tools
  inputs:
    src:
      as:
      - src
  to: tests-private-base
- dockerfile_literal: |
    FROM this-is-ignored-and-not-used
    ARG YQ_VERSION="v4.30.8"
    RUN set -x && \
        curl --silent --location https://rpm.nodesource.com/setup_lts.x | bash - && \
        curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo && \
        PACKAGES="alsa-lib GConf2 gtk2-devel gtk3-devel httpd-tools libnotify-devel libXScrnSaver nodejs nss openssh-clients xorg-x11-server-Xvfb yarn" && \
        yum -y install --setopt=tsflags=nodocs $PACKAGES && \
        declare -A YQ_HASH=([amd64]='6c911103e0dcc54e2ba07e767d2d62bcfc77452b39ebaee45b1c46f062f4fd26' \
                            [arm64]='95092e8b5332890c46689679b5e4360d96873c025ad8bafd961688f28ea434c7') && \
        arch="$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/')" && \
        YQ_URI="https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_${arch}" && \
        curl -sSL "${YQ_URI}" -o /usr/local/bin/yq && \
        echo "${YQ_HASH[$arch]} */usr/local/bin/yq" | sha256sum --strict --status --check && \
        chmod +x /usr/local/bin/yq && \
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm && \
        yum install -y ./google-chrome-stable_current_*.rpm && rm -f ./google-chrome-stable_current_*.rpm && \
        yum clean all && rm -rf /var/cache/yum/* /tmp/*
  from: tools
  to: tests-private-baseui
- dockerfile_literal: |
    FROM bin AS bin
    FROM this-is-ignored-and-not-used
    COPY --from=bin /go/src/github.com/openshift/openshift-tests-private/bin/extended-platform-tests /usr/bin/
  from: ci_tests-private-base
  inputs:
    bin:
      as:
      - bin
  to: tests-private
- dockerfile_literal: |
    FROM src AS builder
    FROM this-is-ignored-and-not-used
    WORKDIR /go/src/github.com/openshift/openshift-tests-private
    COPY --from=builder /go/src/github.com/openshift/openshift-tests-private /go/src/github.com/openshift/openshift-tests-private
  from: ci_tests-private-baseui
  inputs:
    src:
      as:
      - src
  to: tests-private-ui
- dockerfile_literal: |
    FROM bin AS builder
    FROM this-is-ignored-and-not-used
    WORKDIR /go/src/github.com/openshift/openshift-tests-private
    COPY --from=builder /go/src/github.com/openshift/openshift-tests-private /go/src/github.com/openshift/openshift-tests-private
    RUN chmod g+w /go/src/github.com/openshift/openshift-tests-private && \
        cp --force /go/src/github.com/openshift/openshift-tests-private/bin/extended-platform-tests /usr/bin/ && \
        rm -rf /usr/bin/oc /usr/bin/kubectl
  from: ci_tests-private-base
  inputs:
    bin:
      as:
      - bin
  to: tests-private-newpr
promotion:
  to:
  - excluded_images:
    - tests-private-ui
    - tests-private-newpr
    namespace: ci
    tag: "4.12"
releases:
  latest:
    candidate:
      product: ocp
      stream: nightly
      version: "4.12"
resources:
  '*':
    limits:
      memory: 8Gi
    requests:
      cpu: "1"
      memory: 4Gi
  bin:
    requests:
      cpu: "2"
      memory: 8Gi
  e2e-aws:
    requests:
      cpu: "4"
      memory: 4Gi
test_binary_build_commands: make test
tests:
- as: title-check
  commands: make name-check
  container:
    from: src
- as: bindata-check
  commands: |
    make update
    ret=0 && git diff --quiet test/extended/testdata/bindata.go || ret=$?
    if [ $ret -ne 0 ]; then
        echo "bindata is not correct updated by your PR, please refer to the following and re-execute \"make update\" on your terminal and then update PR"
        echo "---"
        git diff test/extended/testdata/bindata.go || true
        echo "---"
        exit 1
    fi
  container:
    from: src
- as: code-check
  commands: |
    unset GOFLAGS
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.50.1 2> /dev/null
    which golangci-lint
    make check-code
  container:
    from: src
- as: e2e-aws
  optional: true
  skip_if_only_changed: (frontend/)|(images/)|(pipeline/)|(test/extended/(disaster_recovery|hypershift|kata|psap/hypernto|winc|testdata)/)
  steps:
    cluster_profile: aws
    test:
    - ref: enable-qe-catalogsource
    - as: pr-test
      cli: latest
      commands: |
        oc version
        export HOME="/tmp/home"
        mkdir -p "${HOME}"

        curl -s -k https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-256.0.0-linux-x86_64.tar.gz -o gcsl.tar.gz && tar -C ${HOME} -xzf gcsl.tar.gz && rm -fr gcsl.tar.gz
        mkdir -p ${HOME}/gcloudconfig && export CLOUDSDK_CONFIG=${HOME}/gcloudconfig && export PATH=$PATH:${HOME}/google-cloud-sdk/bin

        export PATH=$PATH:/opt/OpenShift4-tools

        if ! which kubectl; then
          ln -s "$(which oc)" ${HOME}/kubectl
        fi

        python3 ./hack/pr.py
      from: tests-private-newpr
      resources:
        limits:
          memory: 6Gi
        requests:
          cpu: "1"
          memory: 1Gi
    workflow: ipi-aws
- as: e2e-console
  optional: true
  run_if_changed: frontend/tests/.*.ts
  steps:
    cluster_profile: gcp
    test:
    - ref: enable-qe-catalogsource
    - as: console-test
      cli: latest
      commands: python3 ./frontend/hack/console_pr.py
      from: tests-private-ui
      resources:
        requests:
          cpu: "2"
          memory: 4Gi
      timeout: 2h0m0s
    workflow: ipi-gcp
- as: debug-disasterrecovery-aws-ipi
  optional: true
  run_if_changed: test/extended/disaster_recovery/
  steps:
    cluster_profile: aws-qe
    env:
      BASE_DOMAIN: qe.devcluster.openshift.com
      FORCE_SUCCESS_EXIT: "no"
    test:
    - chain: openshift-e2e-test-qe-disasterrecovery-sanity
    workflow: cucushift-installer-rehearse-aws-ipi-private
- as: debug-winc-aws-ipi
  optional: true
  run_if_changed: test/extended/winc/
  steps:
    cluster_profile: aws-qe
    env:
      BASE_DOMAIN: qe.devcluster.openshift.com
      FORCE_SUCCESS_EXIT: "no"
      TEST_FILTERS: ~ChkUpgrade&;~ConnectedOnly&;Smokerun&
      TEST_SCENARIOS: Windows_Containers
      TEST_TIMEOUT: "50"
    test:
    - ref: openshift-extended-test
    workflow: cucushift-installer-rehearse-aws-ipi-ovn-winc
- as: debug-winc-gcp-ipi
  optional: true
  run_if_changed: test/extended/winc/
  steps:
    cluster_profile: gcp-qe
    env:
      FORCE_SUCCESS_EXIT: "no"
      TEST_FILTERS: ~ChkUpgrade&;~ConnectedOnly&;Smokerun&
      TEST_SCENARIOS: Windows_Containers
      TEST_TIMEOUT: "50"
    test:
    - ref: openshift-extended-test
    workflow: cucushift-installer-rehearse-gcp-ipi-ovn-winc
- as: debug-winc-azure-ipi
  optional: true
  run_if_changed: test/extended/winc/
  steps:
    cluster_profile: azure-qe
    env:
      BASE_DOMAIN: qe.azure.devcluster.openshift.com
      FORCE_SUCCESS_EXIT: "no"
      TEST_FILTERS: ~ChkUpgrade&;~ConnectedOnly&;Smokerun&
      TEST_SCENARIOS: Windows_Containers
      TEST_TIMEOUT: "50"
    test:
    - ref: openshift-extended-test
    workflow: cucushift-installer-rehearse-azure-ipi-ovn-winc
zz_generated_metadata:
  branch: release-4.12
  org: openshift
  repo: openshift-tests-private
