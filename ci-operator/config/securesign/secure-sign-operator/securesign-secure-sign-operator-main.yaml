base_images:
  cli:
    name: "4.14"
    namespace: ocp
    tag: cli
build_root:
  image_stream_tag:
    name: release
    namespace: openshift
    tag: golang-1.21
images:
- context_dir: .
  dockerfile_path: Dockerfile
  from: src
  to: securesign-operator
- dockerfile_literal: |
    FROM src
    COPY oc /usr/bin/oc
  from: src
  inputs:
    cli:
      paths:
      - destination_dir: .
        source_path: /usr/bin/oc
  to: src-cli
operator:
  bundles:
  - as: securesign-bundle
    context_dir: .
    dockerfile_path: bundle.Dockerfile
  substitutions:
  - pullspec: registry.redhat.io/rhtas/rhtas-rhel9-operator.*
    with: pipeline:securesign-operator
releases:
  latest:
    candidate:
      product: ocp
      stream: nightly
      version: "4.14"
resources:
  '*':
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: tas-operator-e2e
  cluster_claim:
    architecture: amd64
    cloud: aws
    owner: openshift-ci
    product: ocp
    timeout: 3h0m0s
    version: "4.14"
  steps:
    test:
    - as: install
      cli: latest
      commands: |
        set -x
        cd /go/src/github.com/securesign/secure-sign-operator
        make dev-images
        cat > /tmp/image_config.patch <<EOF
        {"spec": {"config":{"env": [
        {"name": "TRILLIAN_LOG_SIGNER_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "TrillianLogSignerImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "TRILLIAN_LOG_SERVER_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "TrillianServerImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "TRILLIAN_DB_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "TrillianDbImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "FULCIO_SERVER_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "FulcioServerImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "REKOR_REDIS_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "RekorRedisImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "REKOR_SERVER_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "RekorServerImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "REKOR_SEARCH_UI_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "RekorSearchUiImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "BACKFILL_REDIS_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "BackfillRedisImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "TUF_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "TufImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "CTLOG_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "CTLogImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "CLIENT_SERVER_CG_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "ClientServerImage_cg" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "CLIENT_SERVER_RE_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "ClientServerImage_re" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "CLIENT_SERVER_F_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "ClientServerImage_f" | grep -o '[^[:space:]]*@sha.*' || echo "null")},
        {"name": "SEGMENT_BACKUP_JOB_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "SegmentBackupImage" | grep -o '[^[:space:]]*@sha.*')},
        {"name": "TIMESTAMP_AUTHORITY_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "TimestampAuthorityImage" | grep -o '[^[:space:]]*@sha.*' || echo "null")},
        {"name": "CREATE_TREE_IMAGE", "value": $(cat internal/controller/constants/images.go | grep "CreateTreeImage" | grep -o '[^[:space:]]*@sha.*' || echo "null")}
        ]}}}
        EOF
        cat /tmp/image_config.patch
        oc create ns openshift-rhtas-operator
        make operator-sdk
        ./bin/operator-sdk run bundle -n openshift-rhtas-operator "$OO_BUNDLE" --timeout 5m0s
        oc get subscription -n openshift-rhtas-operator -o name | xargs oc patch --type=merge -n openshift-rhtas-operator --patch-file /tmp/image_config.patch
        sleep 5
        oc get deployments -n openshift-rhtas-operator -o yaml
        oc wait --for condition=Available -n openshift-rhtas-operator deployment rhtas-operator-controller-manager

         # install RH SSO
        oc create -k ci/keycloak/operator/base
        until [ ! -z "$(oc get pod -l name=rhsso-operator -n keycloak-system 2>/dev/null)" ]
        do
          echo "Waiting for rhsso-operator operator. Pods in keycloak-system namespace:"
          oc get pods -n keycloak-system
          sleep 10
        done
        oc create --kustomize ci/keycloak/resources/base
        until [[ $( oc get keycloak keycloak -o jsonpath='{.status.ready}' -n keycloak-system 2>/dev/null) == "true" ]]
        do
          printf "Waiting for keycloak deployment. \n Keycloak ready: %s\n" $(oc get keycloak keycloak -o jsonpath='{.status.ready}' -n keycloak-system)
          sleep 10
        done

        # push test image
        oc create -n default -f - << EOF
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: test-image-push
        spec:
          template:
            spec:
              containers:
              - name: buildah
                image: quay.io/buildah/stable
                command: ["/bin/sh", "-c"]
                args:
                - |
                    buildah pull alpine:latest
                    buildah tag alpine:latest ttl.sh/$PROW_JOB_ID:1h
                    buildah push ttl.sh/$PROW_JOB_ID:1h
                securityContext:
                    privileged: true
              restartPolicy: Never
          backoffLimit: 4 # Defines the number of retries before considering the Job failed.
        EOF
        oc wait -n default --for=condition=complete job/test-image-push --timeout=5m
      dependencies:
      - env: OO_BUNDLE
        name: securesign-bundle
      from: src-cli
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
    - as: test
      cli: latest
      commands: |
        set -x
        openssl s_client -connect $(oc get route -n keycloak-system keycloak -o jsonpath='{.status.ingress[0].host}'):443 -showcerts </dev/null 2>/dev/null|openssl x509 -outform PEM > cert.crt
        export  SSL_CERT_FILE=$(pwd)/cert.crt
        export OIDC_ISSUER_URL=https://$(oc get route -n keycloak-system keycloak -o jsonpath='{.status.ingress[0].host}')/auth/realms/trusted-artifact-signer
        export TEST_IMAGE=ttl.sh/$PROW_JOB_ID:1h
        go install github.com/sigstore/cosign/v2/cmd/cosign@v2.2.4
        export OPENSHIFT=true
        make test-e2e
      from: src
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
    workflow: generic-claim
zz_generated_metadata:
  branch: main
  org: securesign
  repo: secure-sign-operator
