base_images:
  ansible-operator:
    name: "4.6"
    namespace: ocp
    tag: ansible-operator
  base:
    name: "4.6"
    namespace: ocp
    tag: base
  ocp_4.4_base:
    name: "4.4"
    namespace: ocp
    tag: base
  ocp_4.6_ansible-operator:
    name: "4.6"
    namespace: ocp
    tag: ansible-operator
  ocp_4.6_cli:
    name: "4.6"
    namespace: ocp
    tag: cli
  ocp_4.6_metering-helm:
    name: "4.6"
    namespace: ocp
    tag: metering-helm
  openshift_release_golang-1.13:
    name: release
    namespace: openshift
    tag: golang-1.13
build_root:
  project_image:
    context_dir: .
    dockerfile_path: Dockerfile.src
images:
- dockerfile_path: Dockerfile.reporting-operator.okd
  from: base
  to: metering-reporting-operator
- dockerfile_path: Dockerfile.metering-ansible-operator
  from: ansible-operator
  inputs:
    ocp_4.4_base:
      as:
      - registry.svc.ci.openshift.org/ocp/4.4:base
      paths: null
    ocp_4.6_ansible-operator:
      as:
      - registry.svc.ci.openshift.org/ocp/4.6:ansible-operator
      paths: null
    ocp_4.6_cli:
      as:
      - registry.svc.ci.openshift.org/ocp/4.6:cli
      paths: null
    ocp_4.6_metering-helm:
      as:
      - registry.svc.ci.openshift.org/ocp/4.6:metering-helm
      paths: null
  to: metering-ansible-operator
- dockerfile_path: olm_deploy/Dockerfile.registry
  from: base
  inputs:
    openshift_release_golang-1.13:
      as:
      - registry.svc.ci.openshift.org/openshift/release:golang-1.13
      paths: null
  to: metering-ansible-operator-registry
promotion:
  name: "4.6"
  namespace: ocp
resources:
  '*':
    requests:
      cpu: 100m
      memory: 200Mi
tag_specification:
  name: "4.6"
  namespace: ocp
tests:
- artifact_dir: /tmp/artifacts
  as: unit
  commands: make unit TEST_OUTPUT_DIR=/tmp/artifacts
  container:
    from: src
- as: verify
  commands: |
    set -x
    set -e
    # (chance): Hacks to allow us write access to our source files since
    # they're 664 in the image and owned by root:root, and we get a random UID
    # in Openshift pods which means we don't have write permissions.

    # create a copy of the source so we can modify the files.
    export GOPATH=/tmp/go
    mkdir -p $GOPATH/src/github.com/kube-reporting/
    cp -r /go/src/github.com/kube-reporting/metering-operator/ $GOPATH/src/github.com/kube-reporting/metering-operator
    cd $GOPATH/src/github.com/kube-reporting/metering-operator

    # Run the actual tests that nothing in the changes after re-generating
    # files. This ensures generated files aren't modified directly.
    make verify
  container:
    from: src
- as: vendor
  commands: make vendor && git diff --exit-code
  container:
    from: src
- as: metering-e2e-aws
  commands: |
    set -x
    # Increase the size of the machines so that there are machines large enough
    # to run Presto, and the full metering stack.
    kubectl -n openshift-machine-api get machinesets -o name | grep worker | cut -d/ -f2 | xargs -I{} kubectl -n openshift-machine-api scale machineset {} --replicas 3

    # Note: re-enable upgrade testing once CRD + apiserver issues have been dealt with
    # TEST_OUTPUT_PATH=/tmp/artifacts/metering_test_output/upgrade EXTRA_TEST_FLAGS="-run TestMeteringUpgrades" make e2e

    TEST_OUTPUT_PATH=/tmp/artifacts/metering_test_output/e2e EXTRA_TEST_FLAGS="-run TestManualMeteringInstall" make e2e
  openshift_installer_src:
    cluster_profile: aws
zz_generated_metadata:
  branch: master
  org: kube-reporting
  repo: metering-operator
