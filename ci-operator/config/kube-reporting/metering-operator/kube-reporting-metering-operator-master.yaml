base_images:
  ansible-operator:
    name: "4.8"
    namespace: ocp
    tag: ansible-operator
  base:
    name: "4.8"
    namespace: ocp
    tag: base
  ocp_4.4_base:
    name: "4.4"
    namespace: ocp
    tag: base
  ocp_4.6_cli:
    name: "4.8"
    namespace: ocp
    tag: cli
  ocp_4.6_metering-helm:
    name: "4.8"
    namespace: ocp
    tag: metering-helm
  ocp_4.7_cli:
    name: "4.8"
    namespace: ocp
    tag: cli
  ocp_4.7_metering-helm:
    name: "4.8"
    namespace: ocp
    tag: metering-helm
  ocp_4.8_cli:
    name: "4.8"
    namespace: ocp
    tag: cli
  ocp_4.8_metering-helm:
    name: "4.8"
    namespace: ocp
    tag: metering-helm
  ocp_builder_rhel-8-golang-1.15-openshift-4.6:
    name: builder
    namespace: ocp
    tag: rhel-8-golang-1.15-openshift-4.6
  ocp_builder_rhel-8-golang-1.15-openshift-4.7:
    name: builder
    namespace: ocp
    tag: rhel-8-golang-1.15-openshift-4.7
  ocp_builder_rhel-8-golang-1.15-openshift-4.8:
    name: builder
    namespace: ocp
    tag: rhel-8-golang-1.15-openshift-4.8
  ocp_builder_rhel-8-golang-openshift-4.6:
    name: builder
    namespace: ocp
    tag: rhel-8-golang-openshift-4.6
build_root:
  project_image:
    context_dir: .
    dockerfile_path: Dockerfile.src
images:
- dockerfile_path: Dockerfile.reporting-operator.rhel
  from: base
  inputs:
    ocp_builder_rhel-8-golang-1.15-openshift-4.8:
      as:
      - registry.ci.openshift.org/ocp/builder:rhel-8-golang-1.15-openshift-4.8
  to: metering-reporting-operator
- dockerfile_path: Dockerfile.metering-ansible-operator.rhel8
  from: ansible-operator
  inputs:
    ocp_4.8_cli:
      as:
      - registry.ci.openshift.org/ocp/4.8:cli
    ocp_4.8_metering-helm:
      as:
      - registry.ci.openshift.org/ocp/4.8:metering-helm
  to: metering-ansible-operator
operator:
  bundles:
  - dockerfile_path: Dockerfile.bundle
  substitutions:
  - pullspec: quay.io/openshift/origin-ghostunnel:4.7
    with: stable:ghostunnel
  - pullspec: quay.io/openshift/origin-metering-ansible-operator:4.7
    with: pipeline:metering-ansible-operator
  - pullspec: quay.io/openshift/origin-metering-hadoop:4.7
    with: stable:metering-hadoop
  - pullspec: quay.io/openshift/origin-metering-hive:4.7
    with: stable:metering-hive
  - pullspec: quay.io/openshift/origin-metering-presto:4.7
    with: stable:metering-presto
  - pullspec: quay.io/openshift/origin-metering-reporting-operator:4.7
    with: pipeline:metering-reporting-operator
promotion:
  name: "4.8"
  namespace: ocp
resources:
  '*':
    requests:
      cpu: 100m
      memory: 200Mi
tag_specification:
  name: "4.8"
  namespace: ocp
tests:
- artifact_dir: /tmp/artifacts
  as: unit
  commands: make unit TEST_OUTPUT_DIR=${ARTIFACT_DIR}
  container:
    from: src
- artifact_dir: /tmp/artifacts
  as: verify
  commands: |
    set -x
    set -e
    # (chance): Hacks to allow us write access to our source files since
    # they're 664 in the image and owned by root:root, and we get a random UID
    # in Openshift pods which means we don't have write permissions.

    # create a copy of the source so we can modify the files.
    export GOPATH=/tmp/go
    mkdir -p $GOPATH/src/github.com/kube-reporting/
    cp -r /go/src/github.com/kube-reporting/metering-operator/ $GOPATH/src/github.com/kube-reporting/metering-operator
    cd $GOPATH/src/github.com/kube-reporting/metering-operator

    # Run the actual tests that nothing in the changes after re-generating
    # files. This ensures generated files aren't modified directly.
    make verify
  container:
    from: src
- artifact_dir: /tmp/artifacts
  as: vendor
  commands: make vendor && git diff --exit-code
  container:
    from: src
- artifact_dir: /tmp/artifacts
  as: metering-e2e-aws
  steps:
    cluster_profile: aws
    test:
    - as: e2e
      commands: |
        set -x
        # Patch the default MachineSet instance size (typically m5.large) to m5.xlarge post-install
        # as the metering stack is resource hungry.
        kubectl -n openshift-machine-api get machinesets --no-headers | awk '{ print $1 }' | xargs -I{} kubectl -n openshift-machine-api patch machineset {} --type json -p '[{"op": "replace", "path": "/spec/template/spec/providerSpec/value/instanceType", "value": "m5.xlarge"}]'

        METERING_ANSIBLE_OPERATOR_INDEX_IMAGE=${OO_INDEX} TEST_ENABLE_MACHINE_AUTOSCALING="true" TEST_OUTPUT_PATH=${ARTIFACT_DIR}/e2e EXTRA_TEST_FLAGS="-run TestManualMeteringInstall" make e2e
      dependencies:
      - env: OO_INDEX
        name: ci-index
      from: src
      resources:
        requests:
          cpu: 500m
          memory: 500Mi
    workflow: ipi-aws
- artifact_dir: /tmp/artifacts
  as: metering-upgrade-aws
  steps:
    cluster_profile: aws
    test:
    - as: e2e
      commands: |
        set -x

        # Patch the default MachineSet instance size (typically m5.large) to m5.xlarge post-install
        # as the metering stack is resource hungry.
        kubectl -n openshift-machine-api get machinesets --no-headers | awk '{ print $1 }' | xargs -I{} kubectl -n openshift-machine-api patch machineset {} --type json -p '[{"op": "replace", "path": "/spec/template/spec/providerSpec/value/instanceType", "value": "m5.xlarge"}]'

        METERING_ANSIBLE_OPERATOR_INDEX_IMAGE=${OO_INDEX} TEST_ENABLE_MACHINE_AUTOSCALING="true" TEST_OUTPUT_PATH=${ARTIFACT_DIR}/upgrade make e2e-upgrade
      dependencies:
      - env: OO_INDEX
        name: ci-index
      from: src
      resources:
        requests:
          cpu: 500m
          memory: 500Mi
    workflow: ipi-aws
zz_generated_metadata:
  branch: master
  org: kube-reporting
  repo: metering-operator
