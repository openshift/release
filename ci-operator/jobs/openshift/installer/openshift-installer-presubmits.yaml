presubmits:
  openshift/installer:
  - agent: kubernetes
    always_run: true
    branches:
    - master
    context: ci/prow/unit
    decorate: true
    name: pull-ci-openshift-installer-unit
    rerun_command: /test unit
    skip_cloning: true
    spec:
      containers:
      - args:
        - --artifact-dir=$(ARTIFACTS)
        - --target=unit
        command:
        - ci-operator
        env:
        - name: CONFIG_SPEC
          valueFrom:
            configMapKeyRef:
              key: master.yaml
              name: ci-operator-openshift-installer
        image: ci-operator:latest
        name: test
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 10m
      serviceAccountName: ci-operator
    trigger: ((?m)^/test( all| unit),?(\s+|$))
  - agent: kubernetes
    always_run: false
    branches:
    - master
    context: ci/prow/e2e-aws
    decorate: true
    name: pull-ci-openshift-installer-e2e-aws
    rerun_command: /test e2e-aws
    run_if_changed: ^([^D]|D(D|oD|ocD|ocuD|ocum(D|e(D|n(D|t(D|aD|atD|atiD|atioD)))))*([^Do]|o[^Dc]|oc[^Du]|ocu[^Dm]|ocum([^De]|e([^Dn]|n([^Dt]|t([^Da]|a[^Dt]|at[^Di]|ati[^Do]|atio[^Dn]))))))*(D(D|oD|ocD|ocuD|ocum(D|e(D|n(D|t(D|aD|atD|atiD|atioD)))))*(o|oc|ocu|ocum(e(n(t(a|at|ati|atio)?)?)?)?)?)?$
    skip_cloning: true
    spec:
      containers:
      - command:
        - ci-operator
        - --artifact-dir=$(ARTIFACTS)
        - --secret-dir=/usr/local/e2e-aws-cluster-profile
        - --template=/usr/local/e2e-aws
        - --target=e2e-aws
        - --give-pr-author-access-to-namespace
        env:
        - name: JOB_NAME_SAFE
          value: e2e-aws
        - name: CLUSTER_TYPE
          value: aws
        - name: CONFIG_SPEC
          valueFrom:
            configMapKeyRef:
              key: master.yaml
              name: ci-operator-openshift-installer
        - name: TEST_COMMAND
          value: TEST_FOCUS='Secrets should be consumable from pods in volume with
            defaultMode set' run-tests
        image: ci-operator:latest
        name: test
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /usr/local/e2e-aws
          name: job-definition
          subPath: cluster-launch-installer-e2e.yaml
        - mountPath: /usr/local/e2e-aws-cluster-profile
          name: cluster-profile
      serviceAccountName: ci-operator
      volumes:
      - configMap:
          name: prow-job-cluster-launch-installer-e2e
        name: job-definition
      - name: cluster-profile
        projected:
          sources:
          - secret:
              name: cluster-secrets-aws
          - configMap:
              name: cluster-profile-aws
    trigger: ((?m)^/test( all| e2e-aws),?(\s+|$))
  - agent: kubernetes
    always_run: false
    branches:
    - master
    context: ci/prow/e2e-aws-smoke
    decorate: true
    name: pull-ci-openshift-installer-e2e-aws-smoke
    rerun_command: /test e2e-aws-smoke
    run_if_changed: ^([^D]|D(D|oD|ocD|ocuD|ocum(D|e(D|n(D|t(D|aD|atD|atiD|atioD)))))*([^Do]|o[^Dc]|oc[^Du]|ocu[^Dm]|ocum([^De]|e([^Dn]|n([^Dt]|t([^Da]|a[^Dt]|at[^Di]|ati[^Do]|atio[^Dn]))))))*(D(D|oD|ocD|ocuD|ocum(D|e(D|n(D|t(D|aD|atD|atiD|atioD)))))*(o|oc|ocu|ocum(e(n(t(a|at|ati|atio)?)?)?)?)?)?$
    skip_cloning: true
    spec:
      containers:
      - command:
        - ci-operator
        - --artifact-dir=$(ARTIFACTS)
        - --secret-dir=/usr/local/e2e-aws-smoke-cluster-profile
        - --template=/usr/local/e2e-aws-smoke
        - --target=e2e-aws-smoke
        - --give-pr-author-access-to-namespace
        env:
        - name: JOB_NAME_SAFE
          value: e2e-aws-smoke
        - name: CLUSTER_TYPE
          value: aws
        - name: CONFIG_SPEC
          valueFrom:
            configMapKeyRef:
              key: master.yaml
              name: ci-operator-openshift-installer
        image: ci-operator:latest
        name: test
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /usr/local/e2e-aws-smoke
          name: job-definition
          subPath: cluster-launch-installer-e2e-smoke.yaml
        - mountPath: /usr/local/e2e-aws-smoke-cluster-profile
          name: cluster-profile
      serviceAccountName: ci-operator
      volumes:
      - configMap:
          name: prow-job-cluster-launch-installer-e2e-smoke
        name: job-definition
      - name: cluster-profile
        projected:
          sources:
          - secret:
              name: cluster-secrets-aws
          - configMap:
              name: cluster-profile-aws
    trigger: ((?m)^/test( all| e2e-aws-smoke),?(\s+|$))
  - agent: kubernetes
    always_run: false
    branches:
    - master
    context: ci/prow/e2e-aws-all
    decorate: true
    name: pull-ci-openshift-installer-e2e-aws-all
    rerun_command: /test e2e-aws-all
    skip_cloning: true
    spec:
      containers:
      - command:
        - ci-operator
        - --artifact-dir=$(ARTIFACTS)
        - --secret-dir=/usr/local/e2e-aws-all-cluster-profile
        - --template=/usr/local/e2e-aws-all
        - --target=e2e-aws-all
        - --give-pr-author-access-to-namespace
        env:
        - name: JOB_NAME_SAFE
          value: e2e-aws-all
        - name: CLUSTER_TYPE
          value: aws
        - name: CONFIG_SPEC
          valueFrom:
            configMapKeyRef:
              key: master.yaml
              name: ci-operator-openshift-installer
        - name: TEST_COMMAND
          value: TEST_FOCUS='Suite:openshift/conformance/parallel' TEST_FOCUS_SERIAL='Suite:openshift/conformance/serial'
            run-tests
        image: ci-operator:latest
        name: test
        resources:
          limits:
            cpu: 500m
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /usr/local/e2e-aws-all
          name: job-definition
          subPath: cluster-launch-installer-e2e.yaml
        - mountPath: /usr/local/e2e-aws-all-cluster-profile
          name: cluster-profile
      serviceAccountName: ci-operator
      volumes:
      - configMap:
          name: prow-job-cluster-launch-installer-e2e
        name: job-definition
      - name: cluster-profile
        projected:
          sources:
          - secret:
              name: cluster-secrets-aws
          - configMap:
              name: cluster-profile-aws
    trigger: ((?m)^/test( e2e-aws-all),?(\s+|$))
  - agent: kubernetes
    always_run: true
    context: ci/prow/yaml-lint
    decorate: true
    name: pull-ci-openshift-installer-yaml-lint
    rerun_command: /test yaml-lint
    spec:
      containers:
      - args:
        - ./hack/yaml-lint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: quay.io/coreos/yamllint
        name: ""
        resources: {}
    trigger: (?m)^/test yaml-lint
  - agent: kubernetes
    always_run: true
    context: ci/prow/tf-lint
    decorate: true
    name: pull-ci-openshift-installer-tf-lint
    rerun_command: /test tf-lint
    spec:
      containers:
      - args:
        - ./hack/tf-lint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: quay.io/coreos/tflint
        name: ""
        resources: {}
    trigger: (?m)^/test tf-lint
  - agent: kubernetes
    always_run: true
    context: ci/prow/shellcheck
    decorate: true
    name: pull-ci-openshift-installer-shellcheck
    rerun_command: /test shellcheck
    spec:
      containers:
      - args:
        - ./hack/shellcheck.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: quay.io/coreos/shellcheck-alpine:v0.5.0
        name: ""
        resources: {}
    trigger: (?m)^/test shellcheck
  - agent: kubernetes
    always_run: true
    context: ci/prow/tf-fmt
    decorate: true
    name: pull-ci-openshift-installer-tf-fmt
    rerun_command: /test tf-fmt
    spec:
      containers:
      - args:
        - ./hack/tf-fmt.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: quay.io/coreos/terraform-alpine:v0.11.8
        name: ""
        resources: {}
    trigger: ((?m)^/test( all| tf-fmt),?(\s+|$))
  - agent: kubernetes
    always_run: true
    context: ci/prow/build-tarball
    decorate: true
    name: pull-ci-openshift-installer-bazel-build-tarball
    rerun_command: /test build-tarball
    spec:
      containers:
      - args:
        - ./hack/test-bazel-build-tarball.sh
        - --action_env=HOME=/tmp
        command:
        - sh
        env:
        - name: HOME
          value: /tmp
        - name: IS_CONTAINER
          value: "TRUE"
        - name: USER
          value: bazel
        image: quay.io/coreos/tectonic-builder:bazel-v0.3
        name: ""
        resources: {}
    trigger: (?m)^/test build-tarball
  - agent: kubernetes
    always_run: true
    context: ci/prow/go-fmt
    decorate: true
    name: pull-ci-openshift-installer-go-fmt
    rerun_command: /test go-fmt
    spec:
      containers:
      - args:
        - ./hack/go-fmt.sh
        - .
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: openshift/origin-release:golang-1.10
        name: ""
        resources: {}
    trigger: (?m)^/test go-fmt
  - agent: kubernetes
    always_run: true
    context: ci/prow/go-vet
    decorate: true
    name: pull-ci-openshift-installer-go-vet
    rerun_command: /test go-vet
    spec:
      containers:
      - args:
        - ./hack/go-vet.sh
        - ./...
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: openshift/origin-release:golang-1.10
        name: ""
        resources: {}
    trigger: (?m)^/test go-vet
  - agent: kubernetes
    always_run: true
    context: ci/prow/golint
    decorate: true
    name: pull-ci-openshift-installer-golint
    rerun_command: /test golint
    spec:
      containers:
      - args:
        - -c
        - ./hack/go-lint.sh -min_confidence 0.3 $(go list -f '{{ .ImportPath }}' ./...)
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: openshift/origin-release:golang-1.10
        name: ""
        resources: {}
    trigger: (?m)^/test golint
