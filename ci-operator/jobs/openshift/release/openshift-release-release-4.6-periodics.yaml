periodics:
- agent: kubernetes
  cluster: build05
  decorate: true
  interval: 24h
  labels:
    job-release: "4.6"
  name: promote-release-openshift-machine-os-content-e2e-aws-4.6
  spec:
    containers:
    - args:
      - --secret-dir=/usr/local/pull-secret
      - --secret-dir=/usr/local/e2e-aws-cluster-profile
      - --input-hash=$(BUILD_ID) --input-hash=$(JOB_NAME)
      - --promote
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --image-mirror-push-secret=/etc/push-secret/.dockerconfigjson
      - --gcs-upload-secret=/secrets/gcs/service-account.json
      - --lease-server-credentials-file=/etc/boskos/credentials
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        # prow doesn't allow init containers or a second container
        export PATH=$PATH:/tmp/bin
        mkdir /tmp/bin
        curl -L --fail -v https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/openshift-client-linux.tar.gz | tar xvzf - -C /tmp/bin/ oc
        chmod ug+x /tmp/bin/oc
        sha256sum /tmp/bin/oc

        # if the source and destination are identical, do nothing
        export KUBECONFIG=/etc/app.ci/kubeconfig
        from=$( oc get istag -n "${TAG_NS}" "${TAG_SOURCE}" -o template='{{ .image.metadata.name }}' )
        to=$( oc get istag --ignore-not-found -n ocp "${BRANCH}:${TAG}" -o template='{{ .image.metadata.name }}' )
        unset KUBECONFIG
        if [[ "${from}" == "${to}" ]]; then
          echo "info: ${TAG_NS}/${TAG_SOURCE} matches ocp/${BRANCH}:${TAG}"
          exit 0
        fi
        echo "Will promote ${from}, current is ${to}"

        # error out if the image isn't on quay
        to_quay="quay.io/openshift-release-dev/ocp-v4.0-art-dev@${from}"
        if ! oc image info -a "/usr/local/pull-secret/.dockerconfigjson" "${to_quay}"; then
          echo "error: The source image has not been pushed to quay ${from}"
          exit 1
        fi

        # verify the tests pass
        ci-operator $@

        # also tag the image into the ocp private stream
        oc tag "${to_quay}" "ocp-private/${BRANCH}-priv:${TAG}"
      - ""
      env:
      - name: TAG_NS
        value: rhcos
      - name: TAG
        value: machine-os-content
      - name: BRANCH
        value: "4.6"
      - name: TAG_SOURCE
        value: machine-os-content:$(BRANCH)
      - name: UNRESOLVED_CONFIG
        value: |
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          promotion:
            name: "$(BRANCH)"
            namespace: ocp
            additional_images:
              $(TAG): $(TAG)
          build_root:
            image_stream_tag:
              name: release
              namespace: openshift
              tag: golang-1.12
          base_images:
            $(TAG):
              name: $(TAG)
              namespace: rhcos
              tag: "4.6"
          raw_steps:
          - output_image_tag_step:
              from: $(TAG)
              to:
                name: stable
                tag: $(TAG)
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tests:
          - as: e2e-aws
            steps:
              cluster_profile: aws
              workflow: openshift-e2e-aws
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/app.ci
        name: appci-ci-operator-credentials
        readOnly: true
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/e2e-aws-cluster-profile
        name: cluster-profile
      - mountPath: /secrets/gcs
        name: gcs-credentials
        readOnly: true
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /etc/push-secret
        name: push-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: appci-ci-operator-credentials
      secret:
        secretName: app.ci-ci-operator-credentials
    - name: boskos
      secret:
        items:
        - key: credentials
          path: credentials
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-aws
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: push-secret
      secret:
        secretName: registry-push-credentials-ci-central
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: build05
  decorate: true
  interval: 24h
  labels:
    job-release: "4.6"
  name: promote-release-openshift-machine-os-content-e2e-aws-4.6-s390x
  spec:
    containers:
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        # prow doesn't allow init containers or a second container
        export PATH=$PATH:/tmp/bin
        mkdir /tmp/bin
        curl -L --fail -v https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/openshift-client-linux.tar.gz | tar xvzf - -C /tmp/bin/ oc
        chmod ug+x /tmp/bin/oc
        sha256sum /tmp/bin/oc

        # if the source and destination are identical, do nothing
        from=$( oc get istag -n "${TAG_NS}" "${TAG_SOURCE}" -o template='{{ .image.metadata.name }}' )
        to=$( oc get istag --ignore-not-found -n ocp-${ARCH} "${BRANCH}-art-latest-${ARCH}:${TAG}" -o template='{{ .image.metadata.name }}' )
        if [[ "${from}" == "${to}" ]]; then
          echo "info: ${TAG_NS}/${TAG_SOURCE} already in ${BRANCH}-art-latest-${ARCH}:${TAG}"
          exit 0
        fi
        echo "Will promote ${from}, current is ${to}"

        # error out if the image isn't on quay
        to_quay="quay.io/openshift-release-dev/ocp-v4.0-art-dev@${from}"
        if ! oc image info -a "/usr/local/pull-secret/.dockerconfigjson" "${to_quay}"; then
          echo "error: The source image has not been pushed to quay ${from}"
          exit 1
        fi

        # TODO: Enable e2e testing when arch specific CI is available
      env:
      - name: TAG_NS
        value: rhcos
      - name: TAG
        value: machine-os-content
      - name: BRANCH
        value: "4.6"
      - name: ARCH
        value: s390x
      - name: TAG_SOURCE
        value: machine-os-content:$(BRANCH)-$(ARCH)
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: build05
  decorate: true
  interval: 24h
  labels:
    job-release: "4.6"
  name: promote-release-openshift-machine-os-content-e2e-aws-4.6-ppc64le
  spec:
    containers:
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        # prow doesn't allow init containers or a second container
        export PATH=$PATH:/tmp/bin
        mkdir /tmp/bin
        curl -L --fail -v https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/openshift-client-linux.tar.gz | tar xvzf - -C /tmp/bin/ oc
        chmod ug+x /tmp/bin/oc
        sha256sum /tmp/bin/oc

        # if the source and destination are identical, do nothing
        from=$( oc get istag -n "${TAG_NS}" "${TAG_SOURCE}" -o template='{{ .image.metadata.name }}' )
        to=$( oc get istag --ignore-not-found -n ocp-${ARCH} "${BRANCH}-art-latest-${ARCH}:${TAG}" -o template='{{ .image.metadata.name }}' )
        if [[ "${from}" == "${to}" ]]; then
          echo "info: ${TAG_NS}/${TAG_SOURCE} already in ${BRANCH}-art-latest-${ARCH}:${TAG}"
          exit 0
        fi
        echo "Will promote ${from}, current is ${to}"

        # error out if the image isn't on quay
        to_quay="quay.io/openshift-release-dev/ocp-v4.0-art-dev@${from}"
        if ! oc image info -a "/usr/local/pull-secret/.dockerconfigjson" "${to_quay}"; then
          echo "error: The source image has not been pushed to quay ${from}"
          exit 1
        fi

        # TODO: Enable e2e testing when arch specific CI is available
      env:
      - name: TAG_NS
        value: rhcos
      - name: TAG
        value: machine-os-content
      - name: BRANCH
        value: "4.6"
      - name: ARCH
        value: ppc64le
      - name: TAG_SOURCE
        value: machine-os-content:$(BRANCH)-$(ARCH)
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: build05
  decorate: true
  decoration_config:
    skip_cloning: true
  extra_refs:
  - base_ref: release-4.6
    org: openshift
    repo: origin
    workdir: true
  interval: 24h
  labels:
    job-release: "4.6"
    pj-rehearse.openshift.io/can-be-rehearsed: "true"
  name: promote-release-openshift-okd-machine-os-content-e2e-aws-4.6
  spec:
    containers:
    - args:
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --image-mirror-push-secret=/etc/push-secret/.dockerconfigjson
      - --input-hash=$(BUILD_ID) --input-hash=$(JOB_NAME)
      - --secret-dir=/usr/local/e2e-aws-cluster-profile
      - --secret-dir=/usr/local/pull-secret
      - --gcs-upload-secret=/secrets/gcs/service-account.json
      - --lease-server-credentials-file=/etc/boskos/credentials
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        # fetch binaries and configure working env, prow doesn't allow init containers or a second container
        dir=$(ARTIFACTS)/ostree
        mkdir -p "${dir}"
        export PATH=$PATH:/tmp/bin
        export HOME=/tmp
        mkdir $HOME/.docker/
        cp /usr/local/pull-secret/.dockerconfigjson $HOME/.docker/config.json
        mkdir $HOME/bin
        curl -L --fail -v https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/openshift-client-linux.tar.gz | tar xvzf - -C /tmp/bin/ oc
        curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 2>/dev/null >/tmp/bin/jq
        chmod ug+x $HOME/bin/oc $HOME/bin/jq
        sha256sum /tmp/bin/oc

        # guard against starting if no okd stream exists yet
        if ! oc get istag -n ${TAG_NS} ${BRANCH}:${TAG}; then
          echo "No build possible, no image stream"
          exit 0
        fi

        # populate the base_sha in job spec so we don't build something different
        origin_artifacts_id="$( oc get istag -n ${TAG_NS} ${BRANCH}:artifacts --template '{{ .image.metadata.name }}' )"
        origin_machine_config_operator_id="$( oc get istag -n ${TAG_NS} ${BRANCH}:machine-config-operator --template '{{ .image.metadata.name }}' )"
        # export JOB_SPEC="$( echo "${JOB_SPEC}" | jq -r ".extra_refs[0].base_sha = \"${origin_commit_id}\"" )"

        # fetch fcos release info and check whether we've already built this image
        stream=stable
        build_url="https://builds.coreos.fedoraproject.org/prod/streams/${stream}/builds"
        curl "${build_url}/builds.json" 2>/dev/null >${dir}/builds.json
        build_id="$( <"${dir}/builds.json" jq -r '.builds[0].id' )"
        base_url="${build_url}/${build_id}/x86_64"
        curl "${base_url}/meta.json" 2>/dev/null >${dir}/meta.json
        tar_url="${base_url}/$( <${dir}/meta.json jq -r .images.ostree.path )"
        commit_id="$( <${dir}/meta.json jq -r '."ostree-commit"' )"
        ostree_ref="fedora/x86_64/coreos/${stream}"

        # Build a semantic version as best we can from the build id, dropping any other
        # segments. Each version of machine-os-content is responsible for setting a
        # semver and this is only a workaround for now.
        if [[ ! "${build_id}" =~ ^(([0-9]+)\.)(([0-9]+)\.)?(([0-9]+)($|\.))? ]]; then
          echo "Build ID did not contain at least one major version"
          exit 1
        fi
        build_semver="${BASH_REMATCH[1]}"
        if [[ -n ${BASH_REMATCH[4]} ]]; then
          build_semver+="${BASH_REMATCH[3]}"
        else
          build_semver+="0."
        fi
        if [[ -n "${BASH_REMATCH[6]}" ]]; then
          build_semver+="${BASH_REMATCH[6]}"
        else
          build_semver+="0"
        fi

        # compare the latest image we have built against the potential candidate
        latest="$( oc get istag -n ${TAG_NS} ${BRANCH}:${TAG} --template '{{ index .image.dockerImageMetadata.Config.Labels "version" }} {{ index .image.dockerImageMetadata.Config.Labels "id-artifacts" }} {{ index .image.dockerImageMetadata.Config.Labels "id-machine-config-operator-rpms" }}' )"
        candidate="${build_id} ${origin_artifacts_id} ${origin_machine_config_operator_id}"
        echo "Comparing existing '$latest' against latest '$candidate'"
        if [[ "${latest}" == "${candidate}" ]]; then
          echo "No build necessary, content is up to date"
          exit 0
        fi

        # create namespace and craft a release image without the machine-os-content
        namespace="ci-op-$( echo "${JOB_NAME}-${BUILD_ID}" | md5sum -t | cut -c 1-8 )"
        oc registry login > /dev/null
        oc new-project ${namespace} > /dev/null
        oc policy add-role-to-group system:image-puller -n ${namespace} system:unauthenticated system:authenticated

        # initial import
        ci-operator $@ --target=[images] --namespace=${namespace}

        # force build from https://github.com/openshift/okd-machine-os master
        function build {
          oc -n ${namespace} create -f $1 >/dev/null
          while true; do
            oc -n ${namespace} logs -f build/$2 || true
            phase=$( oc -n ${namespace} get build/$2 -o 'jsonpath={.status.phase}' )
            if [[ "${phase}" == "Failed" || "${phase}" == "Cancelled" || "${phase}" == "Error" ]]; then
              oc -n ${namespace} describe build/$2
              exit 1
            fi
            if [[ "${phase}" == "Complete" ]]; then
              break
            fi
            sleep 5
          done
        }

        cat <<EOF > ${dir}/build.yaml
        kind: Build
        apiVersion: build.openshift.io/v1
        metadata:
          name: machine-os-content
        spec:
          output:
            to:
              kind: ImageStreamTag
              name: pipeline:machine-os-content
            imageLabels:
              - name: "version"
                value: "${build_id}"
              - name: "id-artifacts"
                value: "${origin_artifacts_id}"
              - name: "id-machine-config-operator-rpms"
                value: "${origin_machine_config_operator_id}"
              - name: "io.openshift.build.versions"
                value: "machine-os=${build_semver}"
              - name: "io.openshift.build.version-display-names"
                value: "machine-os=Fedora CoreOS"
          source:
            type: Git
            git:
              uri: 'https://github.com/openshift/okd-machine-os'
              ref: release-${BRANCH}
          strategy:
            dockerStrategy:
            type: Docker
        EOF
        oc -n ${namespace} create is machine-os-content >/dev/null
        build ${dir}/build.yaml machine-os-content

        # debug output
        oc describe -n ${namespace} istag/pipeline:machine-os-content

        # run promotion test
        ci-operator $@ --promote --namespace=${namespace}
      env:
      - name: TAG_NS
        value: origin
      - name: TAG
        value: machine-os-content
      - name: BRANCH
        value: "4.6"
      - name: TAG_SOURCE
        value: $(TAG):$(BRANCH)
      - name: CLUSTER_TYPE
        value: aws
      - name: UNRESOLVED_CONFIG
        value: |
          tag_specification:
            name: "$(BRANCH)"
            namespace: origin
          promotion:
            name: "$(BRANCH)"
            namespace: origin
            additional_images:
              $(TAG): $(TAG)
          build_root:
            image_stream_tag:
              name: release
              namespace: openshift
              tag: golang-1.13
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tests:
          - as: e2e-aws
            steps:
              cluster_profile: aws
              workflow: openshift-e2e-aws
      - name: JOB_NAME_SAFE
        value: e2e-aws
      - name: TEST_COMMAND
        value: TEST_SUITE=openshift/conformance/parallel run-tests
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/e2e-aws-cluster-profile
        name: cluster-profile
      - mountPath: /secrets/gcs
        name: gcs-credentials
        readOnly: true
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /etc/push-secret
        name: push-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: boskos
      secret:
        items:
        - key: credentials
          path: credentials
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-aws
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: push-secret
      secret:
        secretName: registry-push-credentials-ci-central
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: build05
  cron: 32 7 6 */12 *
  decorate: true
  decoration_config:
    timeout: 8h0m0s
  labels:
    job-env: aws
    job-release: "4.6"
    job-test: e2e
    pj-rehearse.openshift.io/can-be-rehearsed: "true"
    release.openshift.io/verify: "true"
  name: release-openshift-origin-installer-e2e-aws-upgrade-4.3-to-4.4-to-4.5-to-4.6-ci
  spec:
    containers:
    - args:
      - --secret-dir=/usr/local/pull-secret
      - --secret-dir=/usr/local/e2e-$(CLUSTER_TYPE)-upgrade-cluster-profile
      - --target=e2e-$(CLUSTER_TYPE)-upgrade
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --gcs-upload-secret=/secrets/gcs/service-account.json
      - --lease-server-credentials-file=/etc/boskos/credentials
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -exuo pipefail

        data=$(ARTIFACTS)/release.json

        if ! curl --fail -X GET -G --location https://amd64.ocp.releases.ci.openshift.org/api/v1/releasestream/4-stable/latest --data-urlencode 'in=>4.3.0 <4.4.0-0' > ${data}; then
          echo "error: Could not find an initial version"
          exit 1
        fi
        export RELEASE_IMAGE_INITIAL=$( python -c 'from __future__ import print_function; import json,sys; print(json.load(open(sys.argv[1], "r"))["pullSpec"])' "${data}" )

        if ! curl --fail -X GET -G --location https://amd64.ocp.releases.ci.openshift.org/api/v1/releasestream/4-stable/latest --data-urlencode 'in=>4.4.0 <4.5.0-0' > ${data}; then
          echo "error: Could not find a middle version"
          exit 1
        fi
        next_0=$( python -c 'from __future__ import print_function; import json,sys; print(json.load(open(sys.argv[1], "r"))["pullSpec"])' "${data}" )

        if ! curl --fail -X GET -G --location https://amd64.ocp.releases.ci.openshift.org/api/v1/releasestream/4.5.0-0.nightly/latest > ${data}; then
          echo "error: Could not find newest version"
          exit 1
        fi
        next_1=$( python -c 'from __future__ import print_function; import json,sys; print(json.load(open(sys.argv[1], "r"))["pullSpec"])' "${data}" )

        if ! curl --fail -X GET -G --location https://amd64.ocp.releases.ci.openshift.org/api/v1/releasestream/4.6.0-0.ci/latest > ${data}; then
          echo "error: Could not find newest version"
          exit 1
        fi
        next_2=$( python -c 'from __future__ import print_function; import json,sys; print(json.load(open(sys.argv[1], "r"))["pullSpec"])' "${data}" )

        export RELEASE_IMAGE_LATEST=${next_2}
        export CONFIG_SPEC="${CONFIG_SPEC/RELEASE_IMAGES/$next_0,$next_1,$next_2}"

        ci-operator $@
      - ""
      env:
      - name: BRANCH
        value: "4.3"
      - name: CLUSTER_TYPE
        value: aws
      - name: CONFIG_SPEC
        value: |
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          resources:
            '*':
              limits:
                memory: 4Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tests:
          - as: e2e-$(CLUSTER_TYPE)
            commands: TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-$(CLUSTER_TYPE)-serial
            commands: TEST_SUITE=openshift/conformance/serial run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-$(CLUSTER_TYPE)-upgrade
            commands: |
              TEST_SUITE=all IMAGE=RELEASE_IMAGES run-upgrade-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: launch-$(CLUSTER_TYPE)
            commands: sleep 9000 & wait
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/e2e-aws-upgrade-cluster-profile
        name: cluster-profile
      - mountPath: /secrets/gcs
        name: gcs-credentials
        readOnly: true
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: boskos
      secret:
        items:
        - key: credentials
          path: credentials
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-aws
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
