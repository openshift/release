periodics:
- agent: kubernetes
  cluster: build10
  decorate: true
  interval: 24h
  labels:
    job-release: "4.7"
  name: promote-release-openshift-machine-os-content-e2e-aws-4.7-s390x
  spec:
    containers:
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        # prow doesn't allow init containers or a second container
        export PATH=$PATH:/tmp/bin
        mkdir /tmp/bin
        curl -L --fail -v https://mirror.openshift.com/pub/openshift-v4/$(uname -m)/clients/ocp/stable/openshift-client-linux.tar.gz | tar xvzf - -C /tmp/bin/ oc
        chmod ug+x /tmp/bin/oc
        sha256sum /tmp/bin/oc

        # if the source and destination are identical, do nothing
        from=$( oc get istag -n "${TAG_NS}" "${TAG_SOURCE}" -o template='{{ .image.metadata.name }}' )
        to=$( oc get istag --ignore-not-found -n ocp-${ARCH} "${BRANCH}-art-latest-${ARCH}:${TAG}" -o template='{{ .image.metadata.name }}' )
        if [[ "${from}" == "${to}" ]]; then
          echo "info: ${TAG_NS}/${TAG_SOURCE} already in ${BRANCH}-art-latest-${ARCH}:${TAG}"
          exit 0
        fi
        echo "Will promote ${from}, current is ${to}"

        # error out if the image isn't on quay
        to_quay="quay.io/openshift-release-dev/ocp-v4.0-art-dev@${from}"
        if ! oc image info -a "/usr/local/pull-secret/.dockerconfigjson" "${to_quay}"; then
          echo "error: The source image has not been pushed to quay ${from}"
          exit 1
        fi

        # TODO: Enable e2e testing when arch specific CI is available
      env:
      - name: TAG_NS
        value: rhcos
      - name: TAG
        value: machine-os-content
      - name: BRANCH
        value: "4.7"
      - name: ARCH
        value: s390x
      - name: TAG_SOURCE
        value: machine-os-content:$(BRANCH)-$(ARCH)
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: build10
  decorate: true
  interval: 24h
  labels:
    job-release: "4.7"
  name: promote-release-openshift-machine-os-content-e2e-aws-4.7-ppc64le
  spec:
    containers:
    - command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -euo pipefail

        # prow doesn't allow init containers or a second container
        export PATH=$PATH:/tmp/bin
        mkdir /tmp/bin
        curl -L --fail -v https://mirror.openshift.com/pub/openshift-v4/$(uname -m)/clients/ocp/stable/openshift-client-linux.tar.gz | tar xvzf - -C /tmp/bin/ oc
        chmod ug+x /tmp/bin/oc
        sha256sum /tmp/bin/oc

        # if the source and destination are identical, do nothing
        from=$( oc get istag -n "${TAG_NS}" "${TAG_SOURCE}" -o template='{{ .image.metadata.name }}' )
        to=$( oc get istag --ignore-not-found -n ocp-${ARCH} "${BRANCH}-art-latest-${ARCH}:${TAG}" -o template='{{ .image.metadata.name }}' )
        if [[ "${from}" == "${to}" ]]; then
          echo "info: ${TAG_NS}/${TAG_SOURCE} already in ${BRANCH}-art-latest-${ARCH}:${TAG}"
          exit 0
        fi
        echo "Will promote ${from}, current is ${to}"

        # error out if the image isn't on quay
        to_quay="quay.io/openshift-release-dev/ocp-v4.0-art-dev@${from}"
        if ! oc image info -a "/usr/local/pull-secret/.dockerconfigjson" "${to_quay}"; then
          echo "error: The source image has not been pushed to quay ${from}"
          exit 1
        fi

        # TODO: Enable e2e testing when arch specific CI is available
      env:
      - name: TAG_NS
        value: rhcos
      - name: TAG
        value: machine-os-content
      - name: BRANCH
        value: "4.7"
      - name: ARCH
        value: ppc64le
      - name: TAG_SOURCE
        value: machine-os-content:$(BRANCH)-$(ARCH)
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
- agent: kubernetes
  cluster: build05
  cron: 42 10 8,22 * *
  decorate: true
  decoration_config:
    timeout: 8h0m0s
  labels:
    job-env: aws
    job-release: "4.7"
    job-test: e2e
    pj-rehearse.openshift.io/can-be-rehearsed: "true"
    release.openshift.io/verify: "true"
  name: release-openshift-origin-installer-e2e-aws-upgrade-4.4-to-4.5-to-4.6-to-4.7-ci
  spec:
    containers:
    - args:
      - --secret-dir=/usr/local/pull-secret
      - --secret-dir=/usr/local/e2e-$(CLUSTER_TYPE)-upgrade-cluster-profile
      - --target=e2e-$(CLUSTER_TYPE)-upgrade
      - --input-hash=$(BUILD_ID)
      - --input-hash=$(JOB_NAME)
      - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
      - --gcs-upload-secret=/secrets/gcs/service-account.json
      - --lease-server-credentials-file=/etc/boskos/credentials
      command:
      - /bin/bash
      - -c
      - |
        #!/bin/bash
        set -exuo pipefail

        data=$(ARTIFACTS)/release.json

        if ! curl --fail -X GET -G --location https://amd64.ocp.releases.ci.openshift.org/api/v1/releasestream/4-stable/latest --data-urlencode 'in=>4.4.0 <4.5.0-0' > ${data}; then
          echo "error: Could not find an initial version"
          exit 1
        fi
        export RELEASE_IMAGE_INITIAL=$( python -c 'from __future__ import print_function; import json,sys; print(json.load(open(sys.argv[1], "r"))["pullSpec"])' "${data}" )

        if ! curl --fail -X GET -G --location https://amd64.ocp.releases.ci.openshift.org/api/v1/releasestream/4-stable/latest --data-urlencode 'in=>4.5.0 <4.6.0-0' > ${data}; then
          echo "error: Could not find a middle version"
          exit 1
        fi
        next_0=$( python -c 'from __future__ import print_function; import json,sys; print(json.load(open(sys.argv[1], "r"))["pullSpec"])' "${data}" )

        if ! curl --fail -X GET -G --location https://amd64.ocp.releases.ci.openshift.org/api/v1/releasestream/4.6.0-0.nightly/latest > ${data}; then
          echo "error: Could not find a middle version"
          exit 1
        fi
        next_1=$( python -c 'from __future__ import print_function; import json,sys; print(json.load(open(sys.argv[1], "r"))["pullSpec"])' "${data}" )

        if ! curl --fail -X GET -G --location https://amd64.ocp.releases.ci.openshift.org/api/v1/releasestream/4.7.0-0.ci/latest > ${data}; then
          echo "error: Could not find newest version"
          exit 1
        fi
        next_2=$( python -c 'from __future__ import print_function; import json,sys; print(json.load(open(sys.argv[1], "r"))["pullSpec"])' "${data}" )

        export RELEASE_IMAGE_LATEST=${next_2}
        export CONFIG_SPEC="${CONFIG_SPEC/RELEASE_IMAGES/$next_0,$next_1,$next_2}"

        ci-operator $@
      - ""
      env:
      - name: BRANCH
        value: "4.4"
      - name: CLUSTER_TYPE
        value: aws
      - name: CONFIG_SPEC
        value: |
          tag_specification:
            name: "$(BRANCH)"
            namespace: ocp
          resources:
            '*':
              limits:
                memory: 6Gi
              requests:
                cpu: 100m
                memory: 200Mi
          tests:
          - as: e2e-$(CLUSTER_TYPE)
            commands: TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-$(CLUSTER_TYPE)-serial
            commands: TEST_SUITE=openshift/conformance/serial run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
          - as: e2e-$(CLUSTER_TYPE)-upgrade
            commands: |
              TEST_SUITE=all IMAGE=RELEASE_IMAGES run-upgrade-tests
              TEST_SUITE=openshift/conformance/parallel run-tests
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
              upgrade: true
          - as: launch-$(CLUSTER_TYPE)
            commands: sleep 9000 & wait
            openshift_installer:
              cluster_profile: "$(CLUSTER_TYPE)"
      image: ci-operator:latest
      imagePullPolicy: Always
      name: ""
      resources:
        requests:
          cpu: 10m
      volumeMounts:
      - mountPath: /etc/boskos
        name: boskos
        readOnly: true
      - mountPath: /usr/local/e2e-aws-upgrade-cluster-profile
        name: cluster-profile
      - mountPath: /secrets/gcs
        name: gcs-credentials
        readOnly: true
      - mountPath: /etc/pull-secret
        name: pull-secret
        readOnly: true
      - mountPath: /usr/local/pull-secret
        name: release-pull-secret
    serviceAccountName: ci-operator
    volumes:
    - name: boskos
      secret:
        items:
        - key: credentials
          path: credentials
        secretName: boskos-credentials
    - name: cluster-profile
      projected:
        sources:
        - secret:
            name: cluster-secrets-aws
    - name: pull-secret
      secret:
        secretName: registry-pull-credentials
    - name: release-pull-secret
      secret:
        secretName: ci-pull-credentials
