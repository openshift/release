presubmits:
  openshift/cluster-api-provider-libvirt:
  - agent: kubernetes
    always_run: true
    branches:
    - release-4.4
    cluster: build02
    context: ci/prow/actuator-pkg-staleness
    decorate: true
    decoration_config:
      skip_cloning: true
    labels:
      ci-operator.openshift.io/prowgen-controlled: "true"
      pj-rehearse.openshift.io/can-be-rehearsed: "true"
    name: pull-ci-openshift-cluster-api-provider-libvirt-release-4.4-actuator-pkg-staleness
    optional: true
    rerun_command: /test actuator-pkg-staleness
    spec:
      containers:
      - args:
        - --gcs-upload-secret=/secrets/gcs/service-account.json
        - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
        - --report-password-file=/etc/report/password.txt
        - --report-username=ci
        - --target=actuator-pkg-staleness
        command:
        - ci-operator
        image: ci-operator:latest
        imagePullPolicy: Always
        name: ""
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /secrets/gcs
          name: gcs-credentials
          readOnly: true
        - mountPath: /etc/pull-secret
          name: pull-secret
          readOnly: true
        - mountPath: /etc/report
          name: result-aggregator
          readOnly: true
      serviceAccountName: ci-operator
      volumes:
      - name: pull-secret
        secret:
          secretName: registry-pull-credentials
      - name: result-aggregator
        secret:
          secretName: result-aggregator
    trigger: (?m)^/test( | .* )actuator-pkg-staleness,?($|\s.*)
  - agent: kubernetes
    always_run: true
    branches:
    - release-4.4
    cluster: build02
    context: ci/prow/e2e-libvirt
    decorate: true
    labels:
      pj-rehearse.openshift.io/can-be-rehearsed: "true"
    name: pull-ci-openshift-cluster-api-provider-libvirt-release-4.4-e2e-libvirt
    rerun_command: /test e2e-libvirt
    spec:
      containers:
      - args:
        - --artifact-dir=$(ARTIFACTS)
        - --gcs-upload-secret=/secrets/gcs/service-account.json
        - --give-pr-author-access-to-namespace=true
        - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
        - --kubeconfig=/etc/apici/kubeconfig
        - --repo=cluster-api-provider-libvirt
        - --secret-dir=/usr/local/e2e-libvirt-cluster-profile
        - --target=e2e-libvirt
        - --template=/usr/local/e2e-libvirt
        command:
        - ci-operator
        env:
        - name: CLUSTER_TYPE
          value: gcp
        - name: JOB_NAME_SAFE
          value: e2e-libvirt
        - name: TEST_COMMAND
          value: |
            cat >tests <<EOTESTS
            "[Conformance][Area:Networking][Feature:Router] The HAProxy router [Top Level] [Conformance][Area:Networking][Feature:Router] The HAProxy router should override the route host for overridden domains with a custom value [Suite:openshift/conformance/parallel/minimal]"
            "[Conformance][Area:Networking][Feature:Router] The HAProxy router [Top Level] [Conformance][Area:Networking][Feature:Router] The HAProxy router should override the route host with a custom value [Suite:openshift/conformance/parallel/minimal]"
            "[Conformance][Area:Networking][Feature:Router] The HAProxy router [Top Level] [Conformance][Area:Networking][Feature:Router] The HAProxy router should run even if it has no access to update status [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:AnnotationTrigger] Annotation trigger [Top Level] [Feature:AnnotationTrigger] Annotation trigger reconciles after the image is overwritten [Suite:openshift/conformance/parallel]"
            "[Feature:Builds] buildconfig secret injector  [Top Level] [Feature:Builds] buildconfig secret injector  should inject secrets to the appropriate buildconfigs [Suite:openshift/conformance/parallel]"
            "[Feature:Builds][Conformance] imagechangetriggers  [Top Level] [Feature:Builds][Conformance] imagechangetriggers  imagechangetriggers should trigger builds of all types [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:Builds][Conformance] remove all builds when build configuration is removed  oc delete buildconfig [Top Level] [Feature:Builds][Conformance] remove all builds when build configuration is removed  oc delete buildconfig should start builds and delete the buildconfig [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:Builds][Conformance] s2i build with a quota  Building from a template [Top Level] [Feature:Builds][Conformance] s2i build with a quota  Building from a template should create an s2i build with a quota and run it [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:Builds][pullsecret][Conformance] docker build using a pull secret  Building from a template [Top Level] [Feature:Builds][pullsecret][Conformance] docker build using a pull secret  Building from a template should create a docker build that pulls using a secret run it [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:DeploymentConfig] deploymentconfigs ignores deployer and lets the config with a NewReplicationControllerCreated reason [Conformance] [Top Level] [Feature:DeploymentConfig] deploymentconfigs ignores deployer and lets the config with a NewReplicationControllerCreated reason [Conformance] should let the deployment config with a NewReplicationControllerCreated reason [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:DeploymentConfig] deploymentconfigs initially [Conformance] [Top Level] [Feature:DeploymentConfig] deploymentconfigs initially [Conformance] should not deploy if pods never transition to ready [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:DeploymentConfig] deploymentconfigs should respect image stream tag reference policy [Conformance] [Top Level] [Feature:DeploymentConfig] deploymentconfigs should respect image stream tag reference policy [Conformance] resolve the image pull spec [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:DeploymentConfig] deploymentconfigs when run iteratively [Conformance] [Top Level] [Feature:DeploymentConfig] deploymentconfigs when run iteratively [Conformance] should immediately start a new deployment [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:DeploymentConfig] deploymentconfigs with env in params referencing the configmap [Conformance] [Top Level] [Feature:DeploymentConfig] deploymentconfigs with env in params referencing the configmap [Conformance] should expand the config map key to a value [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:ImageLayers][registry] Image layer subresource [Top Level] [Feature:ImageLayers][registry] Image layer subresource should identify a deleted image as missing [Suite:openshift/conformance/parallel]"
            "[Feature:ImageLookup][registry][Conformance] Image policy [Top Level] [Feature:ImageLookup][registry][Conformance] Image policy should update standard Kube object image fields when local names are on [Suite:openshift/conformance/parallel/minimal]"
            "[Feature:Machines] Managed cluster should [Top Level] [Feature:Machines] Managed cluster should have machine resources [Suite:openshift/conformance/parallel]"
            "[Feature:Platform] Managed cluster should [Top Level] [Feature:Platform] Managed cluster should have operators on the cluster version [Suite:openshift/conformance/parallel]"
            "[Feature:Platform] OLM should [Top Level] [Feature:Platform] OLM should be installed with catalogsources at version v1alpha1 [Suite:openshift/conformance/parallel]"
            "[Feature:Platform] OLM should [Top Level] [Feature:Platform] OLM should be installed with clusterserviceversions at version v1alpha1 [Suite:openshift/conformance/parallel]"
            "[Feature:Platform] OLM should [Top Level] [Feature:Platform] OLM should be installed with installplans at version v1alpha1 [Suite:openshift/conformance/parallel]"
            "[Feature:Platform] OLM should [Top Level] [Feature:Platform] OLM should be installed with operatorgroups at version v1 [Suite:openshift/conformance/parallel]"
            "[Feature:Platform] OLM should [Top Level] [Feature:Platform] OLM should be installed with packagemanifests at version v1 [Suite:openshift/conformance/parallel]"
            "[Feature:Platform] OLM should [Top Level] [Feature:Platform] OLM should be installed with subscriptions at version v1alpha1 [Suite:openshift/conformance/parallel]"
            "[Feature:Platform] Managed cluster [Top Level] [Feature:Platform] Managed cluster should ensure pods use downstream images from our release image with proper ImagePullPolicy [Suite:openshift/conformance/parallel]"
            "[Feature:Platform][Early] Managed cluster should [Top Level] [Feature:Platform][Early] Managed cluster should start all core operators [Suite:openshift/conformance/parallel]"
            "[k8s.io] Container Runtime blackbox test when running a container with a new image [Top Level] [k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull from private registry with secret [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[k8s.io] Container Runtime blackbox test when running a container with a new image [Top Level] [k8s.io] Container Runtime blackbox test when running a container with a new image should be able to pull image [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[k8s.io] Container Runtime blackbox test on terminated container [Top Level] [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] Container Runtime blackbox test on terminated container [Top Level] [k8s.io] Container Runtime blackbox test on terminated container should report termination message [LinuxOnly] if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] Docker Containers [Top Level] [k8s.io] Docker Containers should be able to override the image's default arguments (docker cmd) [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] Pods [Top Level] [k8s.io] Pods should be submitted and removed [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] Probing container [Top Level] [k8s.io] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] Probing container [Top Level] [k8s.io] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] Security Context When creating a container with runAsUser [Top Level] [k8s.io] Security Context When creating a container with runAsUser should run the container with uid 0 [LinuxOnly] [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[k8s.io] Security Context When creating a pod with privileged [Top Level] [k8s.io] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] Security Context When creating a pod with readOnlyRootFilesystem [Top Level] [k8s.io] Security Context When creating a pod with readOnlyRootFilesystem should run the container with readonly rootfs when readOnlyRootFilesystem=true [LinuxOnly] [NodeConformance] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[k8s.io] Security Context when creating containers with AllowPrivilegeEscalation [Top Level] [k8s.io] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] Variable Expansion [Top Level] [k8s.io] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] Variable Expansion [Top Level] [k8s.io] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] InitContainer [NodeConformance] [Top Level] [k8s.io] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] InitContainer [NodeConformance] [Top Level] [k8s.io] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class [Top Level] [k8s.io] [sig-node] Pods Extended [k8s.io] Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[k8s.io] [sig-node] Security Context [Top Level] [k8s.io] [sig-node] Security Context should support pod.Spec.SecurityContext.SupplementalGroups [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[k8s.io] [sig-node] Security Context [Top Level] [k8s.io] [sig-node] Security Context should support seccomp alpha unconfined annotation on the container [Feature:Seccomp] [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[k8s.io] [sig-node] Security Context [Top Level] [k8s.io] [sig-node] Security Context should support seccomp alpha unconfined annotation on the pod [Feature:Seccomp] [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[k8s.io] [sig-node] Security Context [Top Level] [k8s.io] [sig-node] Security Context should support seccomp default which is unconfined [Feature:Seccomp] [LinuxOnly] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-api-machinery] Garbage collector [Top Level] [sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-api-machinery] Generated clientset [Top Level] [sig-api-machinery] Generated clientset should create v1beta1 cronJobs, delete cronJobs, watch cronJobs [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-api-machinery] Servers with support for API chunking [Top Level] [sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-api-machinery] Servers with support for Table transformation [Top Level] [sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-api-machinery] Servers with support for Table transformation [Top Level] [sig-api-machinery] Servers with support for Table transformation should return chunks of table results for list calls [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-api-machinery] Watchers [Top Level] [sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-api-machinery] Watchers [Top Level] [sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-api-machinery] Watchers [Top Level] [sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-apps] CronJob [Top Level] [sig-apps] CronJob should remove from active list jobs that have been deleted [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-apps] Deployment [Top Level] [sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-apps] Deployment [Top Level] [sig-apps] Deployment deployment reaping should cascade to its replica sets and pods [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-apps] Deployment [Top Level] [sig-apps] Deployment deployment should delete old replica sets [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-apps] Deployment [Top Level] [sig-apps] Deployment deployment should support proportional scaling [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-apps] Deployment [Top Level] [sig-apps] Deployment iterative rollouts should eventually progress [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-apps] DisruptionController [Top Level] [sig-apps] DisruptionController evictions: maxUnavailable deny evictions, integer => should not allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-apps] DisruptionController [Top Level] [sig-apps] DisruptionController evictions: no PDB => should allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-apps] DisruptionController [Top Level] [sig-apps] DisruptionController evictions: too few pods, replicaSet, percentage => should not allow an eviction [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-apps] DisruptionController [Top Level] [sig-apps] DisruptionController should update PodDisruptionBudget status [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-apps] Job [Top Level] [sig-apps] Job should delete a job [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] [Top Level] [sig-apps] StatefulSet [k8s.io] Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-auth] Certificates API [Top Level] [sig-auth] Certificates API should support building a client with a CSR [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-auth] ServiceAccounts [Top Level] [sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-instrumentation] MetricsGrabber [Top Level] [sig-instrumentation] MetricsGrabber should grab all metrics from a Kubelet. [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-network] DNS [Top Level] [sig-network] DNS should support configurable pod resolv.conf [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-network] Networking Granular Checks: Pods [Top Level] [sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-network] Services [Top Level] [sig-network] Services should check NodePort out-of-range [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-api-machinery] ResourceQuota [Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a persistent volume claim with a storage class. [sig-storage] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-api-machinery] ResourceQuota [Top Level] [sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-api-machinery] ResourceQuota [Top Level] [sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-api-machinery] ResourceQuota [Top Level] [sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-cli] Kubectl client Kubectl apply [Top Level] [sig-cli] Kubectl client Kubectl apply should reuse port when apply to an existing SVC [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-cli] Kubectl client Kubectl run default [Top Level] [sig-cli] Kubectl client Kubectl run default should create an rc or deployment from an image  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-cli] Kubectl client Kubectl run job [Top Level] [sig-cli] Kubectl client Kubectl run job should create a job from an image when restart is OnFailure  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-cli] Kubectl client Kubectl run pod [Top Level] [sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-cli] Kubectl client Kubectl version [Top Level] [sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-cli] Kubectl client Proxy server [Top Level] [sig-cli] Kubectl client Proxy server should support --unix-socket=/path  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-cli] Kubectl client Simple pod [Top Level] [sig-cli] Kubectl client Simple pod should support exec [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-cli] Kubectl client Simple pod [Top Level] [sig-cli] Kubectl client Simple pod should support exec through kubectl proxy [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-cli] Kubectl client Simple pod [Top Level] [sig-cli] Kubectl client Simple pod should support port-forward [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-cli] Kubectl client Update Demo [Top Level] [sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] ConfigMap [Top Level] [sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] ConfigMap [Top Level] [sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] ConfigMap [Top Level] [sig-storage] ConfigMap should be consumable from pods in volume as non-root [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] ConfigMap [Top Level] [sig-storage] ConfigMap should be consumable from pods in volume as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] ConfigMap [Top Level] [sig-storage] ConfigMap should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] ConfigMap [Top Level] [sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] ConfigMap [Top Level] [sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] ConfigMap [Top Level] [sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] ConfigMap [Top Level] [sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] ConfigMap [Top Level] [sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root with FSGroup [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] Downward API volume [Top Level] [sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] Downward API volume [Top Level] [sig-storage] Downward API volume should provide podname as non-root with fsgroup [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] Downward API volume [Top Level] [sig-storage] Downward API volume should provide podname as non-root with fsgroup and defaultMode [LinuxOnly] [NodeFeature:FSGroup] [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] EmptyDir volumes [Top Level] [sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] EmptyDir volumes [Top Level] [sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] EmptyDir volumes [Top Level] [sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] [Top Level] [sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] files with FSGroup ownership should support (root,0644,tmpfs) [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] [Top Level] [sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] new files should be created with FSGroup ownership when container is non-root [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] [Top Level] [sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] new files should be created with FSGroup ownership when container is root [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] [Top Level] [sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] nonexistent volume subPath should have the correct mode and owner using FSGroup [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] [Top Level] [sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] volume on default medium should have the correct mode using FSGroup [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] [Top Level] [sig-storage] EmptyDir volumes when FSGroup is specified [LinuxOnly] [NodeFeature:FSGroup] volume on tmpfs should have the correct mode using FSGroup [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage [Top Level] [sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : configmap [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage [Top Level] [sig-storage] Ephemeralstorage When pod refers to non-existent ephemeral storage should allow deletion of pod with invalid volume : secret [Suite:openshift/conformance/parallel] [Suite:k8s]"
            "[sig-storage] Secrets [Top Level] [sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] Secrets [Top Level] [sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            "[sig-storage] Subpath Atomic writer volumes [Top Level] [sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [LinuxOnly] [Conformance] [Suite:openshift/conformance/parallel/minimal] [Suite:k8s]"
            EOTESTS
            TEST_SUITE="--file=tests" run-tests
        image: ci-operator:latest
        imagePullPolicy: Always
        name: ""
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /etc/apici
          name: apici-ci-operator-credentials
          readOnly: true
        - mountPath: /usr/local/e2e-libvirt-cluster-profile
          name: cluster-profile
        - mountPath: /secrets/gcs
          name: gcs-credentials
          readOnly: true
        - mountPath: /usr/local/e2e-libvirt
          name: job-definition
          subPath: cluster-launch-installer-libvirt-e2e.yaml
        - mountPath: /etc/pull-secret
          name: pull-secret
          readOnly: true
      serviceAccountName: ci-operator
      volumes:
      - name: apici-ci-operator-credentials
        secret:
          items:
          - key: sa.ci-operator.apici.config
            path: kubeconfig
          secretName: apici-ci-operator-credentials
      - name: cluster-profile
        projected:
          sources:
          - secret:
              name: cluster-secrets-gcp
          - configMap:
              name: cluster-profile-gcp
      - configMap:
          name: prow-job-cluster-launch-installer-libvirt-e2e
        name: job-definition
      - name: pull-secret
        secret:
          secretName: registry-pull-credentials
    trigger: (?m)^/test( | .* )e2e-libvirt,?($|\s.*)
  - agent: kubernetes
    always_run: true
    branches:
    - release-4.4
    cluster: build02
    context: ci/prow/gofmt
    decorate: true
    decoration_config:
      skip_cloning: true
    labels:
      ci-operator.openshift.io/prowgen-controlled: "true"
      pj-rehearse.openshift.io/can-be-rehearsed: "true"
    name: pull-ci-openshift-cluster-api-provider-libvirt-release-4.4-gofmt
    rerun_command: /test gofmt
    spec:
      containers:
      - args:
        - --gcs-upload-secret=/secrets/gcs/service-account.json
        - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
        - --report-password-file=/etc/report/password.txt
        - --report-username=ci
        - --target=gofmt
        command:
        - ci-operator
        image: ci-operator:latest
        imagePullPolicy: Always
        name: ""
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /secrets/gcs
          name: gcs-credentials
          readOnly: true
        - mountPath: /etc/pull-secret
          name: pull-secret
          readOnly: true
        - mountPath: /etc/report
          name: result-aggregator
          readOnly: true
      serviceAccountName: ci-operator
      volumes:
      - name: pull-secret
        secret:
          secretName: registry-pull-credentials
      - name: result-aggregator
        secret:
          secretName: result-aggregator
    trigger: (?m)^/test( | .* )gofmt,?($|\s.*)
  - agent: kubernetes
    always_run: true
    branches:
    - release-4.4
    cluster: build02
    context: ci/prow/golint
    decorate: true
    decoration_config:
      skip_cloning: true
    labels:
      ci-operator.openshift.io/prowgen-controlled: "true"
      pj-rehearse.openshift.io/can-be-rehearsed: "true"
    name: pull-ci-openshift-cluster-api-provider-libvirt-release-4.4-golint
    rerun_command: /test golint
    spec:
      containers:
      - args:
        - --gcs-upload-secret=/secrets/gcs/service-account.json
        - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
        - --report-password-file=/etc/report/password.txt
        - --report-username=ci
        - --target=golint
        command:
        - ci-operator
        image: ci-operator:latest
        imagePullPolicy: Always
        name: ""
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /secrets/gcs
          name: gcs-credentials
          readOnly: true
        - mountPath: /etc/pull-secret
          name: pull-secret
          readOnly: true
        - mountPath: /etc/report
          name: result-aggregator
          readOnly: true
      serviceAccountName: ci-operator
      volumes:
      - name: pull-secret
        secret:
          secretName: registry-pull-credentials
      - name: result-aggregator
        secret:
          secretName: result-aggregator
    trigger: (?m)^/test( | .* )golint,?($|\s.*)
  - agent: kubernetes
    always_run: true
    branches:
    - release-4.4
    cluster: build02
    context: ci/prow/govet
    decorate: true
    decoration_config:
      skip_cloning: true
    labels:
      ci-operator.openshift.io/prowgen-controlled: "true"
      pj-rehearse.openshift.io/can-be-rehearsed: "true"
    name: pull-ci-openshift-cluster-api-provider-libvirt-release-4.4-govet
    rerun_command: /test govet
    spec:
      containers:
      - args:
        - --gcs-upload-secret=/secrets/gcs/service-account.json
        - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
        - --report-password-file=/etc/report/password.txt
        - --report-username=ci
        - --target=govet
        command:
        - ci-operator
        image: ci-operator:latest
        imagePullPolicy: Always
        name: ""
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /secrets/gcs
          name: gcs-credentials
          readOnly: true
        - mountPath: /etc/pull-secret
          name: pull-secret
          readOnly: true
        - mountPath: /etc/report
          name: result-aggregator
          readOnly: true
      serviceAccountName: ci-operator
      volumes:
      - name: pull-secret
        secret:
          secretName: registry-pull-credentials
      - name: result-aggregator
        secret:
          secretName: result-aggregator
    trigger: (?m)^/test( | .* )govet,?($|\s.*)
  - agent: kubernetes
    always_run: true
    branches:
    - release-4.4
    cluster: build02
    context: ci/prow/images
    decorate: true
    decoration_config:
      skip_cloning: true
    labels:
      ci-operator.openshift.io/prowgen-controlled: "true"
      pj-rehearse.openshift.io/can-be-rehearsed: "true"
    name: pull-ci-openshift-cluster-api-provider-libvirt-release-4.4-images
    rerun_command: /test images
    spec:
      containers:
      - args:
        - --gcs-upload-secret=/secrets/gcs/service-account.json
        - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
        - --report-password-file=/etc/report/password.txt
        - --report-username=ci
        - --target=[images]
        - --target=[release:latest]
        command:
        - ci-operator
        image: ci-operator:latest
        imagePullPolicy: Always
        name: ""
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /secrets/gcs
          name: gcs-credentials
          readOnly: true
        - mountPath: /etc/pull-secret
          name: pull-secret
          readOnly: true
        - mountPath: /etc/report
          name: result-aggregator
          readOnly: true
      serviceAccountName: ci-operator
      volumes:
      - name: pull-secret
        secret:
          secretName: registry-pull-credentials
      - name: result-aggregator
        secret:
          secretName: result-aggregator
    trigger: (?m)^/test( | .* )images,?($|\s.*)
  - agent: kubernetes
    always_run: true
    branches:
    - release-4.4
    cluster: build02
    context: ci/prow/unit
    decorate: true
    decoration_config:
      skip_cloning: true
    labels:
      ci-operator.openshift.io/prowgen-controlled: "true"
      pj-rehearse.openshift.io/can-be-rehearsed: "true"
    name: pull-ci-openshift-cluster-api-provider-libvirt-release-4.4-unit
    rerun_command: /test unit
    spec:
      containers:
      - args:
        - --gcs-upload-secret=/secrets/gcs/service-account.json
        - --image-import-pull-secret=/etc/pull-secret/.dockerconfigjson
        - --report-password-file=/etc/report/password.txt
        - --report-username=ci
        - --target=unit
        command:
        - ci-operator
        image: ci-operator:latest
        imagePullPolicy: Always
        name: ""
        resources:
          requests:
            cpu: 10m
        volumeMounts:
        - mountPath: /secrets/gcs
          name: gcs-credentials
          readOnly: true
        - mountPath: /etc/pull-secret
          name: pull-secret
          readOnly: true
        - mountPath: /etc/report
          name: result-aggregator
          readOnly: true
      serviceAccountName: ci-operator
      volumes:
      - name: pull-secret
        secret:
          secretName: registry-pull-credentials
      - name: result-aggregator
        secret:
          secretName: result-aggregator
    trigger: (?m)^/test( | .* )unit,?($|\s.*)
  - agent: kubernetes
    always_run: true
    branches:
    - release-4.4
    cluster: build02
    context: ci/prow/yaml-lint
    decorate: true
    labels:
      ci.openshift.io/manually-branched: "true"
    name: pull-ci-openshift-cluster-api-provider-libvirt-release-4.4.yaml-lint
    rerun_command: /test yaml-lint
    spec:
      containers:
      - args:
        - ./hack/yaml-lint.sh
        command:
        - sh
        env:
        - name: IS_CONTAINER
          value: "TRUE"
        image: quay.io/coreos/yamllint
        imagePullPolicy: Always
        name: ""
        resources:
          requests:
            cpu: 500m
    trigger: (?m)^/test( | .* )yaml-lint,?($|\s.*)
