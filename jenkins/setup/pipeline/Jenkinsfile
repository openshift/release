#!/usr/bin/groovy
def jenkinsAdminToken=""
pipeline {
  agent any
  stages {
    stage("Get Admin Credentials") {
      steps {
        script {
          openshift.withCluster() {
            def tokenSecretName = ""
            def adminSA = openshift.selector("sa/${env.JENKINS_ADMIN_SA}").object()
            for (secret in adminSA.secrets) {
              if (secret.name.indexOf("token") >= 0) {
                tokenSecretName = secret.name
                break
              }
            }
            if (tokenSecretName == "") {
              error("could not find token secret for jenkins admin sa ${env.JENKINS_ADMIN_SA}")
            }
            def tokenSecret = openshift.selector("secret/${tokenSecretName}").object()
            def encodedToken = tokenSecret.data.token
            jenkinsAdminToken=sh(script:"set +x; echo ${encodedToken} | base64 --decode", returnStdout: true)
          }
        }
      }
    }
    stage("Deploy Permissions Job") {
      when {
        not { expression { return "${env.SKIP_PERMISSIONS_JOB ?: "0"}" == "1" } }
      }
      steps {
        script {
          openshift.doAs(jenkinsAdminToken) {
            permissionsJobResources = openshift.process(
              "--filename=jenkins/jobs/teams/jenkins-permissions-job.yaml",
              "-p", "SOURCE_REF=${env.SOURCE_REF}",
              "-p", "SOURCE_URL=${env.SOURCE_URL}")
            created = openshift.apply(permissionsJobResources)

            // Wait for an imagestream tag for the builder to be available
            def imageStream = openshift.selector("imagestream/centos")
            imageStream.watch {
              is = it.object()
              if ((is.status.tags != null) && (is.status.tags.size() > 0)) {
                for (tagObj in is.status.tags) {
                  if (tagObj.tag == "7") {
                    return true
                  }
                }
              }
              return false
            }

            buildConfig = created.narrow("bc")
            build = buildConfig.startBuild()
            build.untilEach(1) {
              return it.object().status.phase == "Complete"
            }
            destinationImage = buildConfig.object().spec.output.to.name
            // need to strip tag from destination ImageStreamTag
            destinationImage = destinationImage.substring(0, destinationImage.indexOf(":"))
            openshift.set("image-lookup", destinationImage)
            cronjob = created.narrow("cronjob").name()
            openshift.raw("patch", cronjob, "--patch='{\"spec\":{\"suspend\":false}}'")
          }
        }
      }
    }
    stage("Deploy Secrets Controller") {
      steps {
        script {
          openshift.doAs(jenkinsAdminToken) {
            secretsControllerResources = openshift.process(
              "--filename=jenkins/controllers/secrets/jenkins-secrets-controller.yaml",
              "-p", "SOURCE_REF=${env.SOURCE_REF}",
              "-p", "SOURCE_URL=${env.SOURCE_URL}",
              "-p", "OPENSHIFT_ORIGIN_IMAGE=${env.OPENSHIFT_ORIGIN_IMAGE}",
              "-p", "JENKINS_ADMIN_SA=${env.JENKINS_ADMIN_SA}")
            openshift.apply(secretsControllerResources)
          }
        }
      }
    }
    stage("Deploy JJB Controller") {
      steps {
        script {
          openshift.doAs(jenkinsAdminToken) {
            jjbControllerResources = openshift.process(
              "--filename=jenkins/controllers/jjb/jenkins-jjb-controller.yaml",
              "-p", "SOURCE_REF=${env.SOURCE_REF}",
              "-p", "SOURCE_URL=${env.SOURCE_URL}",
              "-p", "OPENSHIFT_ORIGIN_IMAGE=${env.OPENSHIFT_ORIGIN_IMAGE}",
              "-p", "JENKINS_ADMIN_SA=${env.JENKINS_ADMIN_SA}")
            openshift.apply(jjbControllerResources)
          }
        }
      }
    }
    stage("Generate ConfigMaps") {
      steps {
        script {
          openshift.withCluster() {
            // Create the build and run it
            def builderObjects = openshift.process("--filename=jenkins/setup/resources/config-generator-build.yaml")
            openshift.apply(builderObjects)
            def jobBuilder = openshift.selector("buildconfig/configmap-job-builder")
            sh "cp -R jenkins/library/src jenkins/setup/images/config-job-image"
            openshift.startBuild("configmap-job", "--from-dir=./jenkins/setup/images/config-job-image", "--follow")

            // Wait for an imagestream tag for the builder to be available
            def imageStream = openshift.selector("imagestream/configmap-job")
            def jobImageRef = ""
            imageStream.watch {
              is = it.object()
              if ((is.status.tags != null) && (is.status.tags.size() > 0)) {
                jobImageRef = is.status.tags[0].items[0].dockerImageReference
                return true
              }
            }

            openshift.selector("job/configmap-job").delete("--ignore-not-found")

            // Run the job to create config maps
            def configMapJob = openshift.process(
              "--filename=jenkins/setup/resources/config-generator-job.yaml",
              "-p", "JOB_IMAGE=${jobImageRef}",
              "-p", "JENKINS_ADMIN_SA=${env.JENKINS_ADMIN_SA}")
            openshift.apply(configMapJob)
          }
        }
      }
    }
  }
}
