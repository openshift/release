apiVersion: ci.openshift.io/v1
kind: MultiArchBuildConfig
metadata:
  name: ci-tools-build-root
  namespace: ci
spec:
  build_spec:
    successfulBuildsHistoryLimit: 1
    failedBuildsHistoryLimit: 2
    output:
      to:
        kind: ImageStreamTag
        name: ci-tools-build-root:1.22
        namespace: ci
    source:
      images:
      - from:
          kind: ImageStreamTag
          name: boskos:latest
          namespace: ci
        paths:
        - destinationDir: .
          sourcePath: /app
      - from:
          kind: ImageStreamTag
          name: prometheus:latest
          namespace: ci
        paths:
        - destinationDir: .
          sourcePath: /bin/prometheus
        - destinationDir: .
          sourcePath: /bin/promtool
      dockerfile: |
        FROM mplatform/manifest-tool:v2.1.3 as builder
        FROM quay.io/centos/centos:stream9

        COPY --from=builder /manifest-tool /usr/bin/manifest-tool

        ENV VERSION=1.22.4 \
            GOCACHE=/go/.cache \
            GOARM=5 \
            GOPATH=/go \
            GOROOT=/usr/local/go \
            GOFLAGS='-mod=vendor' \
            LOGNAME=deadbeef
        ENV PATH=$PATH:$GOROOT/bin:$GOPATH/bin

        RUN mkdir $GOPATH

        RUN dnf install -y epel-release && \
            rpm -V epel-release && \
            INSTALL_PKGS="bc bind-utils bsdtar device-mapper device-mapper-persistent-data e2fsprogs ethtool file findutils gcc git glib2-devel hostname iptables-nft jq krb5-devel libseccomp-devel lsof make mercurial nmap-ncat openssl rsync socat systemd-devel tar tito tree util-linux wget which xfsprogs zip" && \
            dnf install -y $INSTALL_PKGS && \
            rpm -V $INSTALL_PKGS && \
            dnf clean all && \
            touch /os-build-image && \
            git config --system user.name origin-release-container && \
            git config --system user.email origin-release@redhat.com

        RUN ARCH=$(uname -m) && \
            case "$ARCH" in \
                x86_64*) ARCH='amd64' ;; \
                aarch64*) ARCH='arm64' ;; \
                *) echo "Unsupported architecture: $ARCH" && exit 1 ;; \
            esac && \
            export ARCH && \
            echo "Detected architecture: $ARCH" && \
            curl --fail --retry 3 -L https://golang.org/dl/go$VERSION.linux-$ARCH.tar.gz | tar -C /usr/local -xzf - && \
            curl --fail --retry 3 -L https://github.com/gotestyourself/gotestsum/releases/download/v1.11.0/gotestsum_1.11.0_linux_$ARCH.tar.gz | tar -C /usr/bin -xzf -


        RUN ARCH=$(uname -m) && \
            OC_CLIENT_URL="https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.14.0/openshift-client-linux" && \
            if [ "$ARCH" = "aarch64" ]; then \
                OC_CLIENT_URL="${OC_CLIENT_URL}-arm64.tar.gz"; \
            else \
                OC_CLIENT_URL="${OC_CLIENT_URL}.tar.gz"; \
            fi && \
            echo "Downloading OpenShift client for $ARCH" && \
            curl --fail --retry 3 -L $OC_CLIENT_URL | tar -C /usr/local/bin -xzf -

        RUN chmod g+xw -R $GOPATH && \
            chmod g+xw -R $(go env GOROOT)

        ENV VAULT_DISABLE_MLOCK true
        RUN dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo && \
            dnf install -y vault-1.7.7-1 && \
            setcap cap_ipc_lock= /usr/bin/vault

        RUN dnf install -y nodejs && npm install -g typescript
        RUN npm config set cache /go/.npm --global

        COPY ./app /go/bin/boskos

        COPY ./prometheus /go/bin/prometheus
        COPY ./promtool /go/bin/promtool
      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: centos:stream9
          namespace: openshift
        imageOptimizationPolicy: SkipLayers
      type: Docker
    triggers:
    - imageChange:
        from:
          kind: ImageStreamTag
          name: centos:stream9
          namespace: openshift
      type: ImageChange
  external_registries:
  - registry.ci.openshift.org
