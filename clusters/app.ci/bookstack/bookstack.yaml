kind: List
apiVersion: v1
items:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: bookstack-pvc
    namespace: ci
    labels:
      app: bookstack
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: bookstack-db-pvc
    namespace: ci
    labels:
      app: bookstack-db
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: Service
  metadata:
    name: bookstack-db
    namespace: ci
    labels:
      app: bookstack-db
  spec:
    ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP
    selector:
      app: bookstack-db
    type: NodePort
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: bookstack-db
    namespace: ci
    labels:
      app: bookstack-db
  spec:
    replicas: 1
    strategy:
      type: Recreate
    selector:
      matchLabels:
        app: bookstack-db
    template:
      metadata:
        labels:
          app: bookstack-db
      spec:
        containers:
        - image: docker.io/mysql:5.7.21
          name: bookstack-db
          ports:
          - containerPort: 3306
            name: mysql
          env:
          - name: MYSQL_DATABASE
            value: "bookstack"
          - name: MYSQL_PASSWORD
            value: "secret"
          - name: MYSQL_ROOT_PASSWORD
            value: "secret"
          - name: MYSQL_USER
            value: "bookstack"
          volumeMounts:
          - mountPath: /var/lib/mysql
            name: data
        volumes:
        - name: data
          emptyDir:
            sizeLimit: 500Mi
- apiVersion: v1
  kind: Service
  metadata:
    name: bookstack
    namespace: ci
    labels:
      app: bookstack
  spec:
    selector:
      app: bookstack
    ports:
    - port: 80
      targetPort: 80
      protocol: TCP
    type: LoadBalancer
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: bookstack
    namespace: ci
    labels:
      app: bookstack
  spec:
    replicas: 1
    strategy:
      type: Recreate
    selector:
      matchLabels:
        app: bookstack
    template:
      metadata:
        labels:
          app: bookstack
      spec:
        containers:
        - name: bookstack
          image: docker.io/solidnerd/bookstack:22.11.0
          ports:
          - containerPort: 80
            name: http
          env:
          - name: DB_DATABASE
            value: "bookstack"
          - name: DB_HOST
            value: "bookstack-db:3306"
          - name: DB_PASSWORD
            value: "secret"
          - name: DB_USERNAME
            value: "bookstack"
          volumeMounts:
          - mountPath: /var/www/bookstack/.env
            subPath: .env
            name: dot-env
          - mountPath: /var/www/bookstack/public/uploads
            name: public-uploads
          - mountPath: /var/www/bookstack/storage/uploads
            name: storage-uploads
          - mountPath: /var/www/bookstack/storage/clockwork
            name: storage-clockwork
        volumes:
        - name: public-uploads
          emptyDir:
            sizeLimit: 100Mi
        - name: storage-uploads
          emptyDir:
            sizeLimit: 100Mi
        - name: storage-clockwork
          emptyDir:
            sizeLimit: 100Mi
        - name: dot-env
          secret:
            secretName: dot-env
- apiVersion: v1
  kind: Secret
  metadata:
    name: dot-env
    namespace: ci
  stringData:
    .env: |
      # Environment
      APP_ENV=production
      APP_DEBUG=${APP_DEBUG:-false}
      APP_KEY=${APP_KEY:-SomeRandomStringWith32Characters}
      # The below url has to be set if using social auth options
      # or if you are not using BookStack at the root path of your domain.
      APP_URL=${APP_URL:-null}
      # Database details
      DB_HOST=${DB_HOST:-localhost}
      DB_DATABASE=${DB_DATABASE:-bookstack}
      DB_USERNAME=${DB_USERNAME:-bookstack}
      DB_PASSWORD=${DB_PASSWORD:-password}
      # Cache and session
      CACHE_DRIVER=file
      SESSION_DRIVER=file
      # If using Memcached, comment the above and uncomment these
      #CACHE_DRIVER=memcached
      #SESSION_DRIVER=memcached
      QUEUE_DRIVER=sync
      # Memcached settings
      # If using a UNIX socket path for the host, set the port to 0
      # This follows the following format: HOST:PORT:WEIGHT
      # For multiple servers separate with a comma
      MEMCACHED_SERVERS=127.0.0.1:11211:100
      # Storage
      STORAGE_TYPE=${STORAGE_TYPE:-local}
      # Amazon S3 Config
      STORAGE_S3_KEY=${STORAGE_S3_KEY:-false}
      STORAGE_S3_SECRET=${STORAGE_S3_SECRET:-false}
      STORAGE_S3_REGION=${STORAGE_S3_REGION:-false}
      STORAGE_S3_BUCKET=${STORAGE_S3_BUCKET:-false}
      # Storage URL
      # Used to prefix image urls for when using custom domains/cdns
      STORAGE_URL=${STORAGE_URL:-false}
      # General auth
      AUTH_METHOD=${AUTH_METHOD:-standard}
      # Social Authentication information. Defaults as off.
      GITHUB_APP_ID=${GITHUB_APP_ID:-false}
      GITHUB_APP_SECRET=${GITHUB_APP_SECRET:-false}
      GOOGLE_APP_ID=${GOOGLE_APP_ID:-false}
      GOOGLE_APP_SECRET=${GOOGLE_APP_SECRET:-false}
      # External services such as Gravatar
      DISABLE_EXTERNAL_SERVICES=${DISABLE_EXTERNAL_SERVICES:-false}
      # LDAP Settings
      LDAP_SERVER=${LDAP_SERVER:-false}
      LDAP_BASE_DN=${LDAP_BASE_DN:-false}
      LDAP_DN=${LDAP_DN:-false}
      LDAP_PASS=${LDAP_PASS:-false}
      LDAP_USER_FILTER=${LDAP_USER_FILTER:-false}
      LDAP_VERSION=${LDAP_VERSION:-false}
      # Mail settings
      MAIL_DRIVER=${MAIL_DRIVER:-smtp}
      MAIL_HOST=${MAIL_HOST:-localhost}
      MAIL_PORT=${MAIL_PORT:-1025}
      MAIL_USERNAME=${MAIL_USERNAME:-null}
      MAIL_PASSWORD=${MAIL_PASSWORD:-null}
      MAIL_ENCRYPTION=${MAIL_ENCRYPTION:-null}
      # URL used for social login redirects, NO TRAILING SLASH
