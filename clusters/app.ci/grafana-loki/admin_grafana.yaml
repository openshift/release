kind: Namespace
apiVersion: v1
metadata:
  name: grafana-loki
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: grafana-loki-admins
  namespace: grafana-loki
subjects:
- kind: Group
  apiGroup: rbac.authorization.k8s.io
  name: grafana-loki-admins
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: view
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: grafana-var-lib
    namespace: grafana-loki
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 256M
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-promtail
  namespace: grafana-loki
---
kind: Secret
apiVersion: v1
metadata:
  name: cookie-secret
  namespace: grafana-loki
data:
  cookie-secret: Y2I3YzljNmJxaGQ5dndwdjV3ZHQ2YzVwY3B6MnI0Zmo= #TODO
type: Opaque
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: grafana
  namespace: grafana-loki
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: grafana
    spec:
      volumes:
        - name: grafana-config
          secret:
            secretName: grafana-config
            defaultMode: 420
        - name: grafana-datasources
          secret:
            secretName: grafana-datasources
            defaultMode: 420
        - name: grafana-var-lib
          persistentVolumeClaim:
            claimName: grafana-var-lib
        - name: cookie-secret
          secret:
            defaultMode: 420
            secretName: cookie-secret
      containers:
        - name: grafana-sso
          image: 'quay.io/vrutkovs/grafana:9.4.3'
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              protocol: TCP
          resources: {}
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-var-lib
              mountPath: /var/lib/grafana
        - name: oauth-proxy
          args:
          - --https-address=:9001
          - --provider=openshift
          - --openshift-service-account=grafana-promtail
          - --upstream=http://127.0.0.1:3101 # TODO
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret-file=/etc/tls/cookie-secret/cookie-secret
          - '--openshift-sar={"resource": "namespaces", "verb": "get"}'
          - '--openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get"}}'
          image: registry.redhat.io/openshift4/ose-oauth-proxy:latest
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 9001
            name: metrics
            protocol: TCP
          resources:
            requests:
              cpu: 20m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/tls/private
            name: proxy-tls
          - mountPath: /etc/tls/cookie-secret
            name: cookie-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: grafana-loki
spec:
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  selector:
    app: grafana
  type: ClusterIP
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: grafana
  namespace: grafana-loki
spec:
  path: /
  to:
    kind: Service
    name: grafana
    weight: 100
  port:
    targetPort: 3000
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-loki-redirect-config
  namespace: ci
data:
  "default.conf": |
    server {
      listen 8080;
      return 302 $scheme://grafana-loki.ci.openshift.org$request_uri;
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana-loki-redirect
  name: grafana-loki-redirect
  namespace: ci
spec:
  selector:
    matchLabels:
      component: grafana-loki-redirect
  template:
    metadata:
      labels:
        component: grafana-loki-redirect
    spec:
      containers:
      - image: nginxinc/nginx-unprivileged:1.17
        name: nginx
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: config
        configMap:
          name: grafana-loki-redirect-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: grafana-loki-redirect
  name: grafana-loki-redirect
  namespace: ci
spec:
  ports:
  - name: main
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    component: grafana-loki-redirect
  sessionAffinity: None
  type: ClusterIP
