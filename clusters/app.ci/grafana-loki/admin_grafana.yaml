kind: Namespace
apiVersion: v1
metadata:
  name: grafana-loki
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: grafana-loki-admins
  namespace: grafana-loki
subjects:
- kind: Group
  apiGroup: rbac.authorization.k8s.io
  name: grafana-loki-admins
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: view
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: grafana-var-lib
    namespace: grafana-loki
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 256M
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: grafana
  namespace: grafana-loki
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: grafana
    spec:
      volumes:
        - name: grafana-config
          secret:
            secretName: grafana-config
            defaultMode: 420
        - name: grafana-datasources
          secret:
            secretName: grafana-datasources
            defaultMode: 420
        - name: grafana-var-lib
          persistentVolumeClaim:
            claimName: grafana-var-lib
      containers:
        - name: grafana-sso
          image: 'quay.io/vrutkovs/grafana:9.4.3'
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              protocol: TCP
          resources: {}
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-var-lib
              mountPath: /var/lib/grafana
        - name: token-refresher
          args:
            - --oidc.audience=$(AUDIENCE)
            - --oidc.client-id=$(CLIENT_ID)
            - --oidc.client-secret=$(CLIENT_SECRET)
            - --oidc.issuer-url=$(ISSUER_URL)
            - --upstream.url=$(RECEIVER_URL)
            - --upstream.read-timeout=5s
            - --upstream.write-timeout=10m
          env:
            - name: AUDIENCE
              valueFrom:
                secretKeyRef:
                  name: grafana-sso-redhat-oidc-credentials
                  key: audience
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: grafana-sso-redhat-oidc-credentials
                  key: client-id
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: grafana-sso-redhat-oidc-credentials
                  key: client-secret
            - name: RECEIVER_URL
              valueFrom:
                secretKeyRef:
                  name: grafana-sso-redhat-oidc-credentials
                  key: receiver-url
            - name: ISSUER_URL
              value: "https://sso.redhat.com/auth/realms/redhat-external"
          image: quay.io/observatorium/token-refresher:master-2023-04-03-2207107
          resources:
            requests:
              cpu: 1000m
              memory: 2000Mi
            limits:
              cpu: 2000m
              memory: 4000Mi
          readinessProbe:
            httpGet:
              path: /ready
              port: 8081
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /live
              port: 8081
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: grafana-loki
spec:
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  selector:
    app: grafana
  type: ClusterIP
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: grafana
  namespace: grafana-loki
  annotations:
    haproxy.router.openshift.io/timeout: 300s
spec:
  path: /
  to:
    kind: Service
    name: grafana
    weight: 100
  port:
    targetPort: 3000
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-loki-redirect-config
  namespace: ci
data:
  "default.conf": |
    server {
      listen 8080;
      return 302 $scheme://grafana-loki.ci.openshift.org$request_uri;
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana-loki-redirect
  name: grafana-loki-redirect
  namespace: ci
spec:
  selector:
    matchLabels:
      component: grafana-loki-redirect
  template:
    metadata:
      labels:
        component: grafana-loki-redirect
    spec:
      containers:
      - image: nginxinc/nginx-unprivileged:1.17
        name: nginx
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: config
        configMap:
          name: grafana-loki-redirect-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: grafana-loki-redirect
  name: grafana-loki-redirect
  namespace: ci
spec:
  ports:
  - name: main
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    component: grafana-loki-redirect
  sessionAffinity: None
  type: ClusterIP
