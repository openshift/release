apiVersion: v1
kind: List
items:
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    namespace: ci
    name: ci-tools-build-root
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    namespace: ci
    name: ci-tools-build-root
  spec:
    successfulBuildsHistoryLimit: 1
    failedBuildsHistoryLimit: 2
    output:
      to:
        kind: ImageStreamTag
        name: ci-tools-build-root:latest
    source:
      images:
      - from:
          kind: ImageStreamTag
          name: boskos:latest
          namespace: ci
        paths:
        - destinationDir: .
          sourcePath: /app
      - from:
          kind: ImageStreamTag
          name: prometheus:latest
          namespace: ci
        paths:
        - destinationDir: .
          sourcePath: /bin/prometheus
        - destinationDir: .
          sourcePath: /bin/promtool
      # NOTE: We cannot use a ConfigChange trigger on this build as it triggers on every push to
      # openshift/release, causing this image to build ~100x a day. If you change the following
      # Dockerfile, please ensure you run `oc start-build` yourself once the new version is applied.
      dockerfile: |
        FROM mplatform/manifest-tool as builder
        FROM quay.io/centos/centos:stream8

        COPY --from=builder /manifest-tool /usr/bin/manifest-tool

        ENV VERSION=1.16 \
            GOCACHE=/go/.cache \
            GOARM=5 \
            GOPATH=/go \
            GOROOT=/usr/local/go \
            GOFLAGS='-mod=vendor' \
            LOGNAME=deadbeef
        ENV PATH=$PATH:$GOROOT/bin:$GOPATH/bin

        RUN yum install -y epel-release && \
            rpm -V epel-release && \
            INSTALL_PKGS="bc bind-utils bsdtar device-mapper device-mapper-persistent-data e2fsprogs ethtool file findutils gcc git glib2-devel hostname iptables jq krb5-devel libseccomp-devel libvirt-devel lsof make mercurial nmap-ncat openssl rsync socat systemd-devel tar tito tree util-linux wget which xfsprogs zip" && \
            yum install -y $INSTALL_PKGS && \
            rpm -V $INSTALL_PKGS && \
            yum clean all && \
            touch /os-build-image && \
            git config --system user.name origin-release-container && \
            git config --system user.email origin-release@redhat.com

        RUN \
            set -x &&  \
            curl --fail --retry 3 -L https://golang.org/dl/go$VERSION.linux-amd64.tar.gz | tar -C /usr/local -xzf - && \
            go get golang.org/x/tools/cmd/cover \
                golang.org/x/tools/cmd/goimports \
                github.com/tools/godep \
                golang.org/x/lint/golint \
                gotest.tools/gotestsum@v0.6.0 && \
            mv $GOPATH/bin/* /usr/bin/ && \
            rm -rf $GOPATH/* $GOPATH/.cache && \
            mkdir $GOPATH/bin && \
            ln -s /usr/bin/goimports $GOPATH/bin/goimports && \
            curl -L https://github.com/golang/dep/releases/download/v0.5.4/dep-linux-amd64 > /usr/bin/dep && \
            chmod +x /usr/bin/dep

        RUN chmod g+xw -R $GOPATH && \
            chmod g+xw -R $(go env GOROOT)

        ENV VAULT_DISABLE_MLOCK true
        RUN yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo && \
            yum install -y vault-1.7.0-1 && \
            setcap cap_ipc_lock= /usr/bin/vault

        RUN yum install -y nodejs && npm install -g typescript
        RUN npm config set cache /go/.npm --global

        COPY ./app /go/bin/boskos

        COPY ./prometheus /go/bin/prometheus
        COPY ./promtool /go/bin/promtool
      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: centos:stream8
          namespace: origin
        imageOptimizationPolicy: SkipLayers
      type: Docker
    triggers:
    - imageChange:
        from:
          kind: ImageStreamTag
          name: centos:stream8
          namespace: origin
      type: ImageChange
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    namespace: ci
    name: ci-tools-build-root-1.18
  spec:
    successfulBuildsHistoryLimit: 1
    failedBuildsHistoryLimit: 2
    output:
      to:
        kind: ImageStreamTag
        name: ci-tools-build-root:1.18
    source:
      images:
      - from:
          kind: ImageStreamTag
          name: boskos:latest
          namespace: ci
        paths:
        - destinationDir: .
          sourcePath: /app
      - from:
          kind: ImageStreamTag
          name: prometheus:latest
          namespace: ci
        paths:
        - destinationDir: .
          sourcePath: /bin/prometheus
        - destinationDir: .
          sourcePath: /bin/promtool
      # NOTE: We cannot use a ConfigChange trigger on this build as it triggers on every push to
      # openshift/release, causing this image to build ~100x a day. If you change the following
      # Dockerfile, please ensure you run `oc start-build` yourself once the new version is applied.
      dockerfile: |
        FROM mplatform/manifest-tool as builder
        FROM quay.io/centos/centos:stream8

        COPY --from=builder /manifest-tool /usr/bin/manifest-tool

        ENV VERSION=1.18 \
            GOCACHE=/go/.cache \
            GOARM=5 \
            GOPATH=/go \
            GOROOT=/usr/local/go \
            LOGNAME=deadbeef
        ENV PATH=$PATH:$GOROOT/bin:$GOPATH/bin

        RUN yum install -y epel-release && \
            rpm -V epel-release && \
            INSTALL_PKGS="bc bind-utils bsdtar device-mapper device-mapper-persistent-data e2fsprogs ethtool file findutils gcc git glib2-devel hostname iptables jq krb5-devel libseccomp-devel libvirt-devel lsof make mercurial nmap-ncat openssl rsync socat systemd-devel tar tito tree util-linux wget which xfsprogs zip" && \
            yum install -y $INSTALL_PKGS && \
            rpm -V $INSTALL_PKGS && \
            yum clean all && \
            touch /os-build-image && \
            git config --system user.name origin-release-container && \
            git config --system user.email origin-release@redhat.com

        RUN \
            set -x &&  \
            curl --fail --retry 3 -L https://golang.org/dl/go$VERSION.linux-amd64.tar.gz | tar -C /usr/local -xzf - && \
            go install golang.org/x/tools/cmd/cover@latest && \
            go install golang.org/x/tools/cmd/goimports@latest && \
            go install golang.org/x/lint/golint@latest && \
            go install gotest.tools/gotestsum@v1.7.0 && \
            mv $GOPATH/bin/* /usr/bin/ && \
            rm -rf $GOPATH/* $GOPATH/.cache && \
            mkdir $GOPATH/bin && \
            ln -s /usr/bin/goimports $GOPATH/bin/goimports

        RUN chmod g+xw -R $GOPATH && \
            chmod g+xw -R $(go env GOROOT)

        ENV VAULT_DISABLE_MLOCK true
        RUN yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo && \
            yum install -y vault-1.7.0-1 && \
            setcap cap_ipc_lock= /usr/bin/vault

        RUN yum install -y nodejs && npm install -g typescript
        RUN npm config set cache /go/.npm --global

        COPY ./app /go/bin/boskos

        COPY ./prometheus /go/bin/prometheus
        COPY ./promtool /go/bin/promtool
      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: centos:stream8
          namespace: origin
        imageOptimizationPolicy: SkipLayers
      type: Docker
    triggers:
    - imageChange:
        from:
          kind: ImageStreamTag
          name: centos:stream8
          namespace: origin
      type: ImageChange
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    namespace: ci
    name: ci-tools-build-root-1.19
  spec:
    successfulBuildsHistoryLimit: 1
    failedBuildsHistoryLimit: 2
    output:
      to:
        kind: ImageStreamTag
        name: ci-tools-build-root:1.19
    source:
      images:
      - from:
          kind: ImageStreamTag
          name: boskos:latest
          namespace: ci
        paths:
        - destinationDir: .
          sourcePath: /app
      - from:
          kind: ImageStreamTag
          name: prometheus:latest
          namespace: ci
        paths:
        - destinationDir: .
          sourcePath: /bin/prometheus
        - destinationDir: .
          sourcePath: /bin/promtool
      # NOTE: We cannot use a ConfigChange trigger on this build as it triggers on every push to
      # openshift/release, causing this image to build ~100x a day. If you change the following
      # Dockerfile, please ensure you run `oc start-build` yourself once the new version is applied.
      dockerfile: |
        FROM mplatform/manifest-tool as builder
        FROM quay.io/centos/centos:stream9

        COPY --from=builder /manifest-tool /usr/bin/manifest-tool

        ENV VERSION=1.19 \
            GOCACHE=/go/.cache \
            GOARM=5 \
            GOPATH=/go \
            GOROOT=/usr/local/go \
            LOGNAME=deadbeef
        ENV PATH=$PATH:$GOROOT/bin:$GOPATH/bin

        RUN dnf install -y epel-release && \
            rpm -V epel-release && \
            dnf upgrade -y --refresh && \
            dnf config-manager --set-enabled crb && \
            INSTALL_PKGS="bc bind-utils bsdtar device-mapper device-mapper-persistent-data e2fsprogs ethtool file findutils gcc git glib2-devel hostname iptables-nft jq krb5-devel libseccomp-devel libvirt-devel lsof make mercurial nmap-ncat openssl rsync socat systemd-devel tar tito tree util-linux wget which xfsprogs zip" && \
            dnf install -y $INSTALL_PKGS && \
            rpm -V $INSTALL_PKGS && \
            dnf clean all && \
            touch /os-build-image && \
            git config --system user.name origin-release-container && \
            git config --system user.email origin-release@redhat.com

        RUN \
            set -x &&  \
            curl --fail --retry 3 -L https://golang.org/dl/go$VERSION.linux-amd64.tar.gz | tar -C /usr/local -xzf - && \
            go install golang.org/x/tools/cmd/cover@latest && \
            go install golang.org/x/tools/cmd/goimports@latest && \
            go install golang.org/x/lint/golint@latest && \
            go install gotest.tools/gotestsum@v1.9.0 && \
            mv $GOPATH/bin/* /usr/bin/ && \
            rm -rf $GOPATH/* $GOPATH/.cache && \
            mkdir $GOPATH/bin && \
            ln -s /usr/bin/goimports $GOPATH/bin/goimports

        RUN chmod g+xw -R $GOPATH && \
            chmod g+xw -R $(go env GOROOT)

        ENV VAULT_DISABLE_MLOCK true
        RUN dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo && \
            dnf install -y vault-1.7.0-1 && \
            setcap cap_ipc_lock= /usr/bin/vault

        RUN dnf install -y nodejs && npm install -g typescript
        RUN npm config set cache /go/.npm --global

        COPY ./app /go/bin/boskos

        COPY ./prometheus /go/bin/prometheus
        COPY ./promtool /go/bin/promtool
      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: centos:stream9
          namespace: openshift
        imageOptimizationPolicy: SkipLayers
      type: Docker
    triggers:
    - imageChange:
        from:
          kind: ImageStreamTag
          name: centos:stream9
          namespace: openshift
      type: ImageChange
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    namespace: ci
    name: ci-tools-build-root-1.21
  spec:
    successfulBuildsHistoryLimit: 1
    failedBuildsHistoryLimit: 2
    output:
      to:
        kind: ImageStreamTag
        name: ci-tools-build-root:1.21
    source:
      images:
      - from:
          kind: ImageStreamTag
          name: boskos:latest
          namespace: ci
        paths:
        - destinationDir: .
          sourcePath: /app
      - from:
          kind: ImageStreamTag
          name: prometheus:latest
          namespace: ci
        paths:
        - destinationDir: .
          sourcePath: /bin/prometheus
        - destinationDir: .
          sourcePath: /bin/promtool
      # NOTE: We cannot use a ConfigChange trigger on this build as it triggers on every push to
      # openshift/release, causing this image to build ~100x a day. If you change the following
      # Dockerfile, please ensure you run `oc start-build` yourself once the new version is applied.
      dockerfile: |
        FROM mplatform/manifest-tool as builder
        FROM quay.io/centos/centos:stream9

        COPY --from=builder /manifest-tool /usr/bin/manifest-tool

        ENV VERSION=1.21.0 \
            GOCACHE=/go/.cache \
            GOARM=5 \
            GOPATH=/go \
            GOROOT=/usr/local/go \
            LOGNAME=deadbeef
        ENV PATH=$PATH:$GOROOT/bin:$GOPATH/bin

        RUN dnf install -y epel-release && \
            rpm -V epel-release && \
            dnf upgrade -y --refresh && \
            dnf config-manager --set-enabled crb && \
            INSTALL_PKGS="bc bind-utils bsdtar device-mapper device-mapper-persistent-data e2fsprogs ethtool file findutils gcc git glib2-devel hostname iptables-nft jq krb5-devel libseccomp-devel libvirt-devel lsof make mercurial nmap-ncat openssl rsync socat systemd-devel tar tito tree util-linux wget which xfsprogs zip" && \
            dnf install -y $INSTALL_PKGS && \
            rpm -V $INSTALL_PKGS && \
            dnf clean all && \
            touch /os-build-image && \
            git config --system user.name origin-release-container && \
            git config --system user.email origin-release@redhat.com

        RUN \
            set -x &&  \
            curl --fail --retry 3 -L https://golang.org/dl/go$VERSION.linux-amd64.tar.gz | tar -C /usr/local -xzf - && \
            go install golang.org/x/tools/cmd/cover@latest && \
            go install golang.org/x/tools/cmd/goimports@latest && \
            go install golang.org/x/lint/golint@latest && \
            go install gotest.tools/gotestsum@v1.9.0 && \
            mv $GOPATH/bin/* /usr/bin/ && \
            rm -rf $GOPATH/* $GOPATH/.cache && \
            mkdir $GOPATH/bin && \
            ln -s /usr/bin/goimports $GOPATH/bin/goimports

        RUN chmod g+xw -R $GOPATH && \
            chmod g+xw -R $(go env GOROOT)

        ENV VAULT_DISABLE_MLOCK true
        RUN dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo && \
            dnf install -y vault-1.7.0-1 && \
            setcap cap_ipc_lock= /usr/bin/vault

        RUN dnf install -y nodejs && npm install -g typescript
        RUN npm config set cache /go/.npm --global

        COPY ./app /go/bin/boskos

        COPY ./prometheus /go/bin/prometheus
        COPY ./promtool /go/bin/promtool
      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: centos:stream9
          namespace: openshift
        imageOptimizationPolicy: SkipLayers
      type: Docker
    triggers:
    - imageChange:
        from:
          kind: ImageStreamTag
          name: centos:stream9
          namespace: openshift
      type: ImageChange
