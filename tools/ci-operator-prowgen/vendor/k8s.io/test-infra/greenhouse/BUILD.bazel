load("@io_bazel_rules_docker//go:image.bzl", "go_image")
load("@io_bazel_rules_k8s//k8s:object.bzl", "k8s_object")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

go_library(
    name = "go_default_library",
    srcs = [
        "eviction.go",
        "main.go",
        "prometheus.go",
    ],
    importpath = "k8s.io/test-infra/greenhouse",
    visibility = ["//visibility:private"],
    deps = [
        "//greenhouse/diskcache:go_default_library",
        "//greenhouse/diskutil:go_default_library",
        "//prow/logrusutil:go_default_library",
        "//vendor/github.com/prometheus/client_golang/prometheus:go_default_library",
        "//vendor/github.com/prometheus/client_golang/prometheus/promhttp:go_default_library",
        "//vendor/github.com/sirupsen/logrus:go_default_library",
    ],
)

go_binary(
    name = "greenhouse",
    embed = [":go_default_library"],
    pure = "on",
    visibility = ["//visibility:public"],
)

filegroup(
    name = "package-srcs",
    srcs = glob(["**"]),
    tags = ["automanaged"],
    visibility = ["//visibility:private"],
)

filegroup(
    name = "all-srcs",
    srcs = [
        ":package-srcs",
        "//greenhouse/diskcache:all-srcs",
        "//greenhouse/diskutil:all-srcs",
    ],
    tags = ["automanaged"],
    visibility = ["//visibility:public"],
)

go_image(
    name = "image",
    base = "@alpine-base//image",
    binary = ":greenhouse",
    visibility = ["//visibility:public"],
)

k8s_object(
    name = "production",
    cluster = "{STABLE_BUILD_CLUSTER}",
    images = {
        "gcr.io/k8s-testimages/greenhouse:latest": ":image",
    },
    kind = "deployment",
    template = ":deployment.yaml",
)
